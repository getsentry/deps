#!/usr/bin/env python3
import csv
import json
from collections import defaultdict

eco_map = {
    'js': 'JavaScript',
    'py': 'Python',
    'rs': 'Rust',
}

github = json.load(open('github.json'))
counts = {
    'ecos': defaultdict(set),
    'sponsorables': defaultdict(lambda: defaultdict(lambda: {'used_in': set(), 'projects': set()}))
}
urls = dict()
data = defaultdict(lambda: defaultdict(list))
for org, sponsorable, url, repo, stars, eco in csv.reader(open('deps.csv')):
    stars = int(stars)
    used_in = sorted(list(set([x.split('/')[0] for x in github[eco][org][repo]])))
    eco = eco_map.get(eco, eco)

    counts['ecos'][eco].add(sponsorable)
    counts['sponsorables'][eco][sponsorable]['used_in'] |= set(used_in)
    counts['sponsorables'][eco][sponsorable]['projects'].add(repo)
    urls[sponsorable] = url
    data[eco][sponsorable].append((len(used_in), stars, used_in, org, repo))

for eco in counts['ecos']:
    counts['ecos'][eco] = len(counts['ecos'][eco])
for eco in counts['sponsorables']:
    for sponsorable in counts['sponsorables'][eco]:
        nused_in = len(counts['sponsorables'][eco][sponsorable]['used_in'])
        nprojects = len(counts['sponsorables'][eco][sponsorable]['projects'])
        counts['sponsorables'][eco][sponsorable] = (nused_in, nprojects)

out = open('links.html', 'w+')
def p(*a, **kw):
    print(*a, **kw, file=out)

p('<!DOCTYPE html><html><head><title>Sentry\'s Fundable Dependencies</title><link rel="stylesheet" href="links.css"></head><body><div class="ecos">')
p(f'<h1>Sentry\'s Fundable Dependencies</h1>')
p(f'<p>This is a super-hacky <a href="https://github.com/getsentry/deps">hack</a> to find GitHub orgs/users from our three primary ecosystems whose projects we directly depend on in our <a href="https://open.sentry.io/structure/">main repos</a> and who accept funding on either <a href=">https://github.com/sponsors">GitHub Sponsors</a> or <a href="https://opencollective.com/">Open Collective</a>.</p>')
for n, eco in reversed(sorted([(v,k) for k,v in counts['ecos'].items()])):
    p(f'<h2>{eco}</h2>')
    p(f'<table class="orgs">')
    p(f'<thead><tr><th></th><th>Org/User</th><th>Project</th></tr></thead>')
    for i, ((nused_in, nprojects), sponsorable) in enumerate(reversed(sorted([(v,k) for k,v in counts['sponsorables'][eco].items()])), start=1):
        url = urls[sponsorable]
        p(f'<tr class="sponsorable">')
        p(f'  <td class="i">{i}</td>')
        p(f'  <td class="sponsorable"><a href="{url}" target="_blank">{sponsorable}</a></td>')
        p(f'  <td class="project">')
        for j, (nused_in, stars, used_in, org, repo) in enumerate(reversed(sorted(data[eco][sponsorable]))):
            p(f'<div><span class="stars">â˜… {stars:,}</span>')
            p(f'<a href="https://github.com/{org}/{repo}">{repo}</a><br>')
            for ours in used_in:
                p(f'<span class="used_in">{ours}</span>')
            p(f'</div>')
        p(f'</td></tr>')
    p(f'</table>')
p('</div></body></html>')
