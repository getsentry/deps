{"analyzedAt":"2021-07-05T18:29:47.806Z","collected":{"metadata":{"name":"react-keydown","scope":"unscoped","version":"1.9.12","description":"Lightweight keydown wrapper for React components","keywords":["react","react-component","decorator","higher-order-component","keypress","keydown","keyboard","keynav","key-navigation"],"date":"2019-08-26T19:37:38.649Z","author":{"name":"Jed Verity"},"publisher":{"username":"glortho","email":"jed@dataverse.me"},"maintainers":[{"username":"glortho","email":"jed@dataverse.me"}],"contributors":[{"name":"Salman Mitha","email":"salmanmitha@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/glortho/react-keydown.git"},"links":{"npm":"https://www.npmjs.com/package/react-keydown","homepage":"https://github.com/glortho/react-keydown#readme","repository":"https://github.com/glortho/react-keydown","bugs":"https://github.com/glortho/react-keydown/issues"},"license":"MIT","dependencies":{"core-js":"^3.1.2"},"devDependencies":{"babel-cli":"^6.26.0","babel-loader":"^7.1.5","babel-plugin-transform-decorators-legacy":"^1.3.5","babel-plugin-transform-es2015-modules-commonjs":"^6.26.2","babel-preset-es2015":"6.x","babel-preset-react":"^6.23.0","babel-preset-stage-1":"^6.24.1","eslint":"^5.16.0","react":"^15.6.2","react-dom":"^15.6.2","tap-difflet":"^0.4.0","tape":"^4.10.1","webpack":"^4.32.2","webpack-cli":"^3.3.2"},"peerDependencies":{"react":">= 0.14.0","react-dom":">= 0.14.0"},"releases":[{"from":"2021-06-05T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":0},{"from":"2021-04-06T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":0},{"from":"2021-01-06T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":0},{"from":"2020-07-05T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":0},{"from":"2019-07-06T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":3}],"hasTestScript":true,"readme":"<p align=\"center\">\n  <a href=\"http://glortho.github.io/react-keydown/example/index.html\" target=\"_blank\"><img src=\"https://raw.githubusercontent.com/glortho/react-keydown/master/example/public/react-keydown-logo.png\" /></a>\n</p>\n\n[![npm version](https://badge.fury.io/js/react-keydown.svg)](https://badge.fury.io/js/react-keydown)\n[![dependencies](https://david-dm.org/glortho/react-keydown.svg)](https://david-dm.org/glortho/react-keydown.svg)\n\nUse react-keydown as a higher-order component or decorator to pass keydown\nevents to the wrapped component, or call methods directly via designated keys. Good\nfor implementing keyboard navigation or other shortcuts.\n\nKey advantages:\n\n* **Declarative syntax**: Components say what keys they will respond to.\n* **Intuitive DX**: Decorate a class or method to bind it to specified keys.\n* **Scoping**: Designate the scope of your bindings by decorating/wrapping components. Only those components and their children will receive the designated key events, and then only when they appear to be active.\n* **Modifier keys**: Support for standard modifier key combinations.\n* **Lightweight**: 2kb compressed and gzipped, and only attaches a single keydown listener to document, no matter how many keybindings you specify.\n* **Cross-browser**: Works in all browsers except IE 8 and below.\n\nConsult the [API & Reference Documentation](https://github.com/jedverity/react-keydown/wiki/API-&-Reference) or continue reading below for quick start.\n\n**NOTE**: react-keydown doesn't use decorators itself, but to use the `@keydown` pattern in your application you will need a transpiler like Babel and a decorator transform plugin like this: https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy.\n\n## Install\n\n```\nnpm install --save react-keydown\n```\n\n## Use\n\nThe default build of react-keydown uses the CommonJS module system. For\nAMD or other support, use the [umd-specific\nbranch](https://github.com/jedverity/react-keydown/tree/master-umd) instead.\n\n### For methods: Decorate with keys that should trigger method\n\n```javascript\nimport React from 'react';\nimport keydown from 'react-keydown';\n\nclass MyComponent extends React.Component {\n\n  @keydown( 'enter' ) // or specify `which` code directly, in this case 13\n  submit( event ) {\n    // do something, or not, with the keydown event, maybe event.preventDefault()\n    MyApi.post( this.state );\n  }\n}\n```\n\nNote: Since the only context we have for keydown events is the component, decorated methods receive the event as their sole argument and the component instance as context.\n\n#### Specify multiple keys that should trigger the method\n\n```javascript\nimport keydown, { Keys } from 'react-keydown';\n\nconst { ENTER, TAB } = Keys; // optionally get key codes from Keys lib to check against later\n\n@keydown( ENTER, TAB, 'ctrl+z' ) // could also be an array\nautocomplete( event ) {\n  if ( event.which === ENTER ) { ... }\n  MyApi.get( this.state );\n}\n```\n\n### For classes: Pass keydown events into your component\n\n```javascript\n@keydown\nclass MyComponent extends React.Component {\n  componentWillReceiveProps( { keydown } ) {\n    if ( keydown.event ) {\n      // inspect the keydown event and decide what to do\n      console.log( keydown.event.which );\n    }\n  }\n\n  render() {\n    return (\n      <div>keydown events will only get passed down after this DOM node mounts or is clicked on</div>\n    );\n  }\n}\n\nexport default MyComponent;\n```\n\n#### Monitor only key codes `which` you care about:\n\n```javascript\nconst KEYS = [ 'shift+up', 'shift+down', 'enter', 'j', 'k', 'h', 'l' ];\n\n@keydown( KEYS )\nclass MyComponent extends React.Component {\n  ...\n}\n```\n\n#### Use the `@keydownScoped` shortcut\n\nWhen using the class decorator/higher-order component, decorate methods with `@keydownScoped` to identify the `keydown.event` prop as it comes in and bind certain values to methods:\n\n```javascript\nimport keydown, { keydownScoped } from 'react-keydown';\n\n@keydown( 'enter' ) // optional to specify a key here. if called with just @keydown, all key events will get passed down\nclass MyComponent extends React.Component {\n  render() {\n    return <MyOtherComponent {...this.props} />;\n  }\n}\n\nclass MyOtherComponent extends React.Component {\n  ...\n  @keydownScoped( 'enter' ) // inspects nextProps.keydown.event in componentWillReceiveProps behind the scenes\n  submit() {\n    // submit\n  }\n}\n```\n\nThis is a convenience method, but also lets you specify a larger view context where this key binding should be active. Sometimes the component where the binding is declared is too small on its own.\n\nThis can also be a good way to set up app-wide shortcuts. Wrap your root component with `@keydown` and then use  `@keydownScoped` or manually inspect the `keydown.event` props in the child components where those bindings are relevant.\n\n### Handling all keys\n\nIn some cases you might want to handle all keys on your own. For that, you can specify the following:\n\n```\nimport keydown, { ALL_KEYS } from 'react-keydown'\n\n@keydown( ALL_KEYS )\nhandleKeys(ev) {\n  // handle keys here\n}\n```\n\n### Handling all printable keys\n\nAnother useful feature is handling all printable characters.\n\n```\nimport keydown, { ALL_PRINTABLE_KEYS } from 'react-keydown'\n\n@keydown( ALL_PRINTABLE_KEYS )\nbeginEdit(ev) {\n  // Start editing\n}\n```\n\n### Caveat: Input, textarea, and select elements\n\nBy default, bindings will not work when these fields have focus, in order not to interfere with user input and shortcuts related to these controls. You can override this in two ways:\n\n1. Give your shortcut a `ctrl` modifier.\n\n2. Since v1.6.0, there is experimental support for adding an `onKeyDown` binding to the element, specifying a method decorated with `@keydown` as the handler. For example:\n\n```javascript\nclass MyClass extends React.Component {\n\n  @keydown( 'a' )\n  myMethod( event ) {\n    console.log( event ); // should log only on 'a' keystroke, whether input is focused or not\n  }\n\n  render() {\n    return <input onKeyDown={ this.myMethod } />;\n  }\n}\n```\n\nIn the second case you could make multiple inputs work this way by spreading `{ onKeyDown: this.myMethod }` into them, or by making this a reusable input component that takes the method as a prop (or composes multiple methods passed in as props).\n\n## Demo\n\nGo to the [live\ndemo](http://glortho.github.io/react-keydown/example/index.html) or:\n\n```\n$ open example/public/index.html\n```\n\nNote that this is very much a work in progress!\n\n## Test\n\n```\n$ npm test\n```\n\n\n## Notes, disclaimers, and tips\n\n* The decorator pattern `@keydown` currently requires transpilation by\n  the [Babel legacy decorators transform](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy) or the equivalent.\n* Components that have a [React 16 fragment](https://reactjs.org/docs/fragments.html) at their root may not be activated properly when clicked. See [this issue](https://github.com/glortho/react-keydown/issues/80) for more detail.\n* The default build outputs CommonJS modules and native ES modules. For AMD or other support, use the\n  [umd-specific\n  branch](https://github.com/glortho/react-keydown/tree/master-umd) instead.\n* This lib has only been tested using ES2015 classes and class methods. Some method decoration\n  functionality may work on other types of object methods.\n* Duplicate keybindings for components that are mounted at the same time will\n  not both fire. The more recently mounted component, or the one that has been\n  focused or clicked most recently, will win. If you do want both to fire,\n  decorate a common ancestor class with `@keydown( ... )` and then use\n  `@keydownScoped( ... )` in the child components (or just inspect\n  `nextProps.keydown.event` in both).\n* Since the only context we have for keydown events is the component, decorated\n  methods receive the event as their sole argument and the component instance as\n  context.\n* The method decorators wrap React lifecycle methods in order to work\n  as seamlessly and efficiently as possible. The class decorator does not do\n  this, functioning instead as a higher-order component.\n\n## Questions\n\nWhy is this so limited, only working on `keydown` and such?\n\n> I published this out of my particular need on a project. If anyone else ever\narrives here and needs something else let me know via issues or a pull request."},"npm":{"downloads":[{"from":"2021-07-04T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":180},{"from":"2021-06-28T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":8410},{"from":"2021-06-05T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":32690},{"from":"2021-04-06T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":102623},{"from":"2021-01-06T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":203846},{"from":"2020-07-05T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":426267}],"dependentsCount":26,"starsCount":2},"github":{"homepage":"http://glortho.github.io/react-keydown/example/index.html","starsCount":497,"forksCount":40,"subscribersCount":14,"issues":{"count":102,"openCount":11,"distribution":{"3600":12,"10800":5,"32400":7,"97200":7,"291600":14,"874800":20,"2624400":13,"7873200":7,"23619600":4,"70858800":1,"212576400":12},"isDisabled":false},"contributors":[{"username":"AntonovAv","commitsCount":1},{"username":"glortho","commitsCount":13},{"username":"jeffijoe","commitsCount":1},{"username":"dariuszpaluch","commitsCount":2},{"username":"jacksonhoose","commitsCount":1},{"username":"salmanm","commitsCount":16},{"username":"gauravtiwari","commitsCount":1},{"username":"chelm","commitsCount":1},{"username":"shicholas","commitsCount":1}],"commits":[{"from":"2021-06-28T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":0},{"from":"2021-06-05T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":0},{"from":"2021-04-06T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":4},{"from":"2021-01-06T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":6},{"from":"2020-07-05T00:00:00.000Z","to":"2021-07-05T00:00:00.000Z","count":9}]},"source":{"files":{"readmeSize":8315,"testsSize":6580,"hasNpmIgnore":true,"hasChangelog":true},"badges":[{"urls":{"original":"https://david-dm.org/glortho/react-keydown.svg","service":"https://david-dm.org/glortho/react-keydown.svg","shields":"https://img.shields.io/david/glortho/react-keydown.svg","content":"https://img.shields.io/david/glortho/react-keydown.json"},"info":{"service":"david","type":"dependencies","modifiers":{"statusType":"normal"}}}],"linters":["eslint"]}},"evaluation":{"quality":{"carefulness":0.9999999999999999,"tests":0.6,"health":1,"branding":0.15},"popularity":{"communityInterest":562,"downloadsCount":34207.666666666664,"downloadsAcceleration":-28.391286149162852,"dependentsCount":26},"maintenance":{"releasesFrequency":0.9,"commitsFrequency":0.9,"openIssues":1,"issuesDistribution":0.9}},"score":{"final":0.6967525992489196,"detail":{"quality":0.9303561122886091,"popularity":0.19337908458630826,"maintenance":0.999894531306083}}}