{"analyzedAt":"2021-08-12T02:09:54.697Z","collected":{"metadata":{"name":"axios","scope":"unscoped","version":"0.21.1","description":"Promise based HTTP client for the browser and node.js","keywords":["xhr","http","ajax","promise","node"],"date":"2020-12-22T04:20:06.101Z","author":{"name":"Matt Zabriskie"},"publisher":{"username":"emilyemorehouse","email":"emilyemorehouse@gmail.com"},"maintainers":[{"username":"emilyemorehouse","email":"emilyemorehouse@gmail.com"},{"username":"mzabriskie","email":"mzabriskie@gmail.com"},{"username":"nickuraltsev","email":"nick.uraltsev@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/axios/axios.git"},"links":{"npm":"https://www.npmjs.com/package/axios","homepage":"https://github.com/axios/axios","repository":"https://github.com/axios/axios","bugs":"https://github.com/axios/axios/issues"},"license":"MIT","dependencies":{"follow-redirects":"^1.10.0"},"devDependencies":{"bundlesize":"^0.17.0","coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.0.2","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^20.1.0","grunt-karma":"^2.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^1.0.18","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^1.3.0","karma-chrome-launcher":"^2.2.0","karma-coverage":"^1.1.1","karma-firefox-launcher":"^1.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-opera-launcher":"^1.0.0","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^1.2.0","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^1.7.0","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^5.2.0","sinon":"^4.5.0","typescript":"^2.8.1","url-search-params":"^0.10.0","webpack":"^1.13.1","webpack-dev-server":"^1.14.1"},"releases":[{"from":"2021-07-13T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":0},{"from":"2021-05-14T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":0},{"from":"2021-02-13T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":0},{"from":"2020-08-12T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":3},{"from":"2019-08-13T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":6}],"hasTestScript":true,"readme":"# axios\n\n[![npm version](https://img.shields.io/npm/v/axios.svg?style=flat-square)](https://www.npmjs.org/package/axios)\n[![CDNJS](https://img.shields.io/cdnjs/v/axios.svg?style=flat-square)](https://cdnjs.com/libraries/axios)\n[![build status](https://img.shields.io/travis/axios/axios/master.svg?style=flat-square)](https://travis-ci.org/axios/axios)\n[![code coverage](https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square)](https://coveralls.io/r/mzabriskie/axios)\n[![install size](https://packagephobia.now.sh/badge?p=axios)](https://packagephobia.now.sh/result?p=axios)\n[![npm downloads](https://img.shields.io/npm/dm/axios.svg?style=flat-square)](http://npm-stat.com/charts.html?package=axios)\n[![gitter chat](https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square)](https://gitter.im/mzabriskie/axios)\n[![code helpers](https://www.codetriage.com/axios/axios/badges/users.svg)](https://www.codetriage.com/axios/axios)\n\nPromise based HTTP client for the browser and node.js\n## Table of Contents\n\n  - [Features](#features)\n  - [Browser Support](#browser-support)\n  - [Installing](#installing)\n  - [Example](#example)\n  - [Axios API](#axios-api)\n  - [Request method aliases](#request-method-aliases)\n  - [Concurrency (Deprecated)](#concurrency-deprecated)\n  - [Creating an instance](#creating-an-instance)\n  - [Instance methods](#instance-methods)\n  - [Request Config](#request-config)\n  - [Response Schema](#response-schema)\n  - [Config Defaults](#config-defaults)\n    - [Global axios defaults](#global-axios-defaults)\n    - [Custom instance defaults](#custom-instance-defaults)\n    - [Config order of precedence](#config-order-of-precedence)\n  - [Interceptors](#interceptors)\n  - [Handling Errors](#handling-errors)\n  - [Cancellation](#cancellation)\n  - [Using application/x-www-form-urlencoded format](#using-applicationx-www-form-urlencoded-format)\n    - [Browser](#browser)\n    - [Node.js](#nodejs)\n      - [Query string](#query-string)\n      - [Form data](#form-data)\n  - [Semver](#semver)\n  - [Promises](#promises)\n  - [TypeScript](#typescript)\n  - [Resources](#resources)\n  - [Credits](#credits)\n  - [License](#license)\n\n## Features\n\n- Make [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser\n- Make [http](http://nodejs.org/api/http.html) requests from node.js\n- Supports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- Intercept request and response\n- Transform request and response data\n- Cancel requests\n- Automatic transforms for JSON data\n- Client side support for protecting against [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n## Browser Support\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n--- | --- | --- | --- | --- | --- |\nLatest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | 11 ✔ |\n\n[![Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)](https://saucelabs.com/u/axios)\n\n## Installing\n\nUsing npm:\n\n```bash\n$ npm install axios\n```\n\nUsing bower:\n\n```bash\n$ bower install axios\n```\n\nUsing yarn:\n\n```bash\n$ yarn add axios\n```\n\nUsing jsDelivr CDN:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n```\n\nUsing unpkg CDN:\n\n```html\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n## Example\n\n### note: CommonJS usage\nIn order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with `require()` use the following approach:\n\n```js\nconst axios = require('axios').default;\n\n// axios.<method> will now provide autocomplete and parameter typings\n```\n\nPerforming a `GET` request\n\n```js\nconst axios = require('axios');\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n> **NOTE:** `async/await` is part of ECMAScript 2017 and is not supported in Internet\n> Explorer and older browsers, so use with caution.\n\nPerforming a `POST` request\n\n```js\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming multiple concurrent requests\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n\n## axios API\n\nRequests can be made by passing the relevant config to `axios`.\n\n##### axios(config)\n\n```js\n// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n```js\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'http://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience aliases have been provided for all supported request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\n\nHelper functions for dealing with concurrent requests.\n\naxios.all(iterable)\naxios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n##### axios#getUri([config])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function (params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lower cased and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n\n```js\n// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### Config order of precedence\n\nConfig will be merged with an order of precedence. The order is library defaults found in [lib/defaults.js](https://github.com/axios/axios/blob/master/lib/defaults.js#L28), then `defaults` property of the instance, and finally `config` argument for the request. The latter will take precedence over the former. Here's an example.\n\n```js\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## Interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```js\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nIf you need to remove an interceptor later you can.\n\n```js\nconst myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\nYou can add interceptors to a custom instance of axios.\n\n```js\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n## Handling Errors\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nUsing the `validateStatus` config option, you can define HTTP code(s) that should throw an error.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\nUsing `toJSON` you get an object with more information about the HTTP error.\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });\n```\n\n## Cancellation\n\nYou can cancel a request using a *cancel token*.\n\n> The axios cancel token API is based on the withdrawn [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> Note: you can cancel several requests with the same cancel token.\n\n## Using application/x-www-form-urlencoded format\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the `application/x-www-form-urlencoded` format instead, you can use one of the following options.\n\n### Browser\n\nIn a browser, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API as follows:\n\n```js\nconst params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\n```\n\n> Note that `URLSearchParams` is not supported by all browsers (see [caniuse.com](http://www.caniuse.com/#feat=urlsearchparams)), but there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\nOr in another way (ES6),\n\n```js\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n### Node.js\n\n#### Query string\n\nIn node.js, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nconst querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nor ['URLSearchParams'](https://nodejs.org/api/url.html#url_class_urlsearchparams) from ['url module'](https://nodejs.org/api/url.html) as follows:\n\n```js\nconst url = require('url');\nconst params = new url.URLSearchParams({ foo: 'bar' });\naxios.post('http://something.com/', params.toString());\n```\n\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\n\n###### NOTE\nThe `qs` library is preferable if you need to stringify nested objects, as the `querystring` method has known issues with that use case (https://github.com/nodejs/node-v0.x-archive/issues/1665).\n\n#### Form data\n\nIn node.js, you can use the [`form-data`](https://github.com/form-data/form-data) library as follows:\n\n```js\nconst FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form, { headers: form.getHeaders() })\n```\n\nAlternatively, use an interceptor:\n\n```js\naxios.interceptors.request.use(config => {\n  if (config.data instanceof FormData) {\n    Object.assign(config.headers, config.data.getHeaders());\n  }\n  return config;\n});\n```\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](http://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\naxios includes [TypeScript](http://typescriptlang.org) definitions.\n```typescript\nimport axios from 'axios';\naxios.get('/user?ID=12345');\n```\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/master/CHANGELOG.md)\n* [Upgrade Guide](https://github.com/axios/axios/blob/master/UPGRADE_GUIDE.md)\n* [Ecosystem](https://github.com/axios/axios/blob/master/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/master/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/master/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [Angular](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of Angular.\n\n## License\n\n[MIT](LICENSE)"},"npm":{"downloads":[{"from":"2021-08-11T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":0},{"from":"2021-08-05T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":14099784},{"from":"2021-07-13T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":72501476},{"from":"2021-05-14T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":218069495},{"from":"2021-02-13T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":452869747},{"from":"2020-08-12T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":816398377}],"dependentsCount":43824,"starsCount":569},"github":{"homepage":"https://axios-http.com","starsCount":86744,"forksCount":8524,"subscribersCount":1226,"issues":{"count":3931,"openCount":276,"distribution":{"3600":671,"10800":110,"32400":141,"97200":262,"291600":314,"874800":359,"2624400":354,"7873200":413,"23619600":489,"70858800":660,"212576400":158},"isDisabled":false},"contributors":[{"username":"penance316","commitsCount":2},{"username":"reggi","commitsCount":2},{"username":"sazzy4o","commitsCount":1},{"username":"elinagorshkova","commitsCount":1},{"username":"rubennorte","commitsCount":16},{"username":"jimmy-liao-gogoro","commitsCount":1},{"username":"unguul","commitsCount":1},{"username":"huangzuizui","commitsCount":1},{"username":"codemaster138","commitsCount":1},{"username":"gualopezb","commitsCount":1},{"username":"JasonHK","commitsCount":1},{"username":"remcohaszing","commitsCount":3},{"username":"jcready","commitsCount":2},{"username":"1pm","commitsCount":1},{"username":"rbown","commitsCount":1},{"username":"ohtaeg","commitsCount":1},{"username":"emilyemorehouse","commitsCount":20},{"username":"idan","commitsCount":6},{"username":"RikkiGibson","commitsCount":10},{"username":"ruchigoyal2005","commitsCount":2},{"username":"davidfou","commitsCount":2},{"username":"galkin","commitsCount":1},{"username":"svenefftinge","commitsCount":1},{"username":"iwata","commitsCount":1},{"username":"anthwinter","commitsCount":2},{"username":"nickuraltsev","commitsCount":105},{"username":"SashaKoro","commitsCount":1},{"username":"MikeBishop","commitsCount":1},{"username":"chinesedfan","commitsCount":13},{"username":"textbook","commitsCount":1},{"username":"nnarhinen","commitsCount":2},{"username":"cprayer","commitsCount":2},{"username":"a631807682","commitsCount":1},{"username":"rogeriochaves","commitsCount":2},{"username":"ianwijma","commitsCount":1},{"username":"bttmly","commitsCount":2},{"username":"Jarlotee","commitsCount":2},{"username":"Khaledgarbaya","commitsCount":2},{"username":"avindra","commitsCount":2},{"username":"torarnek","commitsCount":2},{"username":"precto1285","commitsCount":1},{"username":"nycdavid","commitsCount":1},{"username":"mindriven","commitsCount":1},{"username":"ctimmerm","commitsCount":3},{"username":"jtangelder","commitsCount":4},{"username":"timemachine3030","commitsCount":6},{"username":"Gerhut","commitsCount":4},{"username":"bomsy","commitsCount":3},{"username":"Punit-wingify","commitsCount":2},{"username":"staticinstance","commitsCount":3},{"username":"lachenmayer","commitsCount":2},{"username":"timgates42","commitsCount":1},{"username":"paveg","commitsCount":1},{"username":"hippo2cat","commitsCount":2},{"username":"Alanscut","commitsCount":4},{"username":"mzabriskie","commitsCount":220},{"username":"Deamon87","commitsCount":2},{"username":"cygnusss","commitsCount":1},{"username":"Allanbcruz","commitsCount":1},{"username":"arpit2438735","commitsCount":2},{"username":"JustinBeckwith","commitsCount":14},{"username":"piiih","commitsCount":1},{"username":"38elements","commitsCount":3},{"username":"yasuf","commitsCount":7},{"username":"jennynju","commitsCount":1},{"username":"kkirsche","commitsCount":1},{"username":"dericgw","commitsCount":2},{"username":"jasonsaayman","commitsCount":14},{"username":"ajcrites","commitsCount":2},{"username":"wafuwafu13","commitsCount":1},{"username":"delirius325","commitsCount":2},{"username":"zgayjjf","commitsCount":1},{"username":"tomaash","commitsCount":2},{"username":"aliclark","commitsCount":1},{"username":"nisarhassan12","commitsCount":1},{"username":"rockcs1992","commitsCount":1},{"username":"anubhavsrivastava","commitsCount":1},{"username":"codeclown","commitsCount":12},{"username":"LukasDrgon","commitsCount":1},{"username":"marcinx","commitsCount":1},{"username":"johachi","commitsCount":1},{"username":"hexaez","commitsCount":1},{"username":"grumblerchester","commitsCount":2},{"username":"bennycode","commitsCount":1},{"username":"DigitalBrainJS","commitsCount":2},{"username":"anglinb","commitsCount":1},{"username":"felipewmartins","commitsCount":4},{"username":"Fonger","commitsCount":1},{"username":"ehrhart","commitsCount":1},{"username":"jonathanfoster","commitsCount":1},{"username":"fgnass","commitsCount":2},{"username":"sufuf3","commitsCount":1},{"username":"frustak","commitsCount":1},{"username":"michalzaq12","commitsCount":1},{"username":"simoneb","commitsCount":1},{"username":"bimbiltu","commitsCount":1},{"username":"delventhalz","commitsCount":1},{"username":"ascott18","commitsCount":2},{"username":"josh-egan","commitsCount":2},{"username":"caikan","commitsCount":1}],"commits":[{"from":"2021-08-05T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":0},{"from":"2021-07-13T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":0},{"from":"2021-05-14T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":3},{"from":"2021-02-13T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":24},{"from":"2020-08-12T00:00:00.000Z","to":"2021-08-12T00:00:00.000Z","count":48}],"statuses":[{"context":"continuous-integration/travis-ci/pr","state":"error"},{"context":"continuous-integration/travis-ci/push","state":"success"}]},"source":{"files":{"readmeSize":25595,"testsSize":146291,"hasNpmIgnore":true,"hasChangelog":true},"badges":[{"urls":{"original":"https://img.shields.io/npm/v/axios.svg?style=flat-square","shields":"https://img.shields.io/npm/v/axios.svg","content":"https://img.shields.io/npm/v/axios.json"},"info":{"service":"npm","type":"version","modifiers":{"type":"v"}}},{"urls":{"original":"https://img.shields.io/travis/axios/axios/master.svg?style=flat-square","service":"https://api.travis-ci.org/axios/axios.svg?branch=master","shields":"https://img.shields.io/travis/axios/axios/master.svg","content":"https://img.shields.io/travis/axios/axios/master.json"},"info":{"service":"travis","type":"build","modifiers":{"branch":"master"}}},{"urls":{"original":"https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square","service":"https://coveralls.io/repos/mzabriskie/axios/badge.svg","shields":"https://img.shields.io/coveralls/mzabriskie/axios.svg","content":"https://img.shields.io/coveralls/mzabriskie/axios.json"},"info":{"service":"coveralls","type":"coverage"}},{"urls":{"original":"https://img.shields.io/npm/dm/axios.svg?style=flat-square","shields":"https://img.shields.io/npm/dm/axios.svg","content":"https://img.shields.io/npm/dm/axios.json"},"info":{"service":"npm","type":"downloads","modifiers":{"type":"dm"}}},{"urls":{"original":"https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square","service":"https://badges.gitter.im/mzabriskie/axios.svg","shields":"https://img.shields.io/gitter/room/mzabriskie/axios.svg","content":"https://img.shields.io/gitter/room/mzabriskie/axios.json"},"info":{"service":"gitter","type":"misc"}}],"linters":["eslint"],"coverage":0.94}},"evaluation":{"quality":{"carefulness":0.49999999999999994,"tests":0.866,"health":1,"branding":0.6},"popularity":{"communityInterest":97163,"downloadsCount":72689831.66666667,"downloadsAcceleration":114810.78529299842,"dependentsCount":43824},"maintenance":{"releasesFrequency":0.22191780821917811,"commitsFrequency":0.7794520547945205,"openIssues":1,"issuesDistribution":0}},"score":{"final":0.795472802990692,"detail":{"quality":0.8995730038310638,"popularity":0.9560420638547701,"maintenance":0.5456747985491525}}}