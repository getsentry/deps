{"analyzedAt":"2021-07-08T07:29:37.632Z","collected":{"metadata":{"name":"gettext-parser","scope":"unscoped","version":"4.0.4","description":"Parse and compile gettext po and mo files to/from json, nothing more, nothing less","keywords":["i18n","l10n","gettext","mo","po"],"date":"2020-07-17T09:51:17.073Z","author":{"name":"Andris Reinman"},"publisher":{"username":"smhg","email":"sam.hauglustaine@gmail.com"},"maintainers":[{"username":"andris","email":"andris@kreata.ee"},{"username":"smhg","email":"sam@strictlyphp.com"}],"contributors":[{"name":"Sam Hauglustaine"}],"repository":{"type":"git","url":"git+ssh://git@github.com/smhg/gettext-parser.git"},"links":{"npm":"https://www.npmjs.com/package/gettext-parser","homepage":"http://github.com/smhg/gettext-parser","repository":"https://github.com/smhg/gettext-parser","bugs":"https://github.com/smhg/gettext-parser/issues"},"license":"MIT","dependencies":{"content-type":"^1.0.4","encoding":"^0.1.13","readable-stream":"^3.6.0","safe-buffer":"^5.2.1"},"devDependencies":{"chai":"^4.2.0","eslint":"^7.4.0","eslint-config-standard":"^14.1.1","eslint-plugin-import":"^2.22.0","eslint-plugin-node":"^11.1.0","eslint-plugin-promise":"^4.2.1","eslint-plugin-standard":"^4.0.0","mocha":"^8.0.1"},"releases":[{"from":"2021-06-08T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":0},{"from":"2021-04-09T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":0},{"from":"2021-01-09T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":0},{"from":"2020-07-08T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":2},{"from":"2019-07-09T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":5}],"hasTestScript":true,"readme":"gettext-parser [![Build Status](https://secure.travis-ci.org/smhg/gettext-parser.png)](http://travis-ci.org/smhg/gettext-parser)\n==============\n\nParse and compile gettext *po* and *mo* files with node.js, nothing more, nothing less.\n\n> *Please note:* starting with version 3 only latest LTS and latest stable node versions are supported. **Use version 2 with older node versions.**\n\n## Usage\n\nInclude the library:\n\n    var gettextParser = require(\"gettext-parser\");\n\n\n### Parse PO files\n\nParse a PO file with\n\n    gettextParser.po.parse(input[, defaultCharset]) → Object\n\nWhere\n\n  * **input** is a *po* file as a Buffer or an unicode string. Charset is converted to unicode from other encodings only if the input is a Buffer, otherwise the charset information is discarded\n  * **defaultCharset** is the charset to use if charset is not defined or is the default `\"CHARSET\"` (applies only if *input* is a Buffer)\n\nMethod returns gettext-parser specific translation object (see below)\n\n**Example**\n\n```javascript\nvar input = require('fs').readFileSync('en.po');\nvar po = gettextParser.po.parse(input);\nconsole.log(po.translations['']); // output translations for the default context\n```\n\n### Parse PO as a Stream\n\nPO files can also be parsed from a stream source. After all input is processed the parser emits a single 'data' event which contains the parsed translation object.\n\n    gettextParser.po.createParseStream([defaultCharset][, streamOptions]) → Transform Stream\n\nWhere\n\n  * **defaultCharset** is the charset to use if charset is not defined or is the default `\"CHARSET\"`\n  * **streamOptions** are the standard stream options\n\n**Example**\n\n```javascript\nvar input = require('fs').createReadStream('en.po');\nvar po = gettextParser.po.createParseStream();\ninput.pipe(po);\npo.on('data', function(data){\n    console.log(data.translations['']); // output translations for the default context\n});\n```\n\n### Compile PO from a translation object\n\nIf you have a translation object you can convert this to a valid PO file with\n\n    gettextParser.po.compile(data[, options]) → Buffer\n\nWhere\n\n  * **data** is a translation object either got from parsing a PO/MO file or composed by other means\n  * **options** is a configuration object with possible values\n    * **foldLength** is the length at which to fold message strings into newlines (default: 76). Set to 0 or false to disable folding.\n    * **sort** (boolean|Function) - (default `false`) if `true`, entries will be sorted by msgid in the resulting .po(.pot) file.\n      If a comparator function is provided, that function will be used to sort entries in the output. The function is called with two arguments, each of which is a single message entry with the structure described below. The function should follow the standard rules for functions passed to `Array.sort()`: return `0` if the entries are interchangeable in sort order; return a number less than 0 if the first entry should come before the second one; and return a number greater than 0 if the second entry should come before the first one.\n\n**Example**\n\n```javascript\nvar data = {\n    ...\n};\nvar output = gettextParser.po.compile(data);\nrequire('fs').writeFileSync(output);\n```\n\n### Parse MO files\n\nParse a MO file with\n\n    gettextParser.mo.parse(input[, defaultCharset]) → Object\n\nWhere\n\n  * **input** is a *mo* file as a Buffer\n  * **defaultCharset** is the charset to use if charset is not defined or is the default `\"CHARSET\"`\n\nMethod returns gettext-parser specific translation object (see below)\n\n**Example**\n\n```javascript\nvar input = require('fs').readFileSync('en.mo');\nvar mo = gettextParser.mo.parse(input);\nconsole.log(mo.translations['']); // output translations for the default context\n```\n\n### Compile MO from a translation object\n\nIf you have a translation object you can convert this to a valid MO file with\n\n    gettextParser.mo.compile(data) → Buffer\n\nWhere\n\n  * **data** is a translation object either got from parsing a PO/MO file or composed by other means\n\n**Example**\n\n```javascript\nvar data = {\n    ...\n};\nvar output = gettextParser.mo.compile(data);\nrequire('fs').writeFileSync(output);\n```\n\n### Notes\n\n#### Overriding charset\n\nIf you are compiling a previously parsed translation object, you can override the output charset with the `charset` property (applies both for compiling *mo* and *po* files).\n\n```javascript\nvar obj = gettextParser.po.parse(inputBuf);\nobj.charset = \"windows-1257\";\noutputBuf = gettextParser.po.compile(obj);\n```\n\nHeaders for the output are modified to match the updated charset.\n\n#### ICONV support\n\nBy default *gettext-parser* uses pure JS [iconv-lite](https://github.com/ashtuchkin/iconv-lite) for encoding and decoding non UTF-8 charsets. If you need to support more complex encodings that are not supported by *iconv-lite*, you need to add [iconv](https://github.com/bnoordhuis/node-iconv) as an additional dependency for your project (*gettext-parser* will detect if it is available and tries to use it instead of *iconv-lite*).\n\n## Data structure of parsed mo/po files\n\n### Character set\n\nParsed data is always in unicode but the original charset of the file can\nbe found from the `charset` property. This value is also used when compiling translations\nto a *mo* or *po* file.\n\n### Headers\n\nHeaders can be found from the `headers` object, all keys are lowercase and the value for a key is a string. This value will also be used when compiling.\n\n### Translations\n\nTranslations can be found from the `translations` object which in turn holds context objects for `msgctxt`. Default context can be found from `translations[\"\"]`.\n\nContext objects include all the translations, where `msgid` value is the key. The value is an object with the following possible properties:\n\n  * **msgctxt** context for this translation, if not present the default context applies\n  * **msgid** string to be translated\n  * **msgid_plural** the plural form of the original string (might not be present)\n  * **msgstr** an array of translations\n  * **comments** an object with the following properties: `translator`, `reference`, `extracted`, `flag`, `previous`.\n\nExample\n\n```json\n{\n  \"charset\": \"iso-8859-1\",\n\n  \"headers\": {\n    \"content-type\": \"text/plain; charset=iso-8859-1\",\n    \"plural-forms\": \"nplurals=2; plural=(n!=1);\"\n  },\n\n  \"translations\": {\n    \"\": {\n      \"\": {\n        \"msgid\": \"\",\n        \"msgstr\": [\"Content-Type: text/plain; charset=iso-8859-1\\n...\"]\n      }\n    },\n    \"another context\": {\n      \"%s example\": {\n        \"msgctxt\": \"another context\",\n        \"msgid\": \"%s example\",\n        \"msgid_plural\": \"%s examples\",\n        \"msgstr\": [\"% näide\", \"%s näidet\"],\n        \"comments\": {\n          \"translator\": \"This is regular comment\",\n          \"reference\": \"/path/to/file:123\"\n        }\n      }\n    }\n  }\n}\n```\n\nNotice that the structure has both a `headers` object and a `\"\"` translation with the header string. When compiling the structure to a *mo* or a *po* file, the `headers` object is used to define the header. Header string in the `\"\"` translation is just for reference (includes the original unmodified data) but will not be used when compiling. So if you need to add or alter header values, use only the `headers` object.\n\nIf you need to convert *gettext-parser* formatted translation object to something else, eg. for *jed*, check out [po2json](https://github.com/mikeedwards/po2json).\n\n## License\n\n**MIT**"},"npm":{"downloads":[{"from":"2021-07-07T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":43889},{"from":"2021-07-01T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":212949},{"from":"2021-06-08T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":992021},{"from":"2021-04-09T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":2860987},{"from":"2021-01-09T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":5848942},{"from":"2020-07-08T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":11546308}],"dependentsCount":184,"starsCount":5},"github":{"starsCount":119,"forksCount":32,"subscribersCount":6,"issues":{"count":60,"openCount":6,"distribution":{"3600":6,"10800":8,"32400":4,"97200":3,"291600":5,"874800":5,"2624400":5,"7873200":7,"23619600":6,"70858800":6,"212576400":5},"isDisabled":false},"contributors":[{"username":"ArnaudRinquin","commitsCount":1},{"username":"smhg","commitsCount":69},{"username":"probertson","commitsCount":2},{"username":"andris9","commitsCount":30},{"username":"EdwardBetts","commitsCount":1},{"username":"ragulka","commitsCount":1},{"username":"maufl","commitsCount":1},{"username":"BYK","commitsCount":1},{"username":"AlexMost","commitsCount":7},{"username":"arthuralee","commitsCount":1},{"username":"TimKam","commitsCount":1},{"username":"RignonNoel","commitsCount":1},{"username":"jelly","commitsCount":1}],"commits":[{"from":"2021-07-01T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":0},{"from":"2021-06-08T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":0},{"from":"2021-04-09T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":4},{"from":"2021-01-09T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":6},{"from":"2020-07-08T00:00:00.000Z","to":"2021-07-08T00:00:00.000Z","count":11}],"statuses":[{"context":"continuous-integration/travis-ci/push","state":"success"}]},"source":{"files":{"readmeSize":7402,"testsSize":43573,"hasNpmIgnore":true,"hasChangelog":true},"badges":[{"urls":{"original":"https://secure.travis-ci.org/smhg/gettext-parser.png","service":"https://api.travis-ci.org/smhg/gettext-parser.svg","shields":"https://img.shields.io/travis/smhg/gettext-parser.svg","content":"https://img.shields.io/travis/smhg/gettext-parser.json"},"info":{"service":"travis","type":"build"}}],"linters":["eslint"]}},"evaluation":{"quality":{"carefulness":0.9999999999999999,"tests":0.85,"health":1,"branding":0.15},"popularity":{"communityInterest":175,"downloadsCount":953662.3333333334,"downloadsAcceleration":573.5119482496193,"dependentsCount":184},"maintenance":{"releasesFrequency":0.9,"commitsFrequency":0.9,"openIssues":1,"issuesDistribution":0.9}},"score":{"final":0.7467589545509384,"detail":{"quality":0.9654687553180948,"popularity":0.30615783428108856,"maintenance":0.999894531306083}}}