{"analyzedAt":"2021-07-14T15:45:38.342Z","collected":{"metadata":{"name":"consola","scope":"unscoped","version":"2.15.3","description":"Elegant Console Logger for Node.js and Browser","keywords":["console","logger","reporter","elegant","cli","universal","unified","winston"],"date":"2021-02-07T23:05:38.702Z","publisher":{"username":"pi0","email":"pyapar@gmail.com"},"maintainers":[{"username":"atinux","email":"atinux@gmail.com"},{"username":"pi0","email":"pyapar@gmail.com"},{"username":"clarkdo","email":"clark.duxin@gmail.com"}],"contributors":[{"name":"Pooya Parsa","email":"pooya@pi0.ir"},{"name":"Clark Du","url":"@clarkdo"},{"name":"@pimlie","email":"pimlie@hotmail.com"},{"name":"Sébastien Chopin","email":"@Atinux"}],"repository":{"type":"git","url":"git+https://github.com/nuxt/consola.git"},"links":{"npm":"https://www.npmjs.com/package/consola","homepage":"https://github.com/nuxt/consola#readme","repository":"https://github.com/nuxt/consola","bugs":"https://github.com/nuxt/consola/issues"},"license":"MIT","devDependencies":{"@babel/core":"^7.9.6","@babel/preset-env":"^7.9.6","babel-eslint":"^10.1.0","babel-jest":"^26.0.1","benchmark":"^2.1.4","bili":"^4.10.0","chalk":"^4.0.0","dayjs":"^1.8.26","eslint":"^7.1.0","eslint-config-standard":"^14.1.1","eslint-plugin-import":"^2.20.2","eslint-plugin-jest":"^23.9.0","eslint-plugin-node":"^11.1.0","eslint-plugin-promise":"^4.2.1","eslint-plugin-standard":"^4.0.1","esm":"^3.2.25","figures":"^3.2.0","jest":"^26.0.1","lodash":"^4.17.15","sentencer":"^0.2.1","serve":"^11.3.0","standard-version":"^8.0.0","std-env":"^2.2.1","string-width":"^4.2.0","ts-node":"^8.10.1","typescript":"^3.8.3","winston":"^3.2.1"},"releases":[{"from":"2021-06-14T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":0},{"from":"2021-04-15T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":0},{"from":"2021-01-15T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":4},{"from":"2020-07-14T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":5},{"from":"2019-07-15T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":16}],"hasTestScript":true,"hasSelectiveFiles":true,"readme":"![consola](.github/banner.svg)\n\n# Consola\n\n> Elegant Console Logger for Node.js and Browser\n\n[![Standard JS][standard-js-src]][standard-js-href]\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![package phobia][package-phobia-src]][package-phobia-href]\n[![bundle phobia][bundle-phobia-src]][bundle-phobia-href]\n\n## Why Consola?\n\n👌&nbsp; Easy to use<br>\n💅&nbsp; Fancy output with fallback for minimal environments<br>\n🔌&nbsp; Pluggable reporters<br>\n💻&nbsp; Consistent command line interface (CLI) experience<br>\n🏷&nbsp; Tag support<br>\n🚏&nbsp; Redirect `console` and `stdout/stderr` to consola and easily restore redirect.<br>\n🌐&nbsp; Browser support<br>\n⏯&nbsp; Pause/Resume support<br>\n👻&nbsp; Mocking support<br>\n👮‍♂️&nbsp; Spam prevention by throttling logs<br>\n\n## Installation\n\nUsing yarn:\n\n```bash\nyarn add consola\n```\n\nUsing npm:\n\n```bash\nnpm i consola\n```\n\n## Getting Started\n\n```js\nconst consola = require('consola')\n\n// See types section for all available types\n\nconsola.success('Built!')\nconsola.info('Reporter: Some info')\nconsola.error(new Error('Foo'))\n```\n\nWill display in the terminal:\n\n![Screenshot 2020-01-28 at 14 15 15](https://user-images.githubusercontent.com/904724/73267133-af6b2f00-41d8-11ea-9f16-4a8243d19c43.png)\n\n**NOTE:** Alternatively, you can import consola from source. But don't forget to whitelist it for transpilation:\n\n```js\nimport consola from 'consola/src/node'\nimport consola from 'consola/src/browser'\n```\n\n## Methods\n\n#### `<type>(logObject)` `<type>(args...)`\n\nLog to all reporters.\n\nExample: `consola.info('Message')`\n\nA list of available types can be found [here](./src/types.js).\n\n#### `addReporter(reporter)`\n\n- Aliases: `add`\n\nRegister a custom reporter instance.\n\n#### `removeReporter(reporter?)`\n\n- Aliases: `remove`, `clear`\n\nRemove a registered reporter.\n\nIf no arguments are passed all reporters will be removed.\n\n#### `setReporters(reporter|reporter[])`\n\nReplace all reporters.\n\n#### `create(options)`\n\nCreate a new `Consola` instance and inherit all parent options for defaults.\n\n#### `withDefaults(defaults)`\n\nCreate a new `Consola` instance with provided defaults\n\n#### `withTag(tag)`\n\n- Aliases: `withScope`\n\nCreate a new `Consola` instance with that tag.\n\n#### `wrapConsole()` `restoreConsole()`\n\nGlobally redirect all `console.log`, etc calls to consola handlers.\n\n#### `wrapStd()` `restoreStd()`\n\nGlobally redirect all stdout/stderr outputs to consola.\n\n#### `wrapAll()` `restoreAll()`\n\nWrap both, std and console.\n\nconsole uses std in the underlying so calling `wrapStd` redirects console too.\nBenefit of this function is that things like `console.info` will be correctly redirected to the corresponding type.\n\n#### `pauseLogs()` `resumeLogs()`\n\n- Aliases: `pause`/`resume`\n\n**Globally** pause and resume logs.\n\nConsola will enqueue all logs when paused and then sends them to the reported when resumed.\n\n#### `mockTypes`\n\n- Aliases: `mock`\n\nMock all types. Useful for using with tests.\n\nThe first argument passed to `mockTypes` should be a callback function accepting `(typeName, type)` and returning the mocked value:\n\n```js\nconsola.mockTypes((typeName, type) => jest.fn())\n```\n\nPlease note that with the example above, everything is mocked independently for each type. If you need one mocked fn create it outside:\n\n```js\nconst fn = jest.fn()\nconsola.mockTypes(() => fn)\n```\n\nIf callback function returns a _falsy_ value, that type won't be mocked.\n\nFor example if you just need to mock `consola.fatal`:\n\n```js\nconsola.mockTypes((typeName) => typeName === 'fatal' && jest.fn())\n```\n\n**NOTE:** Any instance of consola that inherits the mocked instance, will apply provided callback again.\nThis way, mocking works for `withTag` scoped loggers without need to extra efforts.\n\n## Fields\n\n#### `reporters`\n\nAn array of active reporters.\n\n#### `level`\n\nThe level to display logs. Any logs at or above this level will be displayed.\nList of available levels [here](./src/types.js).\n\nYou can set the log level using the `CONSOLA_LEVEL` environment variable, which must have the numeric log level as its value.\n\n## `logObject`\n\nThe `logObject` is a free-to-extend object which will be passed to reporters.\n\nStandard fields:\n\n- `message`\n- `additional`\n- `args`\n- `date`\n- `tag`\n\nExtra fields:\n\n- `badge`\n\n## Reporters\n\nChoose between one of the built-in reporters or bring in your own one.\n\nBy default `FancyReporter` is registered for modern terminals or `BasicReporter` will be used if running in limited environments such as CIs.\n\nAvailable reporters:\n\n- [BasicReporter](./src/reporters/basic.js)\n- [FancyReporter](./src/reporters/fancy.js)\n- [JSONReporter](./src/reporters/json.js)\n- [WinstonReporter](./src/reporters/winston.js)\n\n### Creating your own reporter\n\nA reporter (class or object) exposes `log(logObj)` method.\nTo get more info about how to write your own reporter, take a look into the linked implementations above.\n\n## Types\n\nTypes are used to actually log messages to the reporters.\nEach type is attached to a _logging level_.\n\nA list of all available default types is [here](./src/types.js).\n\n## Creating a new instance\n\nConsola has a global instance and is recommended to use everywhere.\nIn case more control is needed, create a new instance.\n\n```js\nimport consola from 'consola'\n\nconst logger = consola.create({\n    // level: 4,\n    reporters: [\n      new consola.JSONReporter()\n    ],\n    defaults: {\n      additionalColor: 'white'\n    }\n})\n```\n\n## Integrations\n\n### With jest\n\n```js\ndescribe('your-consola-mock-test', () => {\n  beforeAll(() => {\n      // Redirect std and console to consola too\n      // Calling this once is sufficient\n      consola.wrapAll()\n    })\n\n    beforeEach(() => {\n      // Re-mock consola before each test call to remove\n      // calls from before\n      consola.mockTypes(() => jest.fn())\n    })\n\n\n  test('your test', async () => {\n    // Some code here\n\n    // Let's retrieve all messages of `consola.log`\n    // Get the mock and map all calls to their first argument\n    const consolaMessages = consola.log.mock.calls.map(c => c[0])\n    expect(consolaMessages).toContain('your message')\n  })\n\n})\n```\n\n### With jsdom\n\n```js\n{\n  virtualConsole: new jsdom.VirtualConsole().sendTo(consola)\n}\n```\n\n## License\n\nMIT - Made with 💖 By Nuxt.js team!\n\n<!-- Refs -->\n[standard-js-src]: https://flat.badgen.net/badge/code%20style/standard/green\n[standard-js-href]: https://standardjs.com\n\n[npm-version-src]: https://flat.badgen.net/npm/v/consola/latest\n[npm-version-href]: https://npmjs.com/package/consola\n\n[npm-downloads-src]: https://flat.badgen.net/npm/dt/consola\n[npm-downloads-href]: https://npmjs.com/package/consola\n\n[package-phobia-src]: https://flat.badgen.net/packagephobia/install/consola\n[package-phobia-href]: https://packagephobia.now.sh/result?p=consola\n\n[bundle-phobia-src]: https://flat.badgen.net/bundlephobia/minzip/consola\n[bundle-phobia-href]: https://bundlephobia.com/result?p=consola"},"npm":{"downloads":[{"from":"2021-07-13T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":407484},{"from":"2021-07-07T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":2155087},{"from":"2021-06-14T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":9336234},{"from":"2021-04-15T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":26476676},{"from":"2021-01-15T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":50506306},{"from":"2020-07-14T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":87045346}],"dependentsCount":817,"starsCount":0},"github":{"starsCount":3151,"forksCount":100,"subscribersCount":27,"issues":{"count":117,"openCount":15,"distribution":{"3600":35,"10800":8,"32400":7,"97200":3,"291600":5,"874800":10,"2624400":16,"7873200":14,"23619600":10,"70858800":8,"212576400":1},"isDisabled":false},"contributors":[{"username":"maazadeeb","commitsCount":1},{"username":"ThomasKoscheck","commitsCount":1},{"username":"tjeeay","commitsCount":1},{"username":"matchai","commitsCount":3},{"username":"KaelWD","commitsCount":1},{"username":"develohpanda","commitsCount":1},{"username":"regevbr","commitsCount":3},{"username":"Akryum","commitsCount":2},{"username":"dargmuesli","commitsCount":1},{"username":"antoinerey","commitsCount":1},{"username":"clarkdo","commitsCount":9},{"username":"Git-Good","commitsCount":1},{"username":"trygveaa","commitsCount":1},{"username":"posva","commitsCount":1},{"username":"egoist","commitsCount":1},{"username":"376TEMP","commitsCount":1},{"username":"i62navpm","commitsCount":1},{"username":"pi0","commitsCount":295},{"username":"alberto","commitsCount":1},{"username":"D34THWINGS","commitsCount":2},{"username":"msokk","commitsCount":1},{"username":"mp3","commitsCount":1},{"username":"Atinux","commitsCount":12},{"username":"pimlie","commitsCount":21},{"username":"manniL","commitsCount":2},{"username":"NicoPennec","commitsCount":1},{"username":"Seldszar","commitsCount":1},{"username":"cehnegaitne","commitsCount":1},{"username":"papb","commitsCount":1}],"commits":[{"from":"2021-07-07T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":0},{"from":"2021-06-14T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":0},{"from":"2021-04-15T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":0},{"from":"2021-01-15T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":8},{"from":"2020-07-14T00:00:00.000Z","to":"2021-07-14T00:00:00.000Z","count":16}]},"source":{"files":{"readmeSize":7002,"testsSize":5657,"hasChangelog":true},"linters":["editorconfig","eslint"]}},"evaluation":{"quality":{"carefulness":0.9999999999999999,"tests":0.6,"health":1,"branding":0},"popularity":{"communityInterest":3307,"downloadsCount":8825558.666666666,"downloadsAcceleration":28709.397222222222,"dependentsCount":817},"maintenance":{"releasesFrequency":0.8359589041095891,"commitsFrequency":0.6041095890410959,"openIssues":1,"issuesDistribution":0.5184555086117587}},"score":{"final":0.8057536831803964,"detail":{"quality":0.8448893104859356,"popularity":0.5909555882379538,"maintenance":0.9870069547180911}}}