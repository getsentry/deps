{"analyzedAt":"2021-07-25T12:20:15.915Z","collected":{"metadata":{"name":"rollup-plugin-typescript2","scope":"unscoped","version":"0.30.0","description":"Seamless integration between Rollup and TypeScript. Now with errors.","keywords":["rollup-plugin-typescript2","rollup-plugin-typescript","rollup-plugin","typescript","es2015","rollup","npm"],"date":"2021-02-18T16:31:35.618Z","author":{"name":"@ezolenko"},"publisher":{"username":"ezolenko","email":"zolenkoe@gmail.com"},"maintainers":[{"username":"ezolenko","email":"zolenkoe@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/ezolenko/rollup-plugin-typescript2.git"},"links":{"npm":"https://www.npmjs.com/package/rollup-plugin-typescript2","homepage":"https://github.com/ezolenko/rollup-plugin-typescript2","repository":"https://github.com/ezolenko/rollup-plugin-typescript2","bugs":"https://github.com/ezolenko/rollup-plugin-typescript2/issues"},"license":"MIT","dependencies":{"@rollup/pluginutils":"^4.1.0","find-cache-dir":"^3.3.1","fs-extra":"8.1.0","resolve":"1.20.0","tslib":"2.1.0"},"devDependencies":{"@types/colors":"1.2.1","@types/find-cache-dir":"^2.0.0","@types/fs-extra":"8.0.1","@types/graphlib":"2.1.7","@types/lodash":"4.14.161","@types/node":"8.0.47","@types/object-hash":"1.3.3","@types/resolve":"1.17.1","@types/semver":"7.1.0","colors":"1.4.0","graphlib":"2.1.8","lodash":"4.17.20","object-hash":"2.0.3","rimraf":"3.0.2","rollup":"^2.39.0","@rollup/plugin-commonjs":"17.1.0","@rollup/plugin-node-resolve":"11.2.0","rollup-plugin-re":"1.0.7","rollup-plugin-typescript2":"0.29.0","rollup-watch":"4.3.1","semver":"7.3.4","tslint":"6.1.3","typescript":"4.1.5"},"peerDependencies":{"rollup":">=1.26.3","typescript":">=2.4.0"},"releases":[{"from":"2021-06-25T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":0},{"from":"2021-04-26T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":0},{"from":"2021-01-26T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":2},{"from":"2020-07-25T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":6},{"from":"2019-07-26T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":19}],"hasSelectiveFiles":true,"readme":"# rollup-plugin-typescript2\n\n[![npm-version](https://img.shields.io/npm/v/rollup-plugin-typescript2.svg?maxAge=259200)](https://npmjs.org/package/rollup-plugin-typescript2)\n![npm-monthly-downloads](https://img.shields.io/npm/dm/rollup-plugin-typescript2.svg?maxAge=259200)\n[![Codeship Status](https://app.codeship.com/projects/fe9cf8f0-e8d4-0134-ec88-4e3d33dcd7ed/status?branch=master)](https://app.codeship.com/projects/207445)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/e19b72ab9658405bbfb32dd6d65d1856)](https://www.codacy.com/app/zolenkoe/rollup-plugin-typescript2?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ezolenko/rollup-plugin-typescript2&amp;utm_campaign=Badge_Grade)\n[![Node.js CI](https://github.com/ezolenko/rollup-plugin-typescript2/workflows/Node.js%20CI/badge.svg)](https://github.com/ezolenko/rollup-plugin-typescript2/actions?query=workflow%3A\"Node.js+CI\")\n\nRollup plugin for typescript with compiler errors.\n\nThis is a rewrite of original rollup-plugin-typescript, starting and borrowing from [this fork](https://github.com/alexlur/rollup-plugin-typescript).\n\nThis version is somewhat slower than original, but it will print out typescript syntactic and semantic diagnostic messages (the main reason for using typescript after all).\n\n## Installation\n\n```bash\n# with npm\nnpm install rollup-plugin-typescript2 typescript tslib --save-dev\n# with yarn\nyarn add rollup-plugin-typescript2 typescript tslib --dev\n```\n\n## Usage\n\n```js\n// rollup.config.js\nimport typescript from 'rollup-plugin-typescript2';\n\nexport default {\n\tinput: './main.ts',\n\n\tplugins: [\n\t\ttypescript(/*{ plugin options }*/)\n\t]\n}\n```\n\nThe plugin inherits all compiler options and file lists from your `tsconfig.json` file. If your tsconfig has another name or another relative path from the root directory, see `tsconfigDefaults`, `tsconfig` and `tsconfigOverride` options below. This also allows for passing in different tsconfig files depending on your build target.\n\n#### Some compiler options are forced\n\n* `noEmitHelpers`: false\n* `importHelpers`: true\n* `noResolve`: false\n* `noEmit`: false\n* `inlineSourceMap`: false (see [#71](https://github.com/ezolenko/rollup-plugin-typescript2/issues/71))\n* `outDir`: `./placeholder` in cache root, see [83](https://github.com/ezolenko/rollup-plugin-typescript2/issues/83) and [Microsoft/TypeScript/issues/24715](https://github.com/Microsoft/TypeScript/issues/24715)\n* `declarationDir`: Rollup's `output.file` or `output.dir` (*only if `useTsconfigDeclarationDir` is false in the plugin options*)\n* `moduleResolution`: `node` (*`classic` is [deprecated](https://www.typescriptlang.org/docs/handbook/module-resolution.html). It also breaks this plugin, see [#12](https://github.com/ezolenko/rollup-plugin-typescript2/issues/12) and [#14](https://github.com/ezolenko/rollup-plugin-typescript2/issues/14)*)\n* `allowNonTsExtensions`: true to let other plugins on the chain generate typescript, update plugin's include filter to pick them up (see [#111](https://github.com/ezolenko/rollup-plugin-typescript2/issues/111))\n\n#### Some compiler options have more than one compatible value.\n\n* `module`: defaults to `ES2015`, other valid value is `ESNext` (required for dynamic imports, see [#54](https://github.com/ezolenko/rollup-plugin-typescript2/issues/54)).\n\n#### Some options need additional configuration on plugin side\n\n* `allowJs`: lets typescript process js files as well, if you use it, modify plugin's `include` option to add `\"*.js+(|x)\", \"**/*.js+(|x)\"` (might want to exclude node_modules, it will slow down the build significantly).\n\n### Compatibility\n\n#### rollup-plugin-node-resolve\n\nMust be before rollup-plugin-typescript2 in the plugin list, especially when `browser: true` option is used, see [#66](https://github.com/ezolenko/rollup-plugin-typescript2/issues/66)\n\n#### rollup-plugin-commonjs\n\nSee explanation for `rollupCommonJSResolveHack` option below.\n\n#### rollup-plugin-babel\n\nThis plugin transpiles code, but doesn't change file extension. Babel plugin, even though it claims it processes all files, only looks at code with those extensions by default: `.js,.jsx,.es6,.es,.mjs`. To workaround add `ts` and `tsx` to the list of babel extensions.\n\n```js\n...\nimport { DEFAULT_EXTENSIONS } from '@babel/core';\n...\n\tbabel({\n\t\textensions: [\n\t\t\t...DEFAULT_EXTENSIONS,\n\t\t\t'.ts',\n\t\t\t'.tsx'\n\t\t]\n\t}),\n...\n```\n\nSee [#108](https://github.com/ezolenko/rollup-plugin-typescript2/issues/108)\n\n### Plugin options\n\n* `cwd`: `string`\n\n    The current work directory, default `process.cwd()`.\n\n* `tsconfigDefaults`: `{}`\n\n\tThe object passed as `tsconfigDefaults` will be merged with loaded `tsconfig.json`. Final config passed to typescript will be the result of values in `tsconfigDefaults` replaced by values in loaded `tsconfig.json`, replaced by values in `tsconfigOverride` and then replaced by hard `compilerOptions` overrides on top of that (see above).\n\n\tFor simplicity and other tools' sake, try to minimize usage of defaults and overrides and keep everything in `tsconfig.json` file (tsconfigs can themselves be chained, so save some turtles).\n\n\t```js\n\tlet defaults = { compilerOptions: { declaration: true } };\n\tlet override = { compilerOptions: { declaration: false } };\n\n\t// ...\n\tplugins: [\n\t\ttypescript({\n\t\t\ttsconfigDefaults: defaults,\n\t\t\ttsconfig: \"tsconfig.json\",\n\t\t\ttsconfigOverride: override\n\t\t})\n\t]\n\t```\n\n\tThis is a [deep merge](https://lodash.com/docs/4.17.4#merge) (objects are merged, arrays are concatenated, primitives are replaced, etc), increase `verbosity` to 3 and look for `parsed tsconfig` if you get something unexpected.\n\n* `tsconfig`: `undefined`\n\n    Path to `tsconfig.json`. Set this if your tsconfig has another name or relative location from the project directory. By default will try to load `./tsconfig.json`, but will not fail if file is missing unless the value is set explicitly.\n\n* `tsconfigOverride`: `{}`\n\n\tSee `tsconfigDefaults`.\n\n* `check`: true\n\n\tSet to false to avoid doing any diagnostic checks on the code.\n\n* `verbosity`: 1\n\n\t- 0 -- Error\n\t- 1 -- Warning\n\t- 2 -- Info\n\t- 3 -- Debug\n\n* `clean`: false\n\n\tSet to true for clean build (wipes out cache on every build).\n\n* `cacheRoot`: `node_modules/.cache/rollup-plugin-typescript2`\n\n\tPath to cache. Defaults to a folder in node_modules.\n\n* `include`: `[ \"*.ts+(|x)\", \"**/*.ts+(|x)\" ]`\n\n\tBy default passes all .ts files through typescript compiler.\n\n* `exclude`: `[ \"*.d.ts\", \"**/*.d.ts\" ]`\n\n\tBut excludes type definitions.\n\n* `abortOnError`: true\n\n\tBail out on first syntactic or semantic error. In some cases setting this to false will result in exception in rollup itself (for example for unresolvable imports).\n\n* `rollupCommonJSResolveHack`: false\n\n\tOn windows typescript resolver favors POSIX path, while commonjs plugin (and maybe others?) uses native path as module id. This can result in `namedExports` being ignored if rollup happened to use typescript's resolution. Set to true to pass resolved module path through `resolve()` to match up with `rollup-plugin-commonjs`.\n\t\n\t`rollup-plugin-commonjs` fixed this in `10.1.0`, so projects using this option who update to new version will be broken again.\n\t\n\tThis also works around the similar bug affecting code splitting (see [rollup/issues/3094](https://github.com/rollup/rollup/issues/3094)).\n\n* `objectHashIgnoreUnknownHack`: false\n\n\tThe plugin uses rollup config as part of cache key. `object-hash` is used to generate a hash, but it can have trouble with some uncommon types of elements. Setting this option to true will make `object-hash` ignore unknowns, at the cost of not invalidating the cache if ignored elements are changed. Only enable this if you need it (`Error: Unknown object type \"xxx\"` for example) and make sure to run with `clean: true` once in a while and definitely before a release. (See [#105](https://github.com/ezolenko/rollup-plugin-typescript2/issues/105) and [#203](https://github.com/ezolenko/rollup-plugin-typescript2/pull/203))\n\n* `useTsconfigDeclarationDir`: false\n\n\tIf true, declaration files will be emitted in the directory given in the tsconfig. If false, the declaration files will be placed inside the destination directory given in the Rollup configuration.\n\t\n\tSet to false if any other rollup plugins need access to declaration files.\n\n* `typescript`: typescript module installed with the plugin\n\n\tWhen typescript version installed by the plugin (latest 2.x) is unacceptable, you can import your own typescript module and pass it in as `typescript: require(\"path/to/other/typescript\")`. Must be 2.0+, things might break if transpiler interfaces changed enough from what the plugin was built against.\n\n* `transformers`: `undefined`\n\n\t**experimental**, typescript 2.4.1+\n\n\tTransformers will likely be available in tsconfig eventually, so this is not a stable interface, see [Microsoft/TypeScript/issues/14419](https://github.com/Microsoft/TypeScript/issues/14419).\n\n\tFor example, integrating [kimamula/ts-transformer-keys](https://github.com/kimamula/ts-transformer-keys):\n\n\t```js\n\tconst keysTransformer = require('ts-transformer-keys/transformer').default;\n\tconst transformer = (service) => ({\n  \t\tbefore: [ keysTransformer(service.getProgram()) ],\n  \t\tafter: []\n\t});\n\n\t// ...\n\tplugins: [\n\t\ttypescript({ transformers: [transformer] })\n\t]\n\t```\n\n### Declarations\n\nThis plugin respects `declaration: true` in your `tsconfig.json` file. When set, it will emit `*.d.ts` files for your bundle. The resulting file(s) can then be used with the `types` property in your `package.json` file as described [here](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html).\nBy default, the declaration files will be located in the same directory as the generated Rollup bundle. If you want to override this behavior and instead use the declarationDir set `useTsconfigDeclarationDir` to `true` in the plugin options.\n\n### Watch mode\n\nThe way typescript handles type-only imports and ambient types effectively hides them from rollup watch, because import statements are not generated and changing them doesn't trigger a rebuild.\n\nOtherwise the plugin should work in watch mode. Make sure to run a normal build after watch session to catch any type errors.\n\n### Requirements\n\nTypeScript `2.4+`\nRollup `1.26.3+`\nNode `6.4.0+` (basic es6 support)\n\n### Reporting bugs\n\nReport any bugs on github: <https://github.com/ezolenko/rollup-plugin-typescript2/issues>.\n\nAttach your `tsconfig.json`, `package.json` (for versions of dependencies), rollup script and anything else that could influence module resolution, ambient types and typescript compilation.\n\nCheck if problem is reproducible after running `npm prune` to clear any rogue types from npm_modules (by default typescript grabs all ambient types).\n\nCheck if you get the same problem with `clean` option set to true (might indicate a bug in the cache).\n\nIf makes sense, check if running `tsc` directly produces similar results.\n\nAttach plugin output with `verbosity` option set to 3 (this will list all files being transpiled and their imports).\n\n### Contributing\n\nUse the normal github process of forking, making a branch and creating a PR when ready. Fix all linting problems (run `npm lint`), fix any failed checks that are run on the PR (basically lint right now). Use an editor that supports editorconfig, or match the settings from `.editorconfig` file manually.\n\nFastest way to test changes is to do a self build, the plugin is part of its own build system:\n- make changes\n- run `npm build` (uses build committed to master branch)\n- check that you get expected changes in `dist`\n- run `npm build-self` (uses fresh local build)\n- check `dist` for the expected changes\n- run `npm build-self` _again_ to make sure plugin built by new version can still build itself\n\nIf `build-self` breaks at some point, fix the problem and restart from `build` step (a known good copy).\n\nThis repo badly needs unittests and integration tests with various scenarios and expected outcomes though."},"npm":{"downloads":[{"from":"2021-07-24T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":20150},{"from":"2021-07-18T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":439214},{"from":"2021-06-25T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":1957213},{"from":"2021-04-26T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":5785770},{"from":"2021-01-26T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":11030308},{"from":"2020-07-25T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":18731188}],"dependentsCount":545,"starsCount":1},"github":{"starsCount":638,"forksCount":60,"subscribersCount":11,"issues":{"count":276,"openCount":61,"distribution":{"3600":21,"10800":3,"32400":16,"97200":24,"291600":43,"874800":41,"2624400":32,"7873200":27,"23619600":19,"70858800":33,"212576400":17},"isDisabled":false},"contributors":[{"username":"ooflorent","commitsCount":1},{"username":"ajlende","commitsCount":3},{"username":"lmk123","commitsCount":1},{"username":"cslecours","commitsCount":1},{"username":"wessberg","commitsCount":10},{"username":"ezolenko2","commitsCount":8},{"username":"EqualMa","commitsCount":1},{"username":"antross","commitsCount":1},{"username":"chocolateboy","commitsCount":1},{"username":"domoritz","commitsCount":1},{"username":"sorrycc","commitsCount":1},{"username":"Andarist","commitsCount":1},{"username":"mattdsteele","commitsCount":1},{"username":"xaviergonz","commitsCount":1},{"username":"agilgur5","commitsCount":7},{"username":"frankwallis","commitsCount":1},{"username":"brandon-leapyear","commitsCount":1},{"username":"marijnh","commitsCount":4},{"username":"NicolasThierion","commitsCount":1},{"username":"allex","commitsCount":1},{"username":"NotWoods","commitsCount":1},{"username":"bluetech","commitsCount":1},{"username":"nickmccurdy","commitsCount":1},{"username":"cuyl","commitsCount":1},{"username":"ezolenko","commitsCount":267},{"username":"lephyrus","commitsCount":2},{"username":"mesqueeb","commitsCount":1},{"username":"houfio","commitsCount":1},{"username":"rossipedia","commitsCount":1},{"username":"warrenseine","commitsCount":1}],"commits":[{"from":"2021-07-18T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":0},{"from":"2021-06-25T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":0},{"from":"2021-04-26T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":2},{"from":"2021-01-26T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":6},{"from":"2020-07-25T00:00:00.000Z","to":"2021-07-25T00:00:00.000Z","count":27}]},"source":{"files":{"readmeSize":11995,"testsSize":0},"badges":[{"urls":{"original":"https://img.shields.io/npm/v/rollup-plugin-typescript2.svg?maxAge=259200","shields":"https://img.shields.io/npm/v/rollup-plugin-typescript2.svg","content":"https://img.shields.io/npm/v/rollup-plugin-typescript2.json"},"info":{"service":"npm","type":"version","modifiers":{"type":"v"}}},{"urls":{"original":"https://img.shields.io/npm/dm/rollup-plugin-typescript2.svg?maxAge=259200","shields":"https://img.shields.io/npm/dm/rollup-plugin-typescript2.svg","content":"https://img.shields.io/npm/dm/rollup-plugin-typescript2.json"},"info":{"service":"npm","type":"downloads","modifiers":{"type":"dm"}}},{"urls":{"original":"https://api.codacy.com/project/badge/Grade/e19b72ab9658405bbfb32dd6d65d1856","service":"https://api.codacy.com/project/badge/Grade/e19b72ab9658405bbfb32dd6d65d1856","shields":"https://img.shields.io/codacy/grade/e19b72ab9658405bbfb32dd6d65d1856.svg","content":"https://img.shields.io/codacy/grade/e19b72ab9658405bbfb32dd6d65d1856.json"},"info":{"service":"codacy","type":"quality"}}],"linters":["editorconfig","tslint"],"outdatedDependencies":{"tslib":{"required":"2.1.0","stable":"2.3.0","latest":"2.3.0"},"fs-extra":{"required":"8.1.0","stable":"10.0.0","latest":"10.0.0"}}}},"evaluation":{"quality":{"carefulness":0.45999999999999996,"tests":0,"health":0.5,"branding":0.44999999999999996},"popularity":{"communityInterest":740,"downloadsCount":1928590,"downloadsAcceleration":5970.818911719938,"dependentsCount":545},"maintenance":{"releasesFrequency":0.7400684931506849,"commitsFrequency":0.6256849315068493,"openIssues":0.964975845410628,"issuesDistribution":0}},"score":{"final":0.5320725114336622,"detail":{"quality":0.4931882785980315,"popularity":0.43294426972724875,"maintenance":0.6645300955706162}}}