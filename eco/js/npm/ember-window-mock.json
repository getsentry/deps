{"analyzedAt":"2021-07-19T10:28:12.785Z","collected":{"metadata":{"name":"ember-window-mock","scope":"unscoped","version":"0.7.2","description":"Adds a window service that can be mocked in tests","keywords":["ember-addon","testing","window","mock"],"date":"2021-01-18T18:20:27.370Z","author":{"name":"Simon Ihmig","email":"ihmig@kaliber5.de","username":"simonihmig"},"publisher":{"username":"simonihmig","email":"ihmig@kaliber5.de"},"maintainers":[{"username":"simonihmig","email":"ihmig@kaliber5.de"},{"username":"lolmaus","email":"lolmaus@gmail.com"},{"username":"andreasschacht","email":"schacht@kaliber5.de"},{"username":"rwwagner90","email":"rwwagner90@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/kaliber5/ember-window-mock.git"},"links":{"npm":"https://www.npmjs.com/package/ember-window-mock","homepage":"https://github.com/kaliber5/ember-window-mock#readme","repository":"https://github.com/kaliber5/ember-window-mock","bugs":"https://github.com/kaliber5/ember-window-mock/issues"},"license":"MIT","dependencies":{"broccoli-funnel":"^3.0.3","ember-cli-babel":"^7.23.0","ember-cli-htmlbars":"^5.3.1"},"devDependencies":{"@ember/optional-features":"^2.0.0","@ember/test-helpers":"^2.1.4","@embroider/test-setup":"^0.35.1","@glimmer/component":"^1.0.3","@glimmer/tracking":"^1.0.3","babel-eslint":"^10.1.0","broccoli-asset-rev":"^3.0.0","ember-auto-import":"^1.10.1","ember-cli":"~3.24.0","ember-cli-dependency-checker":"^3.2.0","ember-cli-inject-live-reload":"^2.0.2","ember-cli-sri":"^2.1.1","ember-cli-terser":"^4.0.1","ember-disable-prototype-extensions":"^1.1.3","ember-export-application-global":"^2.0.1","ember-load-initializers":"^2.1.2","ember-maybe-import-regenerator":"^0.1.6","ember-page-title":"^6.0.3","ember-qunit":"^5.1.1","ember-resolver":"^8.0.2","ember-sinon":"^5.0.0","ember-sinon-qunit":"^5.0.0","ember-source":"~3.24.0","ember-source-channel-url":"^3.0.0","ember-template-lint":"^2.16.0","ember-try":"^1.4.0","eslint":"^7.18.0","eslint-config-prettier":"^7.1.0","eslint-plugin-ember":"^10.1.2","eslint-plugin-node":"^11.1.0","eslint-plugin-prettier":"^3.3.1","loader.js":"^4.7.0","npm-run-all":"^4.1.5","prettier":"^2.2.1","qunit":"^2.13.0","qunit-dom":"^1.6.0","release-it":"^14.2.2","release-it-lerna-changelog":"^3.1.0"},"releases":[{"from":"2021-06-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":0},{"from":"2021-04-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":0},{"from":"2021-01-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":0},{"from":"2020-07-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":2},{"from":"2019-07-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":5}],"hasTestScript":true,"readme":"# ember-window-mock\n\n![CI](https://github.com/kaliber5/ember-window-mock/workflows/CI/badge.svg)\n[![Ember Observer Score](https://emberobserver.com/badges/ember-window-mock.svg)](https://emberobserver.com/addons/ember-window-mock)\n[![npm version](https://badge.fury.io/js/ember-window-mock.svg)](https://badge.fury.io/js/ember-window-mock)\n\nThis Ember CLI addon provides the `window` global as an ES6 module import that you can use in any component or controller where\nyou need `window`. But some of its properties and functions are prohibitive to be used \nin tests as they will break the test run:\n* you cannot set `window.location.href` to trigger a redirect, as that will leave your test page\n* `alert`, `confirm` and `prompt` are blocking calls, and cannot be closed without user interaction, so they will just\nsuspend your test run\n\nSo when running tests this import will be replaced with one that mocks these critical parts.\n\n\nCompatibility\n------------------------------------------------------------------------------\n\n* Ember.js v3.12 or above\n* Ember CLI v2.13 or above\n* Node.js v10 or above\n\n\nInstallation\n------------------------------------------------------------------------------\n\n```\nember install ember-window-mock\n```\n\nUsage\n------------------------------------------------------------------------------\n\n### How to use it in your app\n\nLet's say you want to redirect to an external URL. A simple controller could look like this:\n\n```js\nimport Controller from '@ember/controller';\nimport { action } from '@ember/object';\n\nexport default class IndexController extends Controller {\n  @action\n  redirect(url) {\n    window.location.href = url;\n  }\n}\n``` \n\nWith this addon, you can just import `window` instead of using the global:\n\n```js\nimport Controller from '@ember/controller';\nimport { action } from '@ember/object';\nimport window from 'ember-window-mock';\n\nexport default class IndexController extends Controller {\n  @action\n  redirect(url) {\n    window.location.href = url;\n  }\n}\n```  \n\nEverything else works as you would expect, since the import is exactly the same as the global, when not running tests. \n\n### The window mock\n\nWhen running in the test environment, the import will be replaced with a mock. It is a proxy to `window`, so all of the \nnon-critical properties and functions just use the normal `window` global. But the critical parts are replaced suitable \nfor tests:\n* `window.location` is mocked with an object with the same API (members like `.href` or `.host`), but setting \n`location.href` will just do nothing. Still reading from `location.href` will return the value that was previously set, \nso you can run assertions against that value to check if you app tried to redirect to the expected URL.\n* `window.localStorage` is also mocked with an object with the same API (`getItem`, `setItem`, `removeItem`, `clear`, `key`, and `length`). Storage is not persistent and does not affect your browser's `localStorage` object.\n* `alert`, `confirm` and `prompt` are replaced by simple noop functions (they do nothing). You can use a mocking library\nlike [Sinon.js](http://sinonjs.org/) to replace them with spies or stubs to assert that they have been called or to \nreturn some predefined value (e.g. `true` for `confirm`).\n\nMoreover it allows you to set any (nested) properties, even if they are defined as read only. This way you can pretend\ndifferent environments in your tests. For example you can fake different devices by changing\n* `window.navigator.userAgent` when you do user agent detection in your app.\n* `window.screen.width` to test responsive layouts when your components render differently based on it.\n\nSee below for some examples.\n\n**Important:**\n* The window mock works by using an ES6 `Proxy`, so **your development environment and tests need to run in a browser like Chrome that \nsupports `Proxy` natively** (as it cannot be transpiled by Babel) \n* Note that this will only work when you use these function through the import, and not by using the global directly.\n\n### Resetting the state in tests\n\nIt is possible to leak some state on the window mock between tests. For example when your app sets `location.href` in a \ntest like this:\n\n```js \nwindow.location.href = 'http://www.example.com';\n```\n\nFor the following test `window.location.href` will still be `'http://www.example.com'`, but instead it should have a \nfresh instance of the window mock. Therefore this addon exports a `setupWindowMock` function to kill all changed state on `window`:\n\n```js\nimport { setupWindowMock } from 'ember-window-mock/test-support';\n\nmodule('SidebarController', function(hooks) {\n  setupWindowMock(hooks);\n\n  test(...);\n});\n```\n\n### Test examples\n\n#### Mocking `window.location`\n\nGiven a controller like the one above, that redirects to some URL when a button is clicked, an application test could like this:\n\n```js\nimport { module, test } from 'qunit';\nimport { click, visit } from '@ember/test-helpers';\nimport { setupApplicationTest } from 'ember-qunit';\nimport window from 'ember-window-mock';\nimport { setupWindowMock } from 'ember-window-mock/test-support';\n\nmodule('Acceptance | redirect', function(hooks) {\n  setupApplicationTest(hooks);\n  setupWindowMock(hooks);\n\n  test('it redirects when clicking the button', async function(assert) {\n    await visit('/');\n    await click('button');\n    \n    assert.equal(window.location.href, 'http://www.example.com');\n  });\n});\n```\n\n#### Mocking `confirm()`\n\nHere is an example that uses [ember-sinon-qunit](https://github.com/elwayman02/ember-sinon-qunit) to replace `confirm`, \nso you can easily check if it has been called, and to return some defined value:\n\n```js\nimport { module, test } from 'qunit';\nimport { click, visit } from '@ember/test-helpers';\nimport { setupApplicationTest } from 'ember-qunit';\nimport window from 'ember-window-mock';\nimport { setupWindowMock } from 'ember-window-mock/test-support';\nimport sinon from 'sinon';\n\nmodule('Acceptance | redirect', function(hooks) {\n  setupApplicationTest(hooks);\n  setupWindowMock(hooks);\n\n  test('it deletes an item', async function(assert) {\n    let stub = sinon.stub(window, 'confirm');\n    stub.returns(true);\n    \n    await visit('/');\n    await click('[data-test-delete]');\n    \n    assert.ok(stub.calledOnce);\n    assert.ok(stub.calledWith('Are you sure?'));\n  });\n});\n``` \n\n#### Mocking `open()`\n\nHere is an example that assigns a new function to replace `open`.\nYou can check if the function has been called as well as the value of its parameters.\n\n```js\nimport { module, test } from 'qunit';\nimport { click, visit } from '@ember/test-helpers';\nimport { setupApplicationTest } from 'ember-qunit';\nimport window from 'ember-window-mock';\nimport { setupWindowMock } from 'ember-window-mock/test-support';\n\nmodule('Acceptance | new window', function(hooks) {\n  setupApplicationTest(hooks);\n  setupWindowMock(hooks);\n\n  test('it opens a new window when clicking the button', async function(assert) {\n    await visit('/');\n    window.open = (urlToOpen) => {\n      assert.equal(urlToOpen, 'http://www.example.com/some-file.jpg');\n    };\n    await click('button');\n  });\n});\n```\n\nContributing\n------------------------------------------------------------------------------\n\nSee the [Contributing](CONTRIBUTING.md) guide for details.\n\n\nLicense\n------------------------------------------------------------------------------\n\nThis project is licensed under the [MIT License](LICENSE.md)."},"npm":{"downloads":[{"from":"2021-07-18T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":239},{"from":"2021-07-12T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":16166},{"from":"2021-06-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":63297},{"from":"2021-04-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":195190},{"from":"2021-01-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":402863},{"from":"2020-07-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":734175}],"dependentsCount":6,"starsCount":1},"github":{"starsCount":56,"forksCount":11,"subscribersCount":2,"issues":{"count":427,"openCount":17,"distribution":{"3600":207,"10800":20,"32400":7,"97200":26,"291600":19,"874800":32,"2624400":56,"7873200":28,"23619600":15,"70858800":10,"212576400":7},"isDisabled":false},"contributors":[{"username":"elwayman02","commitsCount":1},{"username":"Gaurav0","commitsCount":1},{"username":"buschtoens","commitsCount":2},{"username":"alexlafroscia","commitsCount":1},{"username":"simonihmig","commitsCount":94},{"username":"TopsyCM","commitsCount":1},{"username":"alisdair","commitsCount":4},{"username":"greenkeeper[bot]","commitsCount":17},{"username":"hakilebara","commitsCount":1},{"username":"makepanic","commitsCount":3},{"username":"rwwagner90","commitsCount":6},{"username":"kellyselden","commitsCount":4},{"username":"ember-tomster","commitsCount":1}],"commits":[{"from":"2021-07-12T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":0},{"from":"2021-06-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":9},{"from":"2021-04-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":53},{"from":"2021-01-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":101},{"from":"2020-07-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":184}]},"source":{"files":{"readmeSize":7442,"testsSize":23574,"hasNpmIgnore":true,"hasChangelog":true},"linters":["editorconfig","eslint","prettier"]}},"evaluation":{"quality":{"carefulness":0.49999999999999994,"tests":0.6,"health":1,"branding":0},"popularity":{"communityInterest":83,"downloadsCount":65063.333333333336,"downloadsAcceleration":81.28776636225268,"dependentsCount":6},"maintenance":{"releasesFrequency":0.16027397260273973,"commitsFrequency":1,"openIssues":1,"issuesDistribution":0.6780245207675407}},"score":{"final":0.5714881837350888,"detail":{"quality":0.7627891041229204,"popularity":0.15452781985352057,"maintenance":0.8244763301413729}}}