{"analyzedAt":"2021-02-19T12:15:22.560Z","collected":{"metadata":{"name":"babel-core","scope":"unscoped","version":"6.26.3","description":"Babel compiler core.","keywords":["6to5","babel","classes","const","es6","harmony","let","modules","transpile","transpiler","var","babel-core","compiler"],"date":"2018-04-27T09:47:04.101Z","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"publisher":{"username":"loganfsmyth","email":"loganfsmyth@gmail.com"},"maintainers":[{"username":"hzoo","email":"hi@henryzoo.com"},{"username":"loganfsmyth","email":"loganfsmyth@gmail.com"},{"username":"danez","email":"daniel@tschinder.de"},{"username":"existentialism","email":"bng412@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/babel/babel.git"},"links":{"npm":"https://www.npmjs.com/package/babel-core","homepage":"https://babeljs.io/","repository":"https://github.com/babel/babel","bugs":"https://github.com/babel/babel/issues"},"license":"MIT","dependencies":{"babel-code-frame":"^6.26.0","babel-generator":"^6.26.0","babel-helpers":"^6.24.1","babel-messages":"^6.23.0","babel-register":"^6.26.0","babel-runtime":"^6.26.0","babel-template":"^6.26.0","babel-traverse":"^6.26.0","babel-types":"^6.26.0","babylon":"^6.18.0","convert-source-map":"^1.5.1","debug":"^2.6.9","json5":"^0.5.1","lodash":"^4.17.4","minimatch":"^3.0.4","path-is-absolute":"^1.0.1","private":"^0.1.8","slash":"^1.0.0","source-map":"^0.5.7"},"devDependencies":{"babel-helper-fixtures":"^6.26.2","babel-helper-transform-fixture-test-runner":"^6.26.2","babel-polyfill":"^6.26.0"},"releases":[{"from":"2021-01-20T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":0},{"from":"2020-11-21T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":1},{"from":"2020-08-23T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":1},{"from":"2020-02-20T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":1},{"from":"2019-02-20T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":1}],"hasTestScript":true,"readme":"# babel-core\n\n> Babel compiler core.\n\n\n```javascript\nvar babel = require(\"babel-core\");\nimport { transform } from 'babel-core';\nimport * as babel from 'babel-core';\n```\n\nAll transformations will use your local configuration files (.babelrc or in package.json). See [options](#options) to disable it.\n\n## babel.transform(code: string, [options?](#options): Object)\n\nTransforms the passed in `code`. Returning an object with the generated code,\nsource map, and AST.\n\n```js\nbabel.transform(code, options) // => { code, map, ast }\n```\n\n**Example**\n\n```js\nvar result = babel.transform(\"code();\", options);\nresult.code;\nresult.map;\nresult.ast;\n```\n\n## babel.transformFile(filename: string, [options?](#options): Object, callback: Function)\n\nAsynchronously transforms the entire contents of a file.\n\n```js\nbabel.transformFile(filename, options, callback)\n```\n\n**Example**\n\n```js\nbabel.transformFile(\"filename.js\", options, function (err, result) {\n  result; // => { code, map, ast }\n});\n```\n\n## babel.transformFileSync(filename: string, [options?](#options): Object)\n\nSynchronous version of `babel.transformFile`. Returns the transformed contents of\nthe `filename`.\n\n```js\nbabel.transformFileSync(filename, options) // => { code, map, ast }\n```\n\n**Example**\n\n```js\nbabel.transformFileSync(\"filename.js\", options).code;\n```\n\n## babel.transformFromAst(ast: Object, code?: string, [options?](#options): Object)\n\nGiven, an [AST](https://astexplorer.net/), transform it.\n\n```js\nconst code = \"if (true) return;\";\nconst ast = babylon.parse(code, { allowReturnOutsideFunction: true });\nconst { code, map, ast } = babel.transformFromAst(ast, code, options);\n```\n\n## Options\n\n> #### Babel CLI\n> \n> You can pass these options from the Babel CLI like so:\n> \n> `babel --name=value`\n\nFollowing is a table of the options you can use:\n\n| Option                   | Default              | Description                     |\n| ------------------------ | -------------------- | ------------------------------- |\n| `ast`                    | `true`               | Include the AST in the returned object |\n| `auxiliaryCommentAfter`  | `null`               | Attach a comment after all non-user injected code. |\n| `auxiliaryCommentBefore` | `null`               | Attach a comment before all non-user injected code. |\n| `babelrc`                | `true`               | Specify whether or not to use .babelrc and .babelignore files. Not available when using the CLI, [use `--no-babelrc` instead](https://babeljs.io/docs/en/babel-cli#ignoring-babelrc). |\n| `code`                   | `true`               | Enable code generation |\n| `comments`               | `true`               | Output comments in generated output. |\n| `compact`                | `\"auto\"`             | Do not include superfluous whitespace characters and line terminators. When set to `\"auto\"` compact is set to `true` on input sizes of >500KB. |\n| `env`                    | `{}`                 | This is an object of keys that represent different environments. For example, you may have: `{ env: { production: { /* specific options */ } } }` which will use those options when the environment variable `BABEL_ENV` is set to `\"production\"`. If `BABEL_ENV` isn't set then `NODE_ENV` will be used, if it's not set then it defaults to `\"development\"` |\n| `extends`                | `null`               | A path to an `.babelrc` file to extend |\n| `filename`               | `\"unknown\"`          | Filename for use in errors etc. |\n| `filenameRelative`       | `(filename)`         | Filename relative to `sourceRoot`. |\n| `generatorOpts`          | `{}`                 | An object containing the options to be passed down to the babel code generator, babel-generator |\n| `getModuleId`            | `null`               | Specify a custom callback to generate a module id with. Called as `getModuleId(moduleName)`. If falsy value is returned then the generated module id is used. |\n| `highlightCode`          | `true`               | ANSI highlight syntax error code frames |\n| `ignore`                 | `null`               | Opposite to the `only` option. `ignore` is disregarded if `only` is specified. |\n| `inputSourceMap`         | `null`               | A source map object that the output source map will be based on. |\n| `minified`               | `false`              | Should the output be minified (not printing last semicolons in blocks, printing literal string values instead of escaped ones, stripping `()` from `new` when safe) |\n| `moduleId`               | `null`               | Specify a custom name for module ids. |\n| `moduleIds`              | `false`              | If truthy, insert an explicit id for modules. By default, all modules are anonymous. (Not available for `common` modules) |\n| `moduleRoot`             | `(sourceRoot)`       | Optional prefix for the AMD module formatter that will be prepend to the filename on module definitions. |\n| `only`                   | `null`               | A [glob](https://github.com/isaacs/minimatch), regex, or mixed array of both, matching paths to **only** compile. Can also be an array of arrays containing paths to explicitly match. When attempting to compile a non-matching file it's returned verbatim. |\n| `parserOpts`             | `{}`                 | An object containing the options to be passed down to the babel parser, babylon |\n| `plugins`                | `[]`                 | List of [plugins](https://babeljs.io/docs/en/plugins) to load and use. |\n| `presets`                | `[]`                 | List of [presets](https://babeljs.io/docs/en/plugins#presets) (a set of plugins) to load and use. |\n| `retainLines`            | `false`              | Retain line numbers. This will lead to wacky code but is handy for scenarios where you can't use source maps. (**NOTE:** This will not retain the columns) |\n| `resolveModuleSource`    | `null`               | Resolve a module source ie. `import \"SOURCE\";` to a custom value. Called as `resolveModuleSource(source, filename)`. |\n| `shouldPrintComment`     | `null`               | An optional callback that controls whether a comment should be output or not. Called as `shouldPrintComment(commentContents)`. **NOTE:** This overrides the `comment` option when used. |\n| `sourceFileName`         | `(filenameRelative)` | Set `sources[0]` on returned source map. |\n| `sourceMaps`             | `false`              | If truthy, adds a `map` property to returned output. If set to `\"inline\"`, a comment with a sourceMappingURL directive is added to the bottom of the returned code. If set to `\"both\"` then a `map` property is returned as well as a source map comment appended. **This does not emit sourcemap files by itself!** To have sourcemaps emitted using the CLI, you must pass it the `--source-maps` option. |\n| `sourceMapTarget`        | `(filenameRelative)` | Set `file` on returned source map. |\n| `sourceRoot`             | `(moduleRoot)`       | The root from which all sources are relative. |\n| `sourceType`             | `\"module\"`           | Indicate the mode the code should be parsed in. Can be either \"script\" or \"module\". |\n| `wrapPluginVisitorMethod`| `null`               | An optional callback that can be used to wrap visitor methods. **NOTE:** This is useful for things like introspection, and not really needed for implementing anything. Called as `wrapPluginVisitorMethod(pluginAlias, visitorType, callback)`."},"npm":{"downloads":[{"from":"2021-02-18T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":1060424},{"from":"2021-02-12T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":5326966},{"from":"2021-01-20T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":24092866},{"from":"2020-11-21T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":64363555},{"from":"2020-08-23T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":136207210},{"from":"2020-02-20T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":286555543}],"dependentsCount":9877,"starsCount":150},"github":{"homepage":"https://babel.dev","starsCount":38417,"forksCount":4693,"subscribersCount":855,"issues":{"count":12593,"openCount":762,"distribution":{"3600":2577,"10800":997,"32400":1157,"97200":1382,"291600":1166,"874800":1107,"2624400":929,"7873200":850,"23619600":933,"70858800":1060,"212576400":435},"isDisabled":false},"contributors":[{"username":"monsanto","commitsCount":14},{"username":"tricknotes","commitsCount":7},{"username":"ForbesLindesay","commitsCount":10},{"username":"webpro","commitsCount":22},{"username":"cesarandreu","commitsCount":9},{"username":"JLHwung","commitsCount":376},{"username":"wtgtybhertgeghgtwtg","commitsCount":11},{"username":"rajasekarm","commitsCount":18},{"username":"thiagoarrais","commitsCount":9},{"username":"benjamn","commitsCount":22},{"username":"kittens","commitsCount":10},{"username":"jhen0409","commitsCount":6},{"username":"greenkeeper[bot]","commitsCount":54},{"username":"Retsam","commitsCount":7},{"username":"existentialism","commitsCount":469},{"username":"devongovett","commitsCount":8},{"username":"jayphelps","commitsCount":6},{"username":"yavorsky","commitsCount":89},{"username":"sarupbanskota","commitsCount":6},{"username":"kaicataldo","commitsCount":82},{"username":"eventualbuddha","commitsCount":30},{"username":"devenbansod","commitsCount":16},{"username":"arthurvr","commitsCount":8},{"username":"rmacklin","commitsCount":10},{"username":"xtuc","commitsCount":106},{"username":"motiz88","commitsCount":36},{"username":"AluisioASG","commitsCount":19},{"username":"SimenB","commitsCount":5},{"username":"baer","commitsCount":10},{"username":"phantom10111","commitsCount":8},{"username":"sophiebits","commitsCount":12},{"username":"kpdecker","commitsCount":14},{"username":"oleksandr-kuzmenko","commitsCount":13},{"username":"divmain","commitsCount":6},{"username":"erikdesjardins","commitsCount":9},{"username":"andy-ms","commitsCount":58},{"username":"rwaldron","commitsCount":8},{"username":"aaronang","commitsCount":11},{"username":"leebyron","commitsCount":6},{"username":"bmeurer","commitsCount":7},{"username":"neVERberleRfellerER","commitsCount":30},{"username":"jquense","commitsCount":34},{"username":"maurobringolf","commitsCount":16},{"username":"armano2","commitsCount":7},{"username":"babel-bot","commitsCount":79},{"username":"tanhauhau","commitsCount":30},{"username":"gzzhanghao","commitsCount":10},{"username":"peey","commitsCount":23},{"username":"tim-mc","commitsCount":6},{"username":"samwgoldman","commitsCount":35},{"username":"azz","commitsCount":7},{"username":"greenkeeperio-bot","commitsCount":25},{"username":"bakkot","commitsCount":9},{"username":"amasad","commitsCount":172},{"username":"loganfsmyth","commitsCount":594},{"username":"rubennorte","commitsCount":9},{"username":"Daniel15","commitsCount":8},{"username":"zertosh","commitsCount":27},{"username":"josh","commitsCount":8},{"username":"jridgewell","commitsCount":159},{"username":"aparajita","commitsCount":9},{"username":"Macil","commitsCount":12},{"username":"buunguyen","commitsCount":8},{"username":"vhf","commitsCount":11},{"username":"boopathi","commitsCount":11},{"username":"sosukesuzuki","commitsCount":29},{"username":"DrewML","commitsCount":11},{"username":"sebmck","commitsCount":5192},{"username":"samccone","commitsCount":11},{"username":"max-schaefer","commitsCount":6},{"username":"jamiebuilds","commitsCount":224},{"username":"mathiasbynens","commitsCount":29},{"username":"rattrayalex","commitsCount":8},{"username":"sindresorhus","commitsCount":19},{"username":"forivall","commitsCount":6},{"username":"dnalborczyk","commitsCount":13},{"username":"jayaddison","commitsCount":6},{"username":"frantic","commitsCount":7},{"username":"Zzzen","commitsCount":6},{"username":"hzoo","commitsCount":1264},{"username":"jmm","commitsCount":49},{"username":"nicolo-ribaudo","commitsCount":604},{"username":"mysticatea","commitsCount":7},{"username":"zxbodya","commitsCount":19},{"username":"guybedford","commitsCount":27},{"username":"Andarist","commitsCount":55},{"username":"mAAdhaTTah","commitsCount":35},{"username":"marijnh","commitsCount":264},{"username":"danez","commitsCount":433},{"username":"RReverser","commitsCount":233},{"username":"chicoxyzzy","commitsCount":19},{"username":"danharper","commitsCount":19},{"username":"fedeci","commitsCount":8},{"username":"lydell","commitsCount":15},{"username":"noahlemen","commitsCount":7},{"username":"gaearon","commitsCount":19},{"username":"STRML","commitsCount":12},{"username":"zloirock","commitsCount":17},{"username":"Qantas94Heavy","commitsCount":9}],"commits":[{"from":"2021-02-12T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":14},{"from":"2021-01-20T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":72},{"from":"2020-11-21T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":200},{"from":"2020-08-23T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":389},{"from":"2020-02-20T00:00:00.000Z","to":"2021-02-19T00:00:00.000Z","count":768}],"statuses":[{"context":"codecov/project","state":"success"}]},"source":{"files":{"readmeSize":8019,"testsSize":13569263,"hasChangelog":true},"linters":["editorconfig","prettier"],"coverage":0.92,"outdatedDependencies":{"slash":{"required":"^1.0.0","stable":"3.0.0","latest":"3.0.0"},"path-is-absolute":{"required":"^1.0.1","stable":"2.0.0","latest":"2.0.0"},"json5":{"required":"^0.5.1","stable":"2.2.0","latest":"2.2.0"},"source-map":{"required":"^0.5.7","stable":"0.7.3","latest":"0.8.0-beta.0"},"debug":{"required":"^2.6.9","stable":"4.3.1","latest":"4.3.2"}}}},"evaluation":{"quality":{"carefulness":0.9199999999999999,"tests":0.988,"health":0.5,"branding":0.4},"popularity":{"communityInterest":44214,"downloadsCount":21454518.333333332,"downloadsAcceleration":-2591.275837138499,"dependentsCount":9877},"maintenance":{"releasesFrequency":0.28664383561643836,"commitsFrequency":1,"openIssues":1,"issuesDistribution":0.13398062668794675}},"error":{"unrecoverable":true,"tarballFile":"/tmp/npms-analyzer/babel-core-bsjpmxt7m48/tarball.tar.gz","name":"Error","message":"Tarball has too many files","stack":"Error: Tarball has too many files\n    at exec.spread.tap (/home/analyzer/npms-analyzer/source/lib/analyze/download/util/untar.js:46:33)\nFrom previous event:\n    at assertFilesCount (/home/analyzer/npms-analyzer/source/lib/analyze/download/util/untar.js:39:6)\n    at untar (/home/analyzer/npms-analyzer/source/lib/analyze/download/util/untar.js:94:12)\n    at tokenDealer.then (/home/analyzer/npms-analyzer/source/lib/analyze/download/github.js:89:16)\nFrom previous event:\n    at download (/home/analyzer/npms-analyzer/source/lib/analyze/download/github.js:86:6)\n    at /home/analyzer/npms-analyzer/source/lib/analyze/download/github.js:160:16\n    at createTmpDir.then (/home/analyzer/npms-analyzer/source/lib/analyze/download/index.js:92:9)\n    at Immediate.args.(anonymous function) (/usr/lib/node_modules/pm2/node_modules/event-loop-inspector/index.js:138:29)\n    at processImmediate (internal/timers.js:443:21)\nFrom previous event:\n    at download (/home/analyzer/npms-analyzer/source/lib/analyze/download/index.js:91:6)\n    at npmNano.getAsync.catch.then (/home/analyzer/npms-analyzer/source/lib/analyze/index.js:160:16)\n    at Request._callback (/home/analyzer/npms-analyzer/source/node_modules/nano/lib/nano.js:118:11)\n    at Request.self.callback (/home/analyzer/npms-analyzer/source/node_modules/request/request.js:185:22)\n    at Request.emit (events.js:193:13)\n    at Request.<anonymous> (/home/analyzer/npms-analyzer/source/node_modules/request/request.js:1161:10)\n    at Request.emit (events.js:193:13)\n    at IncomingMessage.<anonymous> (/home/analyzer/npms-analyzer/source/node_modules/request/request.js:1083:12)\nFrom previous event:\n    at analyze (/home/analyzer/npms-analyzer/source/lib/analyze/index.js:156:6)\n    at analyze.get.catch.then (/home/analyzer/npms-analyzer/source/cmd/consume.js:52:16)\n    at Request._callback (/home/analyzer/npms-analyzer/source/node_modules/nano/lib/nano.js:118:11)\n    at Request.self.callback (/home/analyzer/npms-analyzer/source/node_modules/request/request.js:185:22)\nFrom previous event:\n    at onMessage (/home/analyzer/npms-analyzer/source/cmd/consume.js:44:6)\n    at Object.queue.consume [as fn] (/home/analyzer/npms-analyzer/source/cmd/consume.js:117:40)\n    at Promise.try (/home/analyzer/npms-analyzer/source/lib/queue.js:308:46)\nFrom previous event:\n    at Promise.resolve._channel.consume (/home/analyzer/npms-analyzer/source/lib/queue.js:308:24)\n    at ConfirmChannel.BaseChannel.dispatchMessage (/home/analyzer/npms-analyzer/source/node_modules/amqplib/lib/channel.js:484:12)\n    at ConfirmChannel.BaseChannel.handleDelivery (/home/analyzer/npms-analyzer/source/node_modules/amqplib/lib/channel.js:493:15)\n    at ConfirmChannel.emit (events.js:193:13)\n    at /home/analyzer/npms-analyzer/source/node_modules/amqplib/lib/channel.js:279:10\n    at ConfirmChannel.content (/home/analyzer/npms-analyzer/source/node_modules/amqplib/lib/channel.js:332:9)\n    at ConfirmChannel.C.acceptMessageFrame (/home/analyzer/npms-analyzer/source/node_modules/amqplib/lib/channel.js:247:31)\n    at ConfirmChannel.C.accept (/home/analyzer/npms-analyzer/source/node_modules/amqplib/lib/channel.js:400:17)\n    at Connection.mainAccept [as accept] (/home/analyzer/npms-analyzer/source/node_modules/amqplib/lib/connection.js:64:33)\n    at Socket.go (/home/analyzer/npms-analyzer/source/node_modules/amqplib/lib/connection.js:478:48)\n    at Socket.emit (events.js:193:13)\n    at emitReadable_ (_stream_readable.js:550:12)\n    at args.(anonymous function) (/usr/lib/node_modules/pm2/node_modules/event-loop-inspector/index.js:138:29)\n    at processTicksAndRejections (internal/process/task_queues.js:81:17)","caughtAt":"2021-05-07T21:12:28.664Z"},"score":{"final":0.789586527952607,"detail":{"quality":0.9256863485286579,"popularity":0.7370742570554195,"maintenance":0.725441809784608}}}