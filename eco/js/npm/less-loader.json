{"analyzedAt":"2021-08-28T14:59:14.498Z","collected":{"metadata":{"name":"less-loader","scope":"unscoped","version":"10.0.1","description":"A Less loader for webpack. Compiles Less to CSS.","keywords":["webpack","loader","less","lesscss","less.js","css","preprocessor"],"date":"2021-07-02T12:53:35.686Z","author":{"name":"Johannes Ewald @jhnns"},"publisher":{"username":"evilebottnawi","email":"sheo13666q@gmail.com"},"maintainers":[{"username":"evilebottnawi","email":"sheo13666q@gmail.com"},{"username":"sokra","email":"tobias.koppers@googlemail.com"},{"username":"jhnns","email":"mail@johannesewald.de"},{"username":"michael-ciniawsky","email":"michael.ciniawsky@gmail.com"},{"username":"d3viant0ne","email":"wiens.joshua@gmail.com"},{"username":"bebraw","email":"bebraw@gmail.com"},{"username":"ericclemmons","email":"eric@smarterspam.com"},{"username":"thelarkinn","email":"sean.larkin@cuw.edu"}],"repository":{"type":"git","url":"git+https://github.com/webpack-contrib/less-loader.git"},"links":{"npm":"https://www.npmjs.com/package/less-loader","homepage":"https://github.com/webpack-contrib/less-loader","repository":"https://github.com/webpack-contrib/less-loader","bugs":"https://github.com/webpack-contrib/less-loader/issues"},"license":"MIT","dependencies":{"klona":"^2.0.4"},"devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@babel/preset-env":"^7.14.5","@commitlint/cli":"^12.1.4","@commitlint/config-conventional":"^12.1.4","@webpack-contrib/eslint-config-webpack":"^3.0.0","babel-jest":"^27.0.2","cross-env":"^7.0.3","del":"^6.0.0","del-cli":"^4.0.0","eslint":"^7.28.0","eslint-config-prettier":"^8.3.0","eslint-plugin-import":"^2.23.4","husky":"^6.0.0","jest":"^27.0.4","less":"^4.1.1","lint-staged":"^11.0.0","memfs":"^3.2.2","npm-run-all":"^4.1.5","prettier":"^2.3.1","standard-version":"^9.3.0","strip-ansi":"^7.0.0","webpack":"^5.39.1"},"peerDependencies":{"less":"^3.5.0 || ^4.0.0","webpack":"^5.0.0"},"releases":[{"from":"2021-07-29T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":0},{"from":"2021-05-30T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":4},{"from":"2021-03-01T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":7},{"from":"2020-08-28T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":14},{"from":"2019-08-29T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":21}],"hasTestScript":true,"hasSelectiveFiles":true,"readme":"<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# less-loader\n\nA Less loader for webpack. Compiles Less to CSS.\n\n## Getting Started\n\nTo begin, you'll need to install `less` and `less-loader`:\n\n```console\n$ npm install less less-loader --save-dev\n```\n\nThen add the loader to your `webpack` config. For example:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        loader: [\n          // compiles Less to CSS\n          \"style-loader\",\n          \"css-loader\",\n          \"less-loader\",\n        ],\n      },\n    ],\n  },\n};\n```\n\nAnd run `webpack` via your preferred method.\n\n## Options\n\n|                   Name                    |         Type         |         Default          | Description                                            |\n| :---------------------------------------: | :------------------: | :----------------------: | :----------------------------------------------------- |\n|     **[`lessOptions`](#lessoptions)**     | `{Object\\|Function}` | `{ relativeUrls: true }` | Options for Less.                                      |\n|  **[`additionalData`](#additionalData)**  | `{String\\|Function}` |       `undefined`        | Prepends/Appends `Less` code to the actual entry file. |\n|       **[`sourceMap`](#sourcemap)**       |     `{Boolean}`      |    `compiler.devtool`    | Enables/Disables generation of source maps.            |\n| **[`webpackImporter`](#webpackimporter)** |     `{Boolean}`      |          `true`          | Enables/Disables the default Webpack importer.         |\n|  **[`implementation`](#implementation)**  |  `{Object\\|String}`  |          `less`          | Setup Less implementation to use.                      |\n\n### `lessOptions`\n\nType: `Object|Function`\nDefault: `{ relativeUrls: true }`\n\nYou can pass any Less specific options to the `less-loader` through the `lessOptions` property in the [loader options](https://webpack.js.org/configuration/module/#rule-options-rule-query). See the [Less documentation](http://lesscss.org/usage/#command-line-usage-options) for all available options in dash-case. Since we're passing these options to Less programmatically, you need to pass them in camelCase here:\n\n#### `Object`\n\nUse an object to pass options through to Less.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n          },\n          {\n            loader: \"less-loader\",\n            options: {\n              lessOptions: {\n                strictMath: true,\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\nAllows setting the options passed through to Less based off of the loader context.\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"less-loader\",\n            options: {\n              lessOptions: (loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === \"styles/foo.less\") {\n                  return {\n                    paths: [\"absolute/path/c\", \"absolute/path/d\"],\n                  };\n                }\n\n                return {\n                  paths: [\"absolute/path/a\", \"absolute/path/b\"],\n                };\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `additionalData`\n\nType: `String|Function`\nDefault: `undefined`\n\nPrepends `Less` code before the actual entry file.\nIn this case, the `less-loader` will not override the source but just **prepend** the entry's content.\n\nThis is especially useful when some of your Less variables depend on the environment:\n\n> ℹ Since you're injecting code, this will break the source mappings in your entry file. Often there's a simpler solution than this, like multiple Less entry files.\n\n#### `String`\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"less-loader\",\n            options: {\n              additionalData: `@env: ${process.env.NODE_ENV};`,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\n##### Sync\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"less-loader\",\n            options: {\n              additionalData: (content, loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === \"styles/foo.less\") {\n                  return \"@value: 100px;\" + content;\n                }\n\n                return \"@value: 200px;\" + content;\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n##### Async\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"less-loader\",\n            options: {\n              additionalData: async (content, loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === \"styles/foo.less\") {\n                  return \"@value: 100px;\" + content;\n                }\n\n                return \"@value: 200px;\" + content;\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `sourceMap`\n\nType: `Boolean`\nDefault: depends on the `compiler.devtool` value\n\nBy default generation of source maps depends on the [`devtool`](https://webpack.js.org/configuration/devtool/) option. All values enable source map generation except `eval` and `false` value.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          \"style-loader\",\n          {\n            loader: \"css-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: \"less-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `webpackImporter`\n\nType: `Boolean`\nDefault: `true`\n\nEnables/Disables the default `webpack` importer.\n\nThis can improve performance in some cases. Use it with caution because aliases and `@import` at-rules starting with `~` will not work.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"less-loader\",\n            options: {\n              webpackImporter: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `implementation`\n\nType: `Object | String`\n\n> ⚠ less-loader compatible with Less 3 and 4 versions\n\nThe special `implementation` option determines which implementation of Less to use. Overrides the locally installed `peerDependency` version of `less`.\n\n**This option is only really useful for downstream tooling authors to ease the Less 3-to-4 transition.**\n\n#### Object\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"less-loader\",\n            options: {\n              implementation: require(\"less\"),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### String\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: \"less-loader\",\n            options: {\n              implementation: require.resolve(\"less\"),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### Normal usage\n\nChain the `less-loader` with the [`css-loader`](https://github.com/webpack-contrib/css-loader) and the [`style-loader`](https://github.com/webpack-contrib/style-loader) to immediately apply all styles to the DOM.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          {\n            loader: \"style-loader\", // creates style nodes from JS strings\n          },\n          {\n            loader: \"css-loader\", // translates CSS into CommonJS\n          },\n          {\n            loader: \"less-loader\", // compiles Less to CSS\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nUnfortunately, Less doesn't map all options 1-by-1 to camelCase. When in doubt, [check their executable](https://github.com/less/less.js/blob/3.x/bin/lessc) and search for the dash-case option.\n\n### Source maps\n\nTo enable sourcemaps for CSS, you'll need to pass the `sourceMap` property in the loader's options. If this is not passed, the loader will respect the setting for webpack source maps, set in `devtool`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  devtool: \"source-map\", // any \"source-map\"-like devtool is possible\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          \"style-loader\",\n          {\n            loader: \"css-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: \"less-loader\",\n            options: {\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nIf you want to edit the original Less files inside Chrome, [there's a good blog post](https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0). The blog post is about Sass but it also works for Less.\n\n### In production\n\nUsually, it's recommended to extract the style sheets into a dedicated file in production using the [MiniCssExtractPlugin](https://github.com/webpack-contrib/mini-css-extract-plugin). This way your styles are not dependent on JavaScript.\n\n### Imports\n\nFirst we try to use built-in `less` resolve logic, then `webpack` resolve logic (aliases and `~`).\n\n#### Webpack Resolver\n\n`webpack` provides an [advanced mechanism to resolve files](https://webpack.js.org/configuration/resolve/).\n`less-loader` applies a Less plugin that passes all queries to the webpack resolver if `less` could not resolve `@import`.\nThus you can import your Less modules from `node_modules`.\n\n```css\n@import \"bootstrap/less/bootstrap\";\n```\n\nUsing `~` is deprecated and can be removed from your code (**we recommend it**), but we still support it for historical reasons.\nWhy you can removed it? The loader will first try to resolve `@import` as relative, if it cannot be resolved, the loader will try to resolve `@import` inside [`node_modules`](https://webpack.js.org/configuration/resolve/#resolve-modules).\nJust prepend them with a `~` which tells webpack to look up the [`modules`](https://webpack.js.org/configuration/resolve/#resolve-modules).\n\n```css\n@import \"~bootstrap/less/bootstrap\";\n```\n\nDefault resolver options can be modified by [`resolve.byDependency`](https://webpack.js.org/configuration/resolve/#resolvebydependency):\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  devtool: \"source-map\", // any \"source-map\"-like devtool is possible\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n    ],\n  },\n  resolve: {\n    byDependency: {\n      // More options can be found here https://webpack.js.org/configuration/resolve/\n      less: {\n        mainFiles: [\"custom\"],\n      },\n    },\n  },\n};\n```\n\nIt's important to only prepend it with `~`, because `~/` resolves to the home-directory. webpack needs to distinguish between `bootstrap` and `~bootstrap`, because CSS and Less files have no special syntax for importing relative files. Writing `@import \"file\"` is the same as `@import \"./file\";`\n\n#### Less Resolver\n\nIf you specify the `paths` option, modules will be searched in the given `paths`. This is `less` default behavior. `paths` should be an array with absolute paths:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          {\n            loader: \"style-loader\",\n          },\n          {\n            loader: \"css-loader\",\n          },\n          {\n            loader: \"less-loader\",\n            options: {\n              lessOptions: {\n                paths: [path.resolve(__dirname, \"node_modules\")],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Plugins\n\nIn order to use [plugins](http://lesscss.org/usage/#plugins), simply set the `plugins` option like this:\n\n**webpack.config.js**\n\n```js\nconst CleanCSSPlugin = require('less-plugin-clean-css');\n\nmodule.exports = {\n  ...\n    {\n      loader: 'less-loader',\n      options: {\n        lessOptions: {\n          plugins: [\n            new CleanCSSPlugin({ advanced: true }),\n          ],\n        },\n      },\n    },\n  ...\n};\n```\n\n> ℹ️ Access to the [loader context](https://webpack.js.org/api/loaders/#the-loader-context) inside the custom plugin can be done using the `pluginManager.webpackLoaderContext` property.\n\n```js\nmodule.exports = {\n  install: function (less, pluginManager, functions) {\n    functions.add(\"pi\", function () {\n      // Loader context is available in `pluginManager.webpackLoaderContext`\n\n      return Math.PI;\n    });\n  },\n};\n```\n\n### Extracting style sheets\n\nBundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or [hot module replacement](https://webpack.js.org/concepts/hot-module-replacement/) in development. In production, on the other hand, it's not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a [FOUC](https://en.wikipedia.org/wiki/Flash_of_unstyled_content) might be visible. Thus it's often still better to have them as separate files in your final production build.\n\nThere are two possibilities to extract a style sheet from the bundle:\n\n- [`extract-loader`](https://github.com/peerigon/extract-loader) (simpler, but specialized on the css-loader's output)\n- [MiniCssExtractPlugin](https://github.com/webpack-contrib/mini-css-extract-plugin) (more complex, but works in all use-cases)\n\n### CSS modules gotcha\n\nThere is a known problem with Less and [CSS modules](https://github.com/css-modules/css-modules) regarding relative file paths in `url(...)` statements. [See this issue for an explanation](https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335).\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/less-loader.svg\n[npm-url]: https://npmjs.com/package/less-loader\n[node]: https://img.shields.io/node/v/less-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/less-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/less-loader\n[tests]: https://github.com/webpack-contrib/less-loader/workflows/less-loader/badge.svg\n[tests-url]: https://github.com/webpack-contrib/less-loader/actions\n[cover]: https://codecov.io/gh/webpack-contrib/less-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/less-loader\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=less-loader\n[size-url]: https://packagephobia.now.sh/result?p=less-loader"},"npm":{"downloads":[{"from":"2021-08-27T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":0},{"from":"2021-08-21T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":2122346},{"from":"2021-07-29T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":10542415},{"from":"2021-05-30T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":32127837},{"from":"2021-03-01T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":63806687},{"from":"2020-08-28T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":118973675}],"dependentsCount":4412,"starsCount":13},"github":{"starsCount":881,"forksCount":182,"subscribersCount":22,"issues":{"count":438,"openCount":2,"distribution":{"3600":110,"10800":20,"32400":29,"97200":32,"291600":28,"874800":22,"2624400":25,"7873200":30,"23619600":42,"70858800":76,"212576400":24},"isDisabled":false},"contributors":[{"username":"adi-pjackson","commitsCount":1},{"username":"mistic","commitsCount":4},{"username":"hiyuki","commitsCount":1},{"username":"ryanclark","commitsCount":10},{"username":"brandonbloom","commitsCount":1},{"username":"anikethsaha","commitsCount":1},{"username":"next0","commitsCount":1},{"username":"anshumanv","commitsCount":2},{"username":"wolever","commitsCount":3},{"username":"simon04","commitsCount":2},{"username":"kevinzwhuang","commitsCount":1},{"username":"gunta","commitsCount":1},{"username":"cap-Bernardito","commitsCount":38},{"username":"jhnns","commitsCount":96},{"username":"soilSpoon","commitsCount":2},{"username":"hasPatrickC","commitsCount":4},{"username":"amazingandyyy","commitsCount":1},{"username":"michael-ciniawsky","commitsCount":3},{"username":"ramwin","commitsCount":1},{"username":"snitin315","commitsCount":6},{"username":"shellscape","commitsCount":1},{"username":"d3viant0ne","commitsCount":8},{"username":"mtscout6","commitsCount":2},{"username":"sokra","commitsCount":40},{"username":"SpaceK33z","commitsCount":5},{"username":"spalger","commitsCount":1},{"username":"alexander-akait","commitsCount":33},{"username":"n1ru4l","commitsCount":1},{"username":"ztamizzen","commitsCount":2},{"username":"HQidea","commitsCount":1},{"username":"Munter","commitsCount":1},{"username":"BANOnotIT","commitsCount":1},{"username":"mattlewis92","commitsCount":2},{"username":"thorn0","commitsCount":1},{"username":"sliwey","commitsCount":1},{"username":"dthielman","commitsCount":1},{"username":"fengmk2","commitsCount":1},{"username":"jakwuh","commitsCount":1},{"username":"sophiebits","commitsCount":2},{"username":"jpvanhal","commitsCount":1}],"commits":[{"from":"2021-08-21T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":1},{"from":"2021-07-29T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":4},{"from":"2021-05-30T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":17},{"from":"2021-03-01T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":28},{"from":"2020-08-28T00:00:00.000Z","to":"2021-08-28T00:00:00.000Z","count":54}],"statuses":[{"context":"codecov/project","state":"success"},{"context":"codecov/patch","state":"success"}]},"source":{"files":{"readmeSize":16730,"testsSize":100679,"hasChangelog":true},"badges":[{"urls":{"original":"https://img.shields.io/npm/v/less-loader.svg","shields":"https://img.shields.io/npm/v/less-loader.svg","content":"https://img.shields.io/npm/v/less-loader.json"},"info":{"service":"npm","type":"version","modifiers":{"type":"v"}}},{"urls":{"original":"https://david-dm.org/webpack-contrib/less-loader.svg","service":"https://david-dm.org/webpack-contrib/less-loader.svg","shields":"https://img.shields.io/david/webpack-contrib/less-loader.svg","content":"https://img.shields.io/david/webpack-contrib/less-loader.json"},"info":{"service":"david","type":"dependencies","modifiers":{"statusType":"normal"}}}],"linters":["editorconfig","eslint","prettier"],"coverage":0.97}},"evaluation":{"quality":{"carefulness":0.9999999999999999,"tests":0.9954999999999999,"health":1,"branding":0.3},"popularity":{"communityInterest":1138,"downloadsCount":10709279,"downloadsAcceleration":13496.219958143076,"dependentsCount":4412},"maintenance":{"releasesFrequency":1,"commitsFrequency":0.9,"openIssues":1,"issuesDistribution":0.9}},"score":{"final":0.8629501340768891,"detail":{"quality":0.9946636333051908,"popularity":0.6130619684731209,"maintenance":0.9999410146278274}}}