{"analyzedAt":"2021-08-20T11:30:15.660Z","collected":{"metadata":{"name":"ember-cli-htmlbars","scope":"unscoped","version":"5.7.1","description":"A library for adding htmlbars to ember CLI","keywords":["ember-addon","ember-cli"],"date":"2021-03-18T23:23:29.244Z","author":{"name":"Jonathan Jackson & Chase McCarthy"},"publisher":{"username":"rwjblue","email":"me@rwjblue.com"},"maintainers":[{"username":"rondale-sc","email":"jonathan.jackson1@me.com"},{"username":"rwjblue","email":"me@rwjblue.com"},{"username":"turbo87","email":"tobias.bieniek@gmail.com"},{"username":"stefanpenner","email":"stefan.penner@gmail.com"},{"username":"ember-cli","email":"stefan.penner+ember-cli@gmail.com"}],"repository":{"type":"git","url":"git+ssh://git@github.com/ember-cli/ember-cli-htmlbars.git"},"links":{"npm":"https://www.npmjs.com/package/ember-cli-htmlbars","homepage":"https://github.com/ember-cli/ember-cli-htmlbars","repository":"https://github.com/ember-cli/ember-cli-htmlbars","bugs":"https://github.com/ember-cli/ember-cli-htmlbars/issues"},"license":"MIT","dependencies":{"@ember/edition-utils":"^1.2.0","babel-plugin-htmlbars-inline-precompile":"^5.0.0","broccoli-debug":"^0.6.5","broccoli-persistent-filter":"^3.1.2","broccoli-plugin":"^4.0.3","common-tags":"^1.8.0","ember-cli-babel-plugin-helpers":"^1.1.1","ember-cli-version-checker":"^5.1.2","fs-tree-diff":"^2.0.1","hash-for-dep":"^1.5.1","heimdalljs-logger":"^0.1.10","json-stable-stringify":"^1.0.1","semver":"^7.3.4","silent-error":"^1.1.1","strip-bom":"^4.0.0","walk-sync":"^2.2.0"},"devDependencies":{"@babel/core":"^7.12.10","@babel/plugin-proposal-class-properties":"^7.13.0","@babel/plugin-proposal-decorators":"^7.12.12","@babel/plugin-transform-runtime":"^7.11.5","@babel/plugin-transform-typescript":"^7.10.1","@babel/runtime":"^7.13.8","@ember/optional-features":"^1.3.0","babel-eslint":"^10.1.0","babel-plugin-debug-macros":"^0.3.3","broccoli-merge-trees":"^4.2.0","broccoli-test-helper":"^2.0.0","chai":"^4.2.0","co":"^4.6.0","console-ui":"^3.1.2","core-object":"^3.1.5","ember-cli":"~3.25.2","ember-cli-app-version":"^4.0.0","ember-cli-babel":"^7.25.0","ember-cli-dependency-checker":"^3.2.0","ember-cli-inject-live-reload":"^2.0.2","ember-compatibility-helpers":"^1.2.2","ember-export-application-global":"^2.0.1","ember-load-initializers":"^2.1.1","ember-maybe-import-regenerator":"^0.1.6","ember-qunit":"^4.6.0","ember-resolver":"^8.0.0","ember-source":"~3.25.0","ember-source-channel-url":"^3.0.0","ember-template-lint":"^2.9.1","ember-try":"^1.4.0","eslint":"^7.21.0","eslint-config-prettier":"^8.1.0","eslint-plugin-ember":"^8.13.0","eslint-plugin-mocha":"^8.0.0","eslint-plugin-node":"^11.1.0","eslint-plugin-prettier":"^3.1.4","fixturify":"^2.1.0","loader.js":"^4.7.0","mocha":"^8.3.0","module-name-inliner":"link:./tests/dummy/lib/module-name-inliner","prettier":"^2.2.1","qunit-dom":"^1.6.0","release-it":"^14.2.1","release-it-lerna-changelog":"^3.1.0"},"releases":[{"from":"2021-07-21T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":0},{"from":"2021-05-22T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":0},{"from":"2021-02-21T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":12},{"from":"2020-08-20T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":14},{"from":"2019-08-21T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":40}],"hasTestScript":true,"hasSelectiveFiles":true,"readme":"# Ember CLI HTMLBars\n\n<a href=\"https://github.com/ember-cli/ember-cli-htmlbars/actions\"><img alt=\"Build Status\" src=\"https://github.com/ember-cli/ember-cli-htmlbars/workflows/CI/badge.svg\"></a>\n\n## Compatibility\n\n* Ember.js v3.8 or above\n* Ember CLI v3.8 or above\n* Node.js v10 or above\n\n## Tagged Template Usage / Migrating from `htmlbars-inline-precompile`\n\nStarting with version 4.0, this addon now includes the testing helper from [ember-cli-htmlbars-inline-precompile](https://github.com/ember-cli/ember-cli-htmlbars-inline-precompile)\n\nThis will require an update to the imports of the `hbs` helper in your tests:\n\nPrior syntax:\n\n```\nimport hbs from 'htmlbars-inline-precompile';\n\n...\n\nawait render(hbs`\n  <MyComponent />\n`);\n```\n\nNew syntax:\n\n```\nimport { hbs } from 'ember-cli-htmlbars';\n\n...\n\nawait render(hbs`\n  <MyComponent />\n`);\n```\n\nThere is a [codemod](https://github.com/ember-codemods/ember-cli-htmlbars-inline-precompile-codemod) available to automate this change.\n\n## Additional Trees\n\nFor addons which want additional customizations, they are able to interact with\nthis addon directly.\n\n```ts\ninterface EmberCLIHTMLBars {\n  /**\n    Supports easier transpilation of non-standard input paths (e.g. to transpile\n    a non-addon NPM dependency) while still leveraging the logic within\n    ember-cli-htmlbars for transpiling (e.g. custom AST transforms, colocation, etc).\n  */\n  transpileTree(inputTree: BroccoliTree): BroccoliTree;\n}\n```\n\n### `transpileTree` usage\n\n```js\n// find the ember-cli-htmlbars addon\nlet htmlbarsAddon = this.addons.find(addon => addon.name === 'ember-cli-htmlbars');\n\n// invoke .transpileTree passing in the custom input tree\nlet transpiledCustomTree = htmlbarsAddon.transpileTree(someCustomTree);\n```\n\n## Adding Custom Plugins\n\nYou can add custom plugins to be used during transpilation of the `addon/` or\n`addon-test-support/` trees of your addon (or the `app/` and `tests/` trees of an application)\nby registering a custom AST transform.\n\n```js\nvar SomeTransform = require('./some-path/transform');\n\nmodule.exports = {\n  name: 'my-addon-name',\n\n  included: function() {\n    // we have to wrap these in an object so the ember-cli\n    // registry doesn't try to call `new` on them (new is actually\n    // called within htmlbars when compiling a given template).\n    this.app.registry.add('htmlbars-ast-plugin', {\n      name: 'some-transform',\n      plugin: SomeTransform\n    });\n  }\n};\n```\n\n### Options for registering a plugin\n\n* `name` - String. The name of the AST transform for debugging purposes.\n* `plugin` - A function of type [`ASTPluginBuilder`](https://github.com/glimmerjs/glimmer-vm/blob/master/packages/%40glimmer/syntax/lib/parser/tokenizer-event-handlers.ts#L329-L341).\n* `dependencyInvalidation` - Boolean. A flag that indicates the AST Plugin may, on a per-template basis, depend on other files that affect its output.\n* `cacheKey` - function that returns any JSON-compatible value - The value returned is used to invalidate the persistent cache across restarts, usually in the case of a dependency or configuration change.\n* `baseDir` - `() => string`. A function that returns the directory on disk of the npm module for the plugin. If provided, a basic cache invalidation is performed if any of the dependencies change (e.g. due to a npm install/upgrade).\n\n### Implementing Dependency Invalidation in an AST Plugin\n\nPlugins that set the `dependencyInvalidation` option to `true` can provide function for the `plugin` of type `ASTDependencyPlugin` as given below.\n\nNote: the `plugin` function is invoked without a value for `this` in context.\n\n```ts\nimport {ASTPluginBuilder, ASTPlugin} from \"@glimmer/syntax/dist/types/lib/parser/tokenizer-event-handlers\";\n\nexport type ASTDependencyPlugin = ASTPluginWithDepsBuilder | ASTPluginBuilderWithDeps;\n\nexport interface ASTPluginWithDepsBuilder {\n  (env: ASTPluginEnvironment): ASTPluginWithDeps;\n}\n\nexport interface ASTPluginBuilderWithDeps extends ASTPluginBuilder {\n  /**\n   * @see {ASTPluginWithDeps.dependencies} below.\n   **/\n  dependencies(relativePath): string[];\n}\n\nexport interface ASTPluginWithDeps extends ASTPlugin {\n  /**\n   * If this method exists, it is called with the relative path to the current\n   * file just before processing starts. Use this method to reset the\n   * dependency tracking state associated with the file.\n   */\n  resetDependencies?(relativePath: string): void;\n  /**\n   * This method is called just as the template finishes being processed.\n   *\n   * @param relativePath {string} A relative path to the file that may have dependencies.\n   * @return {string[]} paths to files that are a dependency for the given\n   * file. Any relative paths returned by this method are taken to be relative\n   * to the file that was processed.\n   */\n  dependencies(relativePath: string): string[];\n}\n```\n\n## Precompile HTMLBars template strings within other addons\n\n```javascript\nmodule.exports = {\n  name: 'my-addon-name',\n\n  setupPreprocessorRegistry: function(type, registry) {\n    var htmlbarsPlugin = registry.load('template').find(function(plugin) {\n      return plugin.name === 'ember-cli-htmlbars';\n    });\n\n    // precompile any htmlbars template string via the precompile method on the\n    // ember-cli-htmlbars plugin wrapper; `precompiled` will be a string of the\n    // form:\n    //\n    //   Ember.HTMLBars.template(function() {...})\n    //\n    var precompiled = htmlbarsPlugin.precompile(\"{{my-component}}\");\n  }\n};\n```\n\n### Custom Template Compiler\n\nYou can still provide a custom path to the template compiler (e.g. to test\ncustom template compiler tweaks in an application) by:\n\n```js\n// ember-cli-build.js\n\nmodule.exports = function(defaults) {\n  let app = new EmberApp(defaults, {\n    'ember-cli-htmlbars': {\n      templateCompilerPath: `some_path/to/ember-template-compiler.js`,\n    }\n  });\n};\n```\n\n## Using as a Broccoli Plugin\n\n```javascript\nvar HtmlbarsCompiler = require('ember-cli-htmlbars');\n\nvar templateTree = new HtmlbarsCompiler('app/templates', {\n  isHTMLBars: true,\n\n  // provide the templateCompiler that is paired with your Ember version\n  templateCompiler: require('./bower_components/ember/ember-template-compiler')\n});\n```"},"npm":{"downloads":[{"from":"2021-08-19T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":110866},{"from":"2021-08-13T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":523360},{"from":"2021-07-21T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":2246687},{"from":"2021-05-22T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":6634672},{"from":"2021-02-21T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":13945218},{"from":"2020-08-20T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":25583174}],"dependentsCount":2921,"starsCount":1},"github":{"starsCount":67,"forksCount":51,"subscribersCount":18,"issues":{"count":730,"openCount":33,"distribution":{"3600":281,"10800":91,"32400":43,"97200":60,"291600":31,"874800":57,"2624400":66,"7873200":53,"23619600":24,"70858800":15,"212576400":9},"isDisabled":false},"contributors":[{"username":"danmcclain","commitsCount":1},{"username":"rwjblue","commitsCount":248},{"username":"elwayman02","commitsCount":1},{"username":"jakehow","commitsCount":1},{"username":"krisselden","commitsCount":1},{"username":"kategengler","commitsCount":1},{"username":"karl-sjogren","commitsCount":1},{"username":"chancancode","commitsCount":8},{"username":"rondale-sc","commitsCount":8},{"username":"locks","commitsCount":4},{"username":"chriskrycho","commitsCount":1},{"username":"stefanpenner","commitsCount":36},{"username":"pangratz","commitsCount":2},{"username":"dfreeman","commitsCount":4},{"username":"ebryn","commitsCount":1},{"username":"kamalaknn","commitsCount":1},{"username":"max","commitsCount":1},{"username":"mixonic","commitsCount":1},{"username":"tricknotes","commitsCount":1},{"username":"jobackman","commitsCount":1},{"username":"xg-wang","commitsCount":1},{"username":"hemp","commitsCount":2},{"username":"msranade","commitsCount":1},{"username":"alexlafroscia","commitsCount":1},{"username":"greenkeeperio-bot","commitsCount":4},{"username":"kanongil","commitsCount":1},{"username":"dependabot-preview[bot]","commitsCount":7},{"username":"chriseppstein","commitsCount":27},{"username":"dependabot[bot]","commitsCount":29},{"username":"thec0keman","commitsCount":1},{"username":"SlexAxton","commitsCount":2},{"username":"camerondubas","commitsCount":1},{"username":"Turbo87","commitsCount":5},{"username":"jamescdavis","commitsCount":1}],"commits":[{"from":"2021-08-13T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":0},{"from":"2021-07-21T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":0},{"from":"2021-05-22T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":5},{"from":"2021-02-21T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":56},{"from":"2020-08-20T00:00:00.000Z","to":"2021-08-20T00:00:00.000Z","count":93}]},"source":{"files":{"readmeSize":6185,"testsSize":105007,"hasNpmIgnore":true,"hasChangelog":true},"linters":["editorconfig","eslint","jshint","prettier"],"outdatedDependencies":{"strip-bom":{"required":"^4.0.0","stable":"5.0.0","latest":"5.0.0"},"walk-sync":{"required":"^2.2.0","stable":"3.0.0","latest":"3.0.0"}}}},"evaluation":{"quality":{"carefulness":0.9999999999999999,"tests":0.6,"health":0.75,"branding":0},"popularity":{"communityInterest":171,"downloadsCount":2211557.3333333335,"downloadsAcceleration":3045.306164383561,"dependentsCount":2921},"maintenance":{"releasesFrequency":1,"commitsFrequency":0.9145753424657534,"openIssues":1,"issuesDistribution":0.7474904846223982}},"score":{"final":0.7595452366203537,"detail":{"quality":0.8359814206057153,"popularity":0.45455542589235043,"maintenance":0.999018318218047}}}