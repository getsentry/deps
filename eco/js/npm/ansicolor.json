{"analyzedAt":"2021-08-08T00:17:08.966Z","collected":{"metadata":{"name":"ansicolor","scope":"unscoped","version":"1.1.95","description":"A JavaScript ANSI color/style management. ANSI parsing. ANSI to CSS. Small, clean, no dependencies.","keywords":["ANSI","ansi to css","code","codes","color","colors","text","command-line","command line","sequence","control","formatting","cli","shell","escape","escapes","red","green","blue","cyan","magenta","yellow","dim","bright","background","color logging","colored logging","colored log","log with colors","log colors","color helper","colorize","color output","ansi color","ansi-color","ansicolor","ansi coloring","colored strings","terminal colors","ansi styles","strip ansi codes","parse ansi","ansi parser","ansi to html","ansi for web","web ansi","css ansi","terminal colors emulation","console","console colors","ansi console","logging","log","chrome","chrome devtools","web inspector","console.log","developer tools","devtools","tty colors","tty","rainbow"],"date":"2021-06-18T21:38:23.310Z","author":{"name":"Vitaly Gordon","email":"rocket.mind@gmail.com","username":"xpl"},"publisher":{"username":"xpl","email":"rocket.mind@gmail.com"},"maintainers":[{"username":"xpl","email":"rocket.mind@gmail.com"},{"username":"x84","email":"igor.kroitor@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/xpl/ansicolor.git"},"links":{"npm":"https://www.npmjs.com/package/ansicolor","homepage":"https://xpl.github.io/ansicolor","repository":"https://github.com/xpl/ansicolor","bugs":"https://github.com/xpl/ansicolor/issues"},"license":"Unlicense","devDependencies":{"@types/node":"^13.7.0","babel-cli":"^6.26.0","babel-preset-es2015":"^6.24.1","coveralls":"^3.0.3","eslint":"^4.19.1","istanbul":"^0.4.5","mocha":"^5.2.0","nyc":"^14.1.1"},"releases":[{"from":"2021-07-09T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":0},{"from":"2021-05-10T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":3},{"from":"2021-02-09T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":3},{"from":"2020-08-08T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":3},{"from":"2019-08-09T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":4}],"hasTestScript":true,"readme":"# ansicolor\n\n[![Build Status](https://travis-ci.org/xpl/ansicolor.svg?branch=master)](https://travis-ci.org/xpl/ansicolor) [![Coverage Status](https://coveralls.io/repos/github/xpl/ansicolor/badge.svg)](https://coveralls.io/github/xpl/ansicolor) [![npm](https://img.shields.io/npm/v/ansicolor.svg)](https://npmjs.com/package/ansicolor) [![dependencies Status](https://david-dm.org/xpl/ansicolor/status.svg)](https://david-dm.org/xpl/ansicolor)\n\nA JavaScript ANSI color/style management. ANSI parsing. ANSI to CSS. Small, clean, no dependencies.\n\n```bash\nnpm install ansicolor\n```\n\n## What For\n\n- String coloring with ANSI escape codes\n- Solves the [style hierarchy problem](#why-another-one) (when other similar tools fail)\n- Parsing/removing ANSI style data from strings\n- Converting ANSI styles to CSS or a Chrome DevTools-compatible output\n- A middleware for your [platform-agnostic logging system](https://github.com/xpl/ololog)\n\n## Why Another One?\n\nOther tools lack consistency, failing to solve a simple hierarchy problem:\n\n```javascript\nrequire ('colors') // a popular color utility\n\nconsole.log (('foo'.cyan + 'bar').red)\n```\n\n![pic](http://cdn.jpg.wtf/futurico/85/9b/1470626860-859b24350e22df74fd7497e9dc0d8d42.png)\n\nWTF?! The `bar` word above should be rendered in red, but it's not! That sucks. It's because ANSI codes are linear, not hierarchical (as with XML/HTML). A special kind of magic is needed to make this work. **Ansicolor** does that magic for you:\n\n```javascript\nrequire ('ansicolor').nice // .nice for unsafe String extensions\n\nconsole.log (('foo'.cyan + 'bar').red)\n```\n\n![pic](http://cdn.jpg.wtf/futurico/3c/61/1470626989-3c61b64d0690b0b413be367841650426.png)\n\nNice!\n\n## Crash Course\n\nImporting (as methods):\n\n```javascript\nimport { green, inverse, bgLightCyan, underline, dim } from 'ansicolor'\n```\n```javascript\nconst { green, inverse, bgLightCyan, underline, dim } = require ('ansicolor')\n```\n\nUsage:\n\n```javascript\nconsole.log ('foo' + green (inverse (bgLightCyan ('bar')) + 'baz') + 'qux')\n```\n```javascript\nconsole.log (underline.bright.green ('foo' + dim.red.bgLightCyan ('bar'))) // method chaining\n```\n\nImporting (as object):\n\n```javascript\nimport { ansicolor, ParsedSpan } from 'ansicolor' // along with type definitions\n```\n```javascript\nimport ansicolor from 'ansicolor'\n```\n\n### Nice Mode (not recommended)\n\n```javascript\nconst ansi = require ('ansicolor').nice\n```\n\nThe `('ansicolor').nice` export defines styling APIs on the `String` prototype directly. It uses an ad-hoc DSL (sort of) for infix-style string coloring. The `nice` is convenient, but not safe, avoid using it in public modules, as it alters global objects, and that might cause potential hard-to-debug compatibility issues.\n\n```javascript\nconsole.log ('foo'.red.bright + 'bar'.bgYellow.underline.dim)\n```\n\n### Supported Styles\n\n```javascript\n'foreground colors'\n    .red.green.yellow.blue.magenta.cyan.white.darkGray.black\n```\n```javascript\n'light foreground colors'\n    .lightRed.lightGreen.lightYellow.lightBlue.lightMagenta.lightCyan.lightGray\n```\n```javascript\n'background colors'\n    .bgRed.bgGreen.bgYellow.bgBlue.bgMagenta.bgCyan.bgWhite.bgDarkGray.bgBlack\n```\n```javascript\n'light background colors'\n    .bgLightRed.bgLightGreen.bgLightYellow.bgLightBlue.bgLightMagenta.bgLightCyan.bgLightGray\n```\n```javascript\n'styles'\n    .bright.dim.italic.underline.inverse // your platform should support italic\n```\n\nYou also can obtain all those style names (for reflection purposes):\n\n```javascript\nconst { names } = require ('ansicolor')\n\nnames // ['red', 'green', ...\n```\n\n## Removing ANSI Styles From Strings\n\n```javascript\nconst { strip } = require ('ansicolor')\n\nstrip ('\\u001b[0m\\u001b[4m\\u001b[42m\\u001b[31mfoo\\u001b[39m\\u001b[49m\\u001b[24mfoo\\u001b[0m')) // 'foofoo'\n```\n\n## Converting to CSS/HTML\n\nInspection of ANSI styles in arbitrary strings is essential when implementing platform-agnostic logging — that piece of code is available under command line interface and in a browser as well. Here's an example of how you would parse a colored string into an array-like structure. That structure can be traversed later to build HTML/JSON/XML or any other markup/syntax.\n\n```javascript\nconst { parse } = require ('ansicolor')\n\nconst parsed = parse ('foo'.bgLightRed.bright.italic + 'bar'.red.dim)\n```\n\nThe `ansi.parse ()` method will return a pseudo-array of styled spans, you can iterate over it with a `for ... of` loop and convert it to an array with the *spread operator* (`...`). Also, there's the `.spans` property for obtaining the already-spread array directly:\n\n```javascript\nassert.deepEqual (parsed.spans /* or [...parsed] */,\n\n    [ { css: 'font-weight: bold;font-style: italic;background:rgba(255,51,0,1);',\n        italic: true,\n        bold: true,\n        color: { bright: true },\n        bgColor: { name: 'lightRed' },\n        text: 'foo' },\n\n      { css: 'color:rgba(204,0,0,0.5);',\n        color: { name: 'red', dim: true },\n        text: 'bar' } ])\n```\n\n### Custom Color Themes\n\nYou can change default RGB values (won't work in terminals, affects only the ANSI→CSS transformation part):\n\n```javascript\nconst ansi = require ('ansicolor')\n\nansi.rgb = {\n\n    black:        [0,     0,   0],    \n    darkGray:     [100, 100, 100],\n    lightGray:    [200, 200, 200],\n    white:        [255, 255, 255],\n\n    red:          [204,   0,   0],\n    lightRed:     [255,  51,   0],\n    \n    green:        [0,   204,   0],\n    lightGreen:   [51,  204,  51],\n    \n    yellow:       [204, 102,   0],\n    lightYellow:  [255, 153,  51],\n    \n    blue:         [0,     0, 255],\n    lightBlue:    [26,  140, 255],\n    \n    magenta:      [204,   0, 204],\n    lightMagenta: [255,   0, 255],\n    \n    cyan:         [0,   153, 255],\n    lightCyan:    [0,   204, 255],\n}\n```\n\n## Chrome DevTools Compatibility\n\nWeb browsers usually implement their own proprietary CSS-based color formats for `console.log` and most of them fail to display standard ANSI colors. _Ansicolor_ offers you a helper method to convert ANSI-styled strings to browser-compatible argument lists acceptable by Chrome's `console.log`:\n\n```javascript\nconst { bgGreen, red, parse } = require ('ansicolor')\n\nconst string = 'foo' + bgGreen (red.underline.bright.inverse ('bar') + 'baz')\nconst parsed = parse (string)\n\nconsole.log (...parsed.asChromeConsoleLogArguments) // prints with colors in Chrome!\n```\n\nHere's what the format looks like:\n\n```javascript\nparsed.asChromeConsoleLogArguments // [ \"%cfoo%cbar%cbaz\",\n                                   //   \"\",\n                                   //   \"font-weight: bold;text-decoration: underline;background:rgba(255,51,0,1);color:rgba(0,204,0,1);\",\n                                   //   \"background:rgba(0,204,0,1);\"\n                                   // ]\n```\n\nPlay with this feature online: [demo page](https://xpl.github.io/ololog/). Open the DevTools console and type expressions in the input box to see colored console output.\n\nHappy logging!\n\n## Projects That Use `ansicolor`\n\n- [**Ololog!**](https://github.com/xpl/ololog) — a better `console.log` for the log-driven debugging junkies\n- [**CCXT**](https://github.com/ccxt/ccxt) — a cryptocurrency trading API with 130+ exchanges\n- [**Grafana**](https://github.com/grafana/grafana) — beautiful monitoring & metric analytics & dashboards"},"npm":{"downloads":[{"from":"2021-08-07T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":0},{"from":"2021-08-01T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":19864},{"from":"2021-07-09T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":72332},{"from":"2021-05-10T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":190231},{"from":"2021-02-09T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":394589},{"from":"2020-08-08T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":707110}],"dependentsCount":31,"starsCount":5},"github":{"homepage":"http://npmjs.com/package/ansicolor","starsCount":76,"forksCount":13,"subscribersCount":7,"issues":{"count":16,"openCount":1,"distribution":{"3600":6,"10800":0,"32400":1,"97200":4,"291600":0,"874800":1,"2624400":1,"7873200":0,"23619600":1,"70858800":2,"212576400":0},"isDisabled":false},"contributors":[{"username":"ifrost","commitsCount":1},{"username":"brettz9","commitsCount":1},{"username":"xpl","commitsCount":211},{"username":"kroitor","commitsCount":4},{"username":"dependabot[bot]","commitsCount":1},{"username":"rayfoss","commitsCount":2},{"username":"a631807682","commitsCount":1}],"commits":[{"from":"2021-08-01T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":0},{"from":"2021-07-09T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":0},{"from":"2021-05-10T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":6},{"from":"2021-02-09T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":6},{"from":"2020-08-08T00:00:00.000Z","to":"2021-08-08T00:00:00.000Z","count":6}],"statuses":[{"context":"Scrutinizer","state":"pending"}]},"source":{"files":{"readmeSize":7327,"testsSize":9308,"hasNpmIgnore":true,"hasChangelog":true},"badges":[{"urls":{"original":"https://travis-ci.org/xpl/ansicolor.svg?branch=master","service":"https://api.travis-ci.org/xpl/ansicolor.svg?branch=master","shields":"https://img.shields.io/travis/xpl/ansicolor/master.svg","content":"https://img.shields.io/travis/xpl/ansicolor/master.json"},"info":{"service":"travis","type":"build","modifiers":{"branch":"master"}}},{"urls":{"original":"https://coveralls.io/repos/github/xpl/ansicolor/badge.svg","service":"https://coveralls.io/repos/github/xpl/ansicolor/badge.svg","shields":"https://img.shields.io/coveralls/xpl/ansicolor.svg","content":"https://img.shields.io/coveralls/xpl/ansicolor.json"},"info":{"service":"coveralls","type":"coverage"}},{"urls":{"original":"https://img.shields.io/npm/v/ansicolor.svg","shields":"https://img.shields.io/npm/v/ansicolor.svg","content":"https://img.shields.io/npm/v/ansicolor.json"},"info":{"service":"npm","type":"version","modifiers":{"type":"v"}}},{"urls":{"original":"https://david-dm.org/xpl/ansicolor/status.svg","service":"https://david-dm.org/xpl/ansicolor/status.svg","shields":"https://img.shields.io/david/xpl/ansicolor/status.svg","content":"https://img.shields.io/david/xpl/ansicolor/status.json"},"info":{"service":"david","type":"dependencies","modifiers":{"statusType":"normal"}}}],"linters":["eslint"],"coverage":0.99}},"evaluation":{"quality":{"carefulness":0.9999999999999999,"tests":0.8234999999999999,"health":1,"branding":1},"popularity":{"communityInterest":108,"downloadsCount":63410.333333333336,"downloadsAcceleration":182.1631088280061,"dependentsCount":31},"maintenance":{"releasesFrequency":0.9,"commitsFrequency":0.9,"openIssues":1,"issuesDistribution":0.9}},"score":{"final":0.7084408508618509,"detail":{"quality":0.9764340208333268,"popularity":0.18727873901349712,"maintenance":0.999894531306083}}}