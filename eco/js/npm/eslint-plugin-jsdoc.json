{"analyzedAt":"2021-08-25T03:06:22.221Z","collected":{"metadata":{"name":"eslint-plugin-jsdoc","scope":"unscoped","version":"36.0.8","description":"JSDoc linting rules for ESLint.","keywords":["eslint","plugin","jsdoc"],"date":"2021-08-25T03:03:21.312Z","author":{"name":"Gajus Kuizinas","email":"gajus@gajus.com","url":"http://gajus.com","username":"gajus"},"publisher":{"username":"gajus","email":"gajus@gajus.com"},"maintainers":[{"username":"gajus","email":"gajus@gajus.com"}],"repository":{"type":"git","url":"git+https://github.com/gajus/eslint-plugin-jsdoc.git"},"links":{"npm":"https://www.npmjs.com/package/eslint-plugin-jsdoc","homepage":"https://github.com/gajus/eslint-plugin-jsdoc#readme","repository":"https://github.com/gajus/eslint-plugin-jsdoc","bugs":"https://github.com/gajus/eslint-plugin-jsdoc/issues"},"license":"BSD-3-Clause","dependencies":{"@es-joy/jsdoccomment":"0.10.8","comment-parser":"1.2.4","debug":"^4.3.2","esquery":"^1.4.0","jsdoc-type-pratt-parser":"^1.1.1","lodash":"^4.17.21","regextras":"^0.8.0","semver":"^7.3.5","spdx-expression-parse":"^3.0.1"},"devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.15.0","@babel/eslint-parser":"^7.15.0","@babel/node":"^7.14.9","@babel/plugin-syntax-class-properties":"^7.12.13","@babel/plugin-transform-flow-strip-types":"^7.14.5","@babel/preset-env":"^7.15.0","@babel/register":"^7.15.3","@hkdobrev/run-if-changed":"^0.3.1","@typescript-eslint/parser":"^4.29.3","babel-plugin-add-module-exports":"^1.0.4","babel-plugin-istanbul":"^6.0.0","chai":"^4.3.4","cross-env":"^7.0.3","eslint":"7.32.0","eslint-config-canonical":"^26.2.3","gitdown":"^3.1.4","glob":"^7.1.7","husky":"^7.0.2","lint-staged":"^11.1.2","mocha":"^9.1.0","nyc":"^15.1.0","open-editor":"^3.0.0","rimraf":"^3.0.2","semantic-release":"^17.4.6","typescript":"^4.3.5"},"peerDependencies":{"eslint":"^6.0.0 || ^7.0.0"},"releases":[{"from":"2021-07-26T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":5},{"from":"2021-05-27T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":26},{"from":"2021-02-26T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":55},{"from":"2020-08-25T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":115},{"from":"2019-08-26T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":251}],"hasTestScript":true,"readme":"<a name=\"eslint-plugin-jsdoc\"></a>\n# eslint-plugin-jsdoc\n\n[![GitSpo Mentions](https://gitspo.com/badges/mentions/gajus/eslint-plugin-jsdoc?style=flat-square)](https://gitspo.com/mentions/gajus/eslint-plugin-jsdoc)\n[![NPM version](https://img.shields.io/npm/v/eslint-plugin-jsdoc.svg?style=flat-square)](https://www.npmjs.org/package/eslint-plugin-jsdoc)\n[![Travis build status](https://img.shields.io/travis/gajus/eslint-plugin-jsdoc/master.svg?style=flat-square)](https://travis-ci.org/gajus/eslint-plugin-jsdoc)\n[![js-canonical-style](https://img.shields.io/badge/code%20style-canonical-blue.svg?style=flat-square)](https://github.com/gajus/canonical)\n[![Discord Chat](https://img.shields.io/badge/chat-on%20disord-green.svg?logo=discord)](https://discord.gg/kFFy3nc)\n\nJSDoc linting rules for ESLint.\n\n* [eslint-plugin-jsdoc](#eslint-plugin-jsdoc)\n    * [Installation](#eslint-plugin-jsdoc-installation)\n    * [Configuration](#eslint-plugin-jsdoc-configuration)\n    * [Options](#eslint-plugin-jsdoc-options)\n    * [Settings](#eslint-plugin-jsdoc-settings)\n        * [Allow tags (`@private` or `@internal`) to disable rules for that comment block](#eslint-plugin-jsdoc-settings-allow-tags-private-or-internal-to-disable-rules-for-that-comment-block)\n        * [`maxLines` and `minLines`](#eslint-plugin-jsdoc-settings-maxlines-and-minlines)\n        * [Mode](#eslint-plugin-jsdoc-settings-mode)\n        * [Alias Preference](#eslint-plugin-jsdoc-settings-alias-preference)\n        * [`@override`/`@augments`/`@extends`/`@implements` Without Accompanying `@param`/`@description`/`@example`/`@returns`](#eslint-plugin-jsdoc-settings-override-augments-extends-implements-without-accompanying-param-description-example-returns)\n        * [Settings to Configure `check-types` and `no-undefined-types`](#eslint-plugin-jsdoc-settings-settings-to-configure-check-types-and-no-undefined-types)\n        * [`structuredTags`](#eslint-plugin-jsdoc-settings-structuredtags)\n    * [Advanced](#eslint-plugin-jsdoc-advanced)\n        * [AST and Selectors](#eslint-plugin-jsdoc-advanced-ast-and-selectors)\n    * [Rules](#eslint-plugin-jsdoc-rules)\n        * [`check-access`](#eslint-plugin-jsdoc-rules-check-access)\n        * [`check-alignment`](#eslint-plugin-jsdoc-rules-check-alignment)\n        * [`check-examples`](#eslint-plugin-jsdoc-rules-check-examples)\n        * [`check-indentation`](#eslint-plugin-jsdoc-rules-check-indentation)\n        * [`check-line-alignment`](#eslint-plugin-jsdoc-rules-check-line-alignment)\n        * [`check-param-names`](#eslint-plugin-jsdoc-rules-check-param-names)\n        * [`check-property-names`](#eslint-plugin-jsdoc-rules-check-property-names)\n        * [`check-syntax`](#eslint-plugin-jsdoc-rules-check-syntax)\n        * [`check-tag-names`](#eslint-plugin-jsdoc-rules-check-tag-names)\n        * [`check-types`](#eslint-plugin-jsdoc-rules-check-types)\n        * [`check-values`](#eslint-plugin-jsdoc-rules-check-values)\n        * [`empty-tags`](#eslint-plugin-jsdoc-rules-empty-tags)\n        * [`implements-on-classes`](#eslint-plugin-jsdoc-rules-implements-on-classes)\n        * [`match-description`](#eslint-plugin-jsdoc-rules-match-description)\n        * [`match-name`](#eslint-plugin-jsdoc-rules-match-name)\n        * [`multiline-blocks`](#eslint-plugin-jsdoc-rules-multiline-blocks)\n        * [`newline-after-description`](#eslint-plugin-jsdoc-rules-newline-after-description)\n        * [`no-bad-blocks`](#eslint-plugin-jsdoc-rules-no-bad-blocks)\n        * [`no-defaults`](#eslint-plugin-jsdoc-rules-no-defaults)\n        * [`no-missing-syntax`](#eslint-plugin-jsdoc-rules-no-missing-syntax)\n        * [`no-multi-asterisks`](#eslint-plugin-jsdoc-rules-no-multi-asterisks)\n        * [`no-restricted-syntax`](#eslint-plugin-jsdoc-rules-no-restricted-syntax)\n        * [`no-types`](#eslint-plugin-jsdoc-rules-no-types)\n        * [`no-undefined-types`](#eslint-plugin-jsdoc-rules-no-undefined-types)\n        * [`require-asterisk-prefix`](#eslint-plugin-jsdoc-rules-require-asterisk-prefix)\n        * [`require-description-complete-sentence`](#eslint-plugin-jsdoc-rules-require-description-complete-sentence)\n        * [`require-description`](#eslint-plugin-jsdoc-rules-require-description)\n        * [`require-example`](#eslint-plugin-jsdoc-rules-require-example)\n        * [`require-file-overview`](#eslint-plugin-jsdoc-rules-require-file-overview)\n        * [`require-hyphen-before-param-description`](#eslint-plugin-jsdoc-rules-require-hyphen-before-param-description)\n        * [`require-jsdoc`](#eslint-plugin-jsdoc-rules-require-jsdoc)\n        * [`require-param-description`](#eslint-plugin-jsdoc-rules-require-param-description)\n        * [`require-param-name`](#eslint-plugin-jsdoc-rules-require-param-name)\n        * [`require-param-type`](#eslint-plugin-jsdoc-rules-require-param-type)\n        * [`require-param`](#eslint-plugin-jsdoc-rules-require-param)\n        * [`require-property`](#eslint-plugin-jsdoc-rules-require-property)\n        * [`require-property-description`](#eslint-plugin-jsdoc-rules-require-property-description)\n        * [`require-property-name`](#eslint-plugin-jsdoc-rules-require-property-name)\n        * [`require-property-type`](#eslint-plugin-jsdoc-rules-require-property-type)\n        * [`require-returns-check`](#eslint-plugin-jsdoc-rules-require-returns-check)\n        * [`require-returns-description`](#eslint-plugin-jsdoc-rules-require-returns-description)\n        * [`require-returns-type`](#eslint-plugin-jsdoc-rules-require-returns-type)\n        * [`require-returns`](#eslint-plugin-jsdoc-rules-require-returns)\n        * [`require-throws`](#eslint-plugin-jsdoc-rules-require-throws)\n        * [`require-yields`](#eslint-plugin-jsdoc-rules-require-yields)\n        * [`require-yields-check`](#eslint-plugin-jsdoc-rules-require-yields-check)\n        * [`tag-lines`](#eslint-plugin-jsdoc-rules-tag-lines)\n        * [`valid-types`](#eslint-plugin-jsdoc-rules-valid-types)\n\n\n<a name=\"eslint-plugin-jsdoc-installation\"></a>\n## Installation\n\nInstall [ESLint](https://www.github.com/eslint/eslint) either locally or\nglobally.\n\n```sh\nnpm install --save-dev eslint\n```\n\nIf you have installed `ESLint` globally, you have to install JSDoc plugin\nglobally too. Otherwise, install it locally.\n\n```sh\nnpm install --save-dev eslint-plugin-jsdoc\n```\n\n<a name=\"eslint-plugin-jsdoc-configuration\"></a>\n## Configuration\n\nAdd `plugins` section to [.eslintrc.*](https://eslint.org/docs/user-guide/configuring#configuration-file-formats)\nand specify `eslint-plugin-jsdoc` as a plugin.\n\n```json\n{\n    \"plugins\": [\n        \"jsdoc\"\n    ]\n}\n```\n\nFinally, enable all of the rules that you would like to use.\n\n```javascript\n{\n    \"rules\": {\n        \"jsdoc/check-access\": 1, // Recommended\n        \"jsdoc/check-alignment\": 1, // Recommended\n        \"jsdoc/check-examples\": 1,\n        \"jsdoc/check-indentation\": 1,\n        \"jsdoc/check-line-alignment\": 1,\n        \"jsdoc/check-param-names\": 1, // Recommended\n        \"jsdoc/check-property-names\": 1, // Recommended\n        \"jsdoc/check-syntax\": 1,\n        \"jsdoc/check-tag-names\": 1, // Recommended\n        \"jsdoc/check-types\": 1, // Recommended\n        \"jsdoc/check-values\": 1, // Recommended\n        \"jsdoc/empty-tags\": 1, // Recommended\n        \"jsdoc/implements-on-classes\": 1, // Recommended\n        \"jsdoc/match-description\": 1,\n        \"jsdoc/multiline-blocks\": 1, // Recommended\n        \"jsdoc/newline-after-description\": 1, // Recommended\n        \"jsdoc/no-bad-blocks\": 1,\n        \"jsdoc/no-defaults\": 1,\n        \"jsdoc/no-missing-syntax\": 1,\n        \"jsdoc/no-multi-asterisks\": 1, // Recommended\n        \"jsdoc/no-restricted-syntax\": 1,\n        \"jsdoc/no-types\": 1,\n        \"jsdoc/no-undefined-types\": 1, // Recommended\n        \"jsdoc/require-asterisk-prefix\": 1,\n        \"jsdoc/require-description\": 1,\n        \"jsdoc/require-description-complete-sentence\": 1,\n        \"jsdoc/require-example\": 1,\n        \"jsdoc/require-file-overview\": 1,\n        \"jsdoc/require-hyphen-before-param-description\": 1,\n        \"jsdoc/require-jsdoc\": 1, // Recommended\n        \"jsdoc/require-param\": 1, // Recommended\n        \"jsdoc/require-param-description\": 1, // Recommended\n        \"jsdoc/require-param-name\": 1, // Recommended\n        \"jsdoc/require-param-type\": 1, // Recommended\n        \"jsdoc/require-property\": 1, // Recommended\n        \"jsdoc/require-property-description\": 1, // Recommended\n        \"jsdoc/require-property-name\": 1, // Recommended\n        \"jsdoc/require-property-type\": 1, // Recommended\n        \"jsdoc/require-returns\": 1, // Recommended\n        \"jsdoc/require-returns-check\": 1, // Recommended\n        \"jsdoc/require-returns-description\": 1, // Recommended\n        \"jsdoc/require-returns-type\": 1, // Recommended\n        \"jsdoc/require-throws\": 1,\n        \"jsdoc/require-yields\": 1, // Recommended\n        \"jsdoc/require-yields-check\": 1, // Recommended\n        \"jsdoc/tag-lines\": 1, // Recommended\n        \"jsdoc/valid-types\": 1 // Recommended\n    }\n}\n```\n\nOr you can simply add the following to [.eslintrc.*](https://eslint.org/docs/user-guide/configuring#configuration-file-formats),\nwhich enables the rules commented above as \"recommended\":\n\n\n```json\n{\n  \"extends\": [\"plugin:jsdoc/recommended\"]\n}\n```\n\nYou can then selectively add to or override the recommended rules.\n\n<a name=\"eslint-plugin-jsdoc-options\"></a>\n## Options\n\nRules may, as per the [ESLint user guide](https://eslint.org/docs/user-guide/configuring), have their own individual options. In `eslint-plugin-jsdoc`, a few options,\nsuch as, `exemptedBy` and `contexts`, may be used across different rules.\n\n`eslint-plugin-jsdoc` options, if present, are generally in the form of an\nobject supplied as the second argument in an array after the error level\n(any exceptions to this format are explained within that rule's docs).\n\n```js\n// `.eslintrc.js`\n{\n  rules: {\n    'jsdoc/require-example': [\n        // The Error level should be `error`, `warn`, or `off` (or 2, 1, or 0)\n        'error',\n        // The options vary by rule, but are generally added to an options\n        //  object as follows:\n        {\n          avoidExampleOnConstructors: true,\n          exemptedBy: ['type']\n        }\n    ]\n  }\n}\n```\n\n<a name=\"eslint-plugin-jsdoc-settings\"></a>\n## Settings\n\n<a name=\"eslint-plugin-jsdoc-settings-allow-tags-private-or-internal-to-disable-rules-for-that-comment-block\"></a>\n### Allow tags (<code>@private</code> or <code>@internal</code>) to disable rules for that comment block\n\n- `settings.jsdoc.ignorePrivate` - Disables all rules for the comment block\n  on which a `@private` tag (or `@access private`) occurs. Defaults to\n  `false`. Note: This has no effect with the rule `check-access` (whose\n  purpose is to check access modifiers) or `empty-tags` (which checks\n  `@private` itself).\n- `settings.jsdoc.ignoreInternal` - Disables all rules for the comment block\n  on which a `@internal` tag occurs. Defaults to `false`. Note: This has no\n  effect with the rule `empty-tags` (which checks `@internal` itself).\n\n<a name=\"eslint-plugin-jsdoc-settings-maxlines-and-minlines\"></a>\n### <code>maxLines</code> and <code>minLines</code>\n\nOne can use `minLines` and `maxLines` to indicate how many line breaks\n(if any) will be checked to find a jsdoc comment block before the given\ncode block. These settings default to `0` and `1` respectively.\n\nIn conjunction with the `require-jsdoc` rule, these settings can\nbe enforced so as to report problems if a jsdoc block is not found within\nthe specified boundaries. The settings are also used in the fixer to determine\nhow many line breaks to add when a block is missing.\n\n<a name=\"eslint-plugin-jsdoc-settings-mode\"></a>\n### Mode\n\n- `settings.jsdoc.mode` - Set to `typescript`, `closure`, or `jsdoc` (the\n  default unless the `@typescript-eslint` parser is in use in which case\n  `typescript` will be the default).\n  Note that if you do not wish to use separate `.eslintrc.*` files for a\n  project containing both JavaScript and TypeScript, you can also use\n  [`overrides`](https://eslint.org/docs/user-guide/configuring). You may also\n  set to `\"permissive\"` to try to be as accommodating to any of the styles,\n  but this is not recommended. Currently is used for the following:\n  - `check-tag-names`: Determine valid tags and aliases\n  - `no-undefined-types`: Only check `@template` for types in \"closure\" and\n    \"typescript\" modes\n  - `check-syntax`: determines aspects that may be enforced\n  - `valid-types`: in non-Closure mode, `@extends`, `@package` and access tags\n     (e.g., `@private`) with a bracketed type are reported as are missing\n     names with `@typedef`\n  - For type/namepath-checking rules, determine which tags will be checked for\n    types/namepaths (Closure allows types on some tags which the others do not,\n    so these tags will additionally be checked in \"closure\" mode)\n  - For type-checking rules, impacts parsing of types (through\n    [jsdoctypeparser](https://github.com/jsdoctypeparser/jsdoctypeparser)\n    dependency); note that some TypeScript features are\n    [not yet](https://github.com/gajus/eslint-plugin-jsdoc/issues/145)\n    [supported](https://github.com/jsdoctypeparser/jsdoctypeparser/issues/50)\n  - Check preferred tag names\n  - Disallows namepath on `@interface` for \"closure\" mode in `valid-types` (and\n      avoids checking in other rules)\n\n<a name=\"eslint-plugin-jsdoc-settings-alias-preference\"></a>\n### Alias Preference\n\nUse `settings.jsdoc.tagNamePreference` to configure a preferred alias name for\na JSDoc tag. The format of the configuration is:\n`<primary tag name>: <preferred alias name>`, e.g.\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"tagNamePreference\": {\n                \"param\": \"arg\",\n                \"returns\": \"return\"\n            }\n        }\n    }\n}\n```\n\nNote: ESLint does not allow settings to have keys which conflict with\n`Object.prototype` e.g. `'constructor'`. To work around this, you can use the\nkey `'tag constructor'`.\n\nOne may also use an object with a `message` and `replacement`.\n\nThe following will report the message\n`@extends is to be used over @augments as it is more evocative of classes than @augments`\nupon encountering `@augments`.\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"tagNamePreference\": {\n                \"augments\": {\n                  \"message\": \"@extends is to be used over @augments as it is more evocative of classes than @augments\",\n                  \"replacement\": \"extends\"\n                }\n            }\n        }\n    }\n}\n```\n\nIf one wishes to reject a normally valid tag, e.g., `@todo`, one may set the\ntag to `false`:\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"tagNamePreference\": {\n                \"todo\": false\n            }\n        }\n    }\n}\n```\n\nA project wishing to ensure no blocks are left excluded from entering the\ndocumentation, might wish to prevent the `@ignore` tag in the above manner.\n\nOr one may set the targeted tag to an object with a custom `message`, but\nwithout a `replacement` property:\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"tagNamePreference\": {\n                \"todo\": {\n                  \"message\": \"We expect immediate perfection, so don't leave to-dos in your code.\"\n                }\n            }\n        }\n    }\n}\n```\n\nNote that the preferred tags indicated in the\n`settings.jsdoc.tagNamePreference` map will be assumed to be defined by\n`check-tag-names`.\n\nSee `check-tag-names` for how that fact can be used to set an alias to itself\nto allow both the alias and the default (since aliases are otherwise not\npermitted unless used in `tagNamePreference`).\n\n<a name=\"eslint-plugin-jsdoc-settings-alias-preference-default-preferred-aliases\"></a>\n#### Default Preferred Aliases\n\nThe defaults in `eslint-plugin-jsdoc` (for tags which offer\naliases) are as follows:\n\n- `@abstract` (over `@virtual`)\n- `@augments` (over `@extends`)\n- `@class` (over `@constructor`)\n- `@constant` (over `@const`)\n- `@default` (over `@defaultvalue`)\n- `@description` (over `@desc`)\n- `@external` (over `@host`)\n- `@file` (over `@fileoverview`, `@overview`)\n- `@fires` (over `@emits`)\n- `@function` (over `@func`, `@method`)\n- `@member` (over `@var`)\n- `@param` (over `@arg`, `@argument`)\n- `@property` (over `@prop`)\n- `@returns` (over `@return`)\n- `@throws` (over `@exception`)\n- `@yields` (over `@yield`)\n\nThis setting is utilized by the the rule for tag name checking\n(`check-tag-names`) as well as in the `@param` and `@require` rules:\n\n- `check-param-names`\n- `check-tag-names`\n- `require-hyphen-before-param-description`\n- `require-description`\n- `require-param`\n- `require-param-description`\n- `require-param-name`\n- `require-param-type`\n- `require-returns`\n- `require-returns-check`\n- `require-returns-description`\n- `require-returns-type`\n\n<a name=\"eslint-plugin-jsdoc-settings-override-augments-extends-implements-without-accompanying-param-description-example-returns\"></a>\n### <code>@override</code>/<code>@augments</code>/<code>@extends</code>/<code>@implements</code> Without Accompanying <code>@param</code>/<code>@description</code>/<code>@example</code>/<code>@returns</code>\n\nThe following settings allows the element(s) they reference to be omitted\non the JSDoc comment block of the function or that of its parent class\nfor any of the \"require\" rules (i.e., `require-param`, `require-description`,\n`require-example`, or `require-returns`).\n\n* `settings.jsdoc.overrideReplacesDocs` (`@override`) - Defaults to `true`\n* `settings.jsdoc.augmentsExtendsReplacesDocs` (`@augments` or its alias\n    `@extends`) - Defaults to `false`.\n* `settings.jsdoc.implementsReplacesDocs` (`@implements`) - Defaults to `false`\n\nThe format of the configuration is as follows:\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"overrideReplacesDocs\": true,\n            \"augmentsExtendsReplacesDocs\": true,\n            \"implementsReplacesDocs\": true\n        }\n    }\n}\n```\n\n<a name=\"eslint-plugin-jsdoc-settings-settings-to-configure-check-types-and-no-undefined-types\"></a>\n### Settings to Configure <code>check-types</code> and <code>no-undefined-types</code>\n\n- `settings.jsdoc.preferredTypes` An option map to indicate preferred\n  or forbidden types (if default types are indicated here, these will\n  have precedence over the default recommendations for `check-types`).\n  The keys of this map are the types to be replaced (or forbidden).\n  These keys may include:\n  1. The \"ANY\" type, `*`\n  1. The pseudo-type `[]` which we use to denote the parent (array)\n    types used in the syntax `string[]`, `number[]`, etc.\n  1. The pseudo-type `.<>` (or `.`) to represent the format `Array.<value>`\n    or `Object.<key, value>`\n  1. The pseudo-type `<>` to represent the format `Array<value>` or\n    `Object<key, value>`\n  1. A plain string type, e.g., `MyType`\n  1. A plain string type followed by one of the above pseudo-types (except\n    for `[]` which is always assumed to be an `Array`), e.g., `Array.`, or\n    `SpecialObject<>`.\n\n  If a bare pseudo-type is used, it will match all parent types of that form.\n  If a pseudo-type prefixed with a type name is used, it will only match\n  parent types of that form and type name.\n\n  The values can be:\n  - `false` to forbid the type\n  - a string to indicate the type that should be preferred in its place\n    (and which `fix` mode can replace); this can be one of the formats\n    of the keys described above.\n    - Note that the format will not be changed unless you use a pseudo-type\n      in the replacement. (For example, `'Array.<>': 'MyArray'` will change\n      `Array.<string>` to `MyArray.<string>`, preserving the dot. To get rid\n      of the dot, you must use the pseudo-type with `<>`, i.e.,\n      `'Array.<>': 'MyArray<>'`, which will change `Array.<string>` to\n      `MyArray<string>`).\n    - If you use a _bare_ pseudo-type in the replacement (e.g.,\n      `'MyArray.<>': '<>'`), the type will be converted to the format\n      of the pseudo-type without changing the type name. For example,\n      `MyArray.<string>` will become `MyArray<string>` but `Array.<string>`\n      will not be modified.\n  - an object with:\n    - the key `message` to provide a specific error message\n      when encountering the discouraged type.\n      - The message string will have the substrings with special meaning,\n        `{{tagName}}` and `{{tagValue}}`, replaced with their\n        corresponding value.\n    - an optional key `replacement` with either of the following values:\n      - a string type to be preferred in its place (and which `fix` mode\n        can replace)\n      - `false` (for forbidding the type)\n\nNote that the preferred types indicated as targets in\n`settings.jsdoc.preferredTypes` map will be assumed to be defined by\n`no-undefined-types`.\n\nSee the option of `check-types`, `unifyParentAndChildTypeChecks`, for\nhow the keys of `preferredTypes` may have `<>` or `.<>` (or just `.`)\nappended and its bearing on whether types are checked as parents/children\nonly (e.g., to match `Array` if the type is `Array` vs. `Array.<string>`).\n\nNote that if a value is present both as a key and as a value, neither the\nkey nor the value will be reported. Thus in `check-types`, this fact can\nbe used to allow both `object` and `Object` if one has a `preferredTypes`\nkey `object: 'Object'` and `Object: 'object'`.\n\n<a name=\"eslint-plugin-jsdoc-settings-structuredtags\"></a>\n### <code>structuredTags</code>\n\nAn object indicating tags whose types and names/namepaths (whether defining or\nreferencing namepaths) will be checked, subject to configuration. If the tags\nhave predefined behavior or `allowEmptyNamepaths` behavior, this option will\noverride that behavior for any specified tags, though this option can also be\nused for tags without predefined behavior. Its keys are tag names and its\nvalues are objects with the following optional properties:\n  - `name` - String set to one of the following:\n    - `\"text\"` - When a name is present, plain text will be allowed in the\n      name position (non-whitespace immediately after the tag and whitespace),\n      e.g., in `@throws This is an error`, \"This\" would normally be the name,\n      but \"text\" allows non-name text here also. This is the default.\n    - `\"namepath-defining\"` - As with `namepath-referencing`, but also\n      indicates the tag adds a namepath to definitions, e.g., to prevent\n      `no-undefined-types` from reporting references to that namepath.\n    - `\"namepath-referencing\"` - This will cause any name position to be\n      checked to ensure it is a valid namepath. You might use this to ensure\n      that tags which normally allow free text, e.g., `@see` will instead\n      require a namepath.\n    - `false` - This will disallow any text in the name position.\n  - `type`:\n      - `true` - Allows valid types within brackets. This is the default.\n      - `false` - Explicitly disallows any brackets or bracketed type. You\n        might use this with `@throws` to suggest that only free form text\n        is being input or with `@augments` (for jsdoc mode) to disallow\n        Closure-style bracketed usage along with a required namepath.\n      - (An array of strings) - A list of permissible types.\n  - `required` - Array of one of the following (defaults to an empty array,\n      meaning none are required):\n    - One or both of the following strings (if both are included, then both\n      are required):\n      - `\"name\"` - Indicates that a name position is required (not just that\n        if present, it is a valid namepath). You might use this with `see`\n        to insist that a value (or namepath, depending on the `name` value)\n        is always present.\n      - `\"type\"` - Indicates that the type position (within curly brackets)\n        is required (not just that if present, it is a valid type). You\n        might use this with `@throws` or `@typedef` which might otherwise\n        normally have their types optional. See the type groups 3-5 above.\n    - `\"typeOrName\"` - Must have either type (e.g., `@throws {aType}`) or\n        name (`@throws Some text`); does not require that both exist but\n        disallows just an empty tag.\n\n<a name=\"eslint-plugin-jsdoc-advanced\"></a>\n## Advanced\n\n<a name=\"eslint-plugin-jsdoc-advanced-ast-and-selectors\"></a>\n### AST and Selectors\n\nFor various rules, one can add to the environments to which the rule applies\nby using the `contexts` option.\n\nThis option works with [ESLint's selectors](https://eslint.org/docs/developer-guide/selectors) which are [esquery](https://github.com/estools/esquery/#readme)\nexpressions one may use to target a specific node type or types, including\nsubsets of the type(s) such as nodes with certain children or attributes.\n\nThese expressions are used within ESLint plugins to find those parts of\nyour files' code which are of interest to check. However, in\n`eslint-plugin-jsdoc`, we also allow you to use these selectors to define\nadditional contexts where you wish our own rules to be applied.\n\n<a name=\"eslint-plugin-jsdoc-advanced-ast-and-selectors-contexts-format\"></a>\n#### <code>contexts</code> format\n\nWhile at their simplest, these can be an array of string selectors, one can\nalso supply an object with `context` (in place of the string) and one of two\nproperties:\n\n1. For `require-jsdoc`, there is also a `inlineCommentBlock` property. See\n    that rule for details.\n1. For `no-missing-syntax` and `no-restricted-syntax`, there is also a\n    `message` property which allows customization of the message to be shown\n    when the rule is triggered.\n1. For `no-missing-syntax`, there is also a `minimum` property. See that rule.\n1. For other rules, there is a `comment` property which adds to the `context`\n    in requiring that the `comment` AST condition is also met, e.g., to\n    require that certain tags are present and/or or types and type operators\n    are in use. Note that this AST (either for `Jsdoc*` or `JsdocType*` AST)\n    has not been standardized and should be considered experimental.\n    Note that this property might also become obsolete if parsers begin to\n    include JSDoc-structured AST. A\n    [parser](https://github.com/brettz9/jsdoc-eslint-parser/) is available\n    which aims to support comment AST as\n    a first class citizen where comment/comment types can be used anywhere\n    within a normal AST selector but this should only be considered\n    experimental. When using such a parser, you need not use `comment` and\n    can just use a plain string context. The determination of the node on\n    which the comment is attached is also subject to change. It may be\n    currently possible for different structures to map to the same comment\n    block. This is because normally when querying to find either the\n    declaration of the function expression for\n    `const quux = function () {}`, the associated comment would,\n    in both cases, generally be expected to be on the line above both, rather\n    than to be immediately preceding the funciton (in the case of the\n    function). See [@es-joy/jsdoccomment](https://github.com/es-joy/jsdoccomment)\n    for the precise structure of the comment (and comment type) nodes.\n\n<a name=\"eslint-plugin-jsdoc-advanced-ast-and-selectors-discovering-available-ast-definitions\"></a>\n#### Discovering available AST definitions\n\nTo know all of the AST definitions one may target, it will depend on the\n[parser](https://eslint.org/docs/user-guide/configuring#specifying-parser)\nyou are using with ESLint (e.g., `espree` is the default parser for ESLint,\nand this follows [EStree AST](https://github.com/estree/estree) but\nto support the the latest experimental features of JavaScript, one may use\n`@babel/eslint-parser` or to be able to have one's rules (including JSDoc rules)\napply to TypeScript, one may use `@typescript-eslint/parser`, etc.\n\nSo you can look up a particular parser to see its rules, e.g., browse through\nthe [ESTree docs](https://github.com/estree/estree) as used by Espree or see\nESLint's [overview of the structure of AST](https://eslint.org/docs/developer-guide/working-with-custom-parsers#the-ast-specification).\n\nHowever, it can sometimes be even more helpful to get an idea of AST by just\nproviding some of your JavaScript to the wonderful\n[AST Explorer](https://astexplorer.net/) tool and see what AST is built out\nof your code. You can set the tool to the specific parser which you are using.\n\n<a name=\"eslint-plugin-jsdoc-advanced-ast-and-selectors-uses-tips-for-ast\"></a>\n#### Uses/Tips for AST\n\nAnd if you wish to introspect on the AST of code within your projects, you can\nuse [eslint-plugin-query](https://github.com/brettz9/eslint-plugin-query).\nThough it also works as a plugin, you can use it with its own CLI, e.g.,\nto search your files for matching esquery selectors, optionally showing\nit as AST JSON.\n\nTip: If you want to more deeply understand not just the resulting AST tree\nstructures for any given code but also the syntax for esquery selectors so\nthat you can, for example, find only those nodes with a child of a certain\ntype, you can set the \"Transform\" feature to ESLint and test out\nesquery selectors in place of the selector expression (e.g., replace\n`'VariableDeclaration > VariableDeclarator > Identifier[name=\"someVar\"]'` as\nwe have\n[here](https://astexplorer.net/#/gist/71a93130c19599d6f197bddb29c13a59/latest))\nto the selector you wish so as to get messages reported in the bottom right\npane which match your [esquery](https://github.com/estools/esquery/#readme)\nselector).\n\n<a name=\"eslint-plugin-jsdoc-rules\"></a>\n## Rules\n\n<a name=\"eslint-plugin-jsdoc-rules-check-access\"></a>\n### <code>check-access</code>\n\nChecks that `@access` tags use one of the following values:\n\n- \"package\", \"private\", \"protected\", \"public\"\n\nAlso reports:\n\n- Mixing of `@access` with `@public`, `@private`, `@protected`, or `@package`\n  on the same doc block.\n- Use of multiple instances of `@access` (or the `@public`, etc. style tags)\n  on the same doc block.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`@access`|\n|Recommended|false|\n|Settings||\n|Options||\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @access foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing valid JSDoc @access level.\n\n/**\n * @access foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n// Message: Missing valid JSDoc @access level.\n\n/**\n * @accessLevel foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"access\":\"accessLevel\"}}}\n// Message: Missing valid JSDoc @accessLevel level.\n\n/**\n * @access\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"access\":false}}}\n// Message: Unexpected tag `@access`\n\nclass MyClass {\n  /**\n   * @access\n   */\n  myClassField = 1\n}\n// Message: Missing valid JSDoc @access level.\n\n/**\n * @access public\n * @public\n */\nfunction quux (foo) {\n\n}\n// Message: The @access tag may not be used with specific access-control tags (@package, @private, @protected, or @public).\n\n/**\n * @access public\n * @access private\n */\nfunction quux (foo) {\n\n}\n// Message: At most one access-control tag may be present on a jsdoc block.\n\n/**\n * @access public\n * @access private\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n// Message: At most one access-control tag may be present on a jsdoc block.\n\n/**\n * @public\n * @private\n */\nfunction quux (foo) {\n\n}\n// Message: At most one access-control tag may be present on a jsdoc block.\n\n/**\n * @public\n * @private\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n// Message: At most one access-control tag may be present on a jsdoc block.\n\n/**\n * @public\n * @public\n */\nfunction quux (foo) {\n\n}\n// Message: At most one access-control tag may be present on a jsdoc block.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @access public\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @accessLevel package\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"tagNamePreference\":{\"access\":\"accessLevel\"}}}\n\nclass MyClass {\n  /**\n   * @access private\n   */\n  myClassField = 1\n}\n\n/**\n * @public\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @private\n */\nfunction quux (foo) {\n\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n````\n\n\n<a name=\"eslint-plugin-jsdoc-rules-check-alignment\"></a>\n### <code>check-alignment</code>\n\nReports invalid alignment of JSDoc block asterisks.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A|\n|Recommended|true|\n\nThe following patterns are considered problems:\n\n````js\n/**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n\t// with tabs\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n* @param {Number} foo\n*/\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n * @param {Number} foo\n  */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc block to be aligned.\n\n /**\n * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc block to be aligned.\n\n /**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n  * @param {Number} foo\n  */\n function quux (foo) {\n\n }\n// Message: Expected JSDoc block to be aligned.\n\n/**\n   * A jsdoc not attached to any node.\n */\n// Message: Expected JSDoc block to be aligned.\n\nclass Foo {\n  /**\n   *  Some method\n    * @param a\n   */\n  quux(a) {}\n}\n// Message: Expected JSDoc block to be aligned.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * Desc\n *\n * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * Desc\n *\n * @param {{\n  foo: Bar,\n  bar: Baz\n * }} foo\n *\n */\nfunction quux (foo) {\n\n}\n\n/*  <- JSDoc must start with 2 stars.\n  *    So this is unchecked.\n */\nfunction quux (foo) {}\n\n/**\n  * @param {Number} foo\n  * @private\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n\n/**\n  * @param {Number} foo\n  * @access private\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Settings: {\"jsdoc\":{\"ignorePrivate\":true}}\n````\n\n\n<a name=\"eslint-plugin-jsdoc-rules-check-examples\"></a>\n### <code>check-examples</code>\n\nEnsures that (JavaScript) examples within JSDoc adhere to ESLint rules. Also\nhas options to lint the default values of optional `@param`/`@arg`/`@argument`\nand `@property`/`@prop` tags or the values of `@default`/`@defaultvalue` tags.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-1\"></a>\n#### Options\n\nThe options below all default to no-op/`false` except as noted.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-1-captionrequired\"></a>\n##### <code>captionRequired</code>\n\nJSDoc specs use of an optional `<caption>` element at the beginning of\n`@example`.\n\nThe option `captionRequired` insists on a `<caption>` being present at\nthe beginning of any `@example`.\n\nUsed only for `@example`.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-1-examplecoderegex-and-rejectexamplecoderegex\"></a>\n##### <code>exampleCodeRegex</code> and <code>rejectExampleCodeRegex</code>\n\nJSDoc does not specify a formal means for delimiting code blocks within\n`@example` (it uses generic syntax highlighting techniques for its own\nsyntax highlighting). The following options determine whether a given\n`@example` tag will have the `check-examples` checks applied to it:\n\n* `exampleCodeRegex` - Regex which whitelists lintable\n  examples. If a parenthetical group is used, the first one will be used,\n  so you may wish to use `(?:...)` groups where you do not wish the\n  first such group treated as one to include. If no parenthetical group\n  exists or matches, the whole matching expression will be used.\n  An example might be ````\"^```(?:js|javascript)([\\\\s\\\\S]*)```\\s*$\"````\n  to only match explicitly fenced JavaScript blocks. Defaults to only\n  using the `u` flag, so to add your own flags, encapsulate your\n  expression as a string, but like a literal, e.g., ````/```js.*```/gi````.\n  Note that specifying a global regular expression (i.e., with `g`) will\n  allow independent linting of matched blocks within a single `@example`.\n* `rejectExampleCodeRegex` - Regex blacklist which rejects\n  non-lintable examples (has priority over `exampleCodeRegex`). An example\n  might be ```\"^`\"``` to avoid linting fenced blocks which may indicate\n  a non-JavaScript language. See `exampleCodeRegex` on how to add flags\n  if the default `u` is not sufficient.\n\nIf neither is in use, all examples will be matched. Note also that even if\n`captionRequired` is not set, any initial `<caption>` will be stripped out\nbefore doing the regex matching.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-1-paddedindent\"></a>\n##### <code>paddedIndent</code>\n\nThis integer property allows one to add a fixed amount of whitespace at the\nbeginning of the second or later lines of the example to be stripped so as\nto avoid linting issues with the decorative whitespace. For example, if set\nto a value of `4`, the initial whitespace below will not trigger `indent`\nrule errors as the extra 4 spaces on each subsequent line will be stripped\nout before evaluation.\n\n```js\n/**\n * @example\n *     anArray.filter((a) => {\n *       return a.b;\n *     });\n */\n```\n\nOnly applied to `@example` linting.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-1-reportunuseddisabledirectives\"></a>\n##### <code>reportUnusedDisableDirectives</code>\n\nIf not set to `false`, `reportUnusedDisableDirectives` will report disabled\ndirectives which are not used (and thus not needed). Defaults to `true`.\nCorresponds to ESLint's [`--report-unused-disable-directives`](https://eslint.org/docs/user-guide/command-line-interface#--report-unused-disable-directives).\n\nInline ESLint config within `@example` JavaScript is allowed (or within\n`@default`, etc.), though the disabling of ESLint directives which are not\nneeded by the resolved rules will be reported as with the ESLint\n`--report-unused-disable-directives` command.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-checkeslintrc-and-baseconfig\"></a>\n#### Options for Determining ESLint Rule Applicability (<code>allowInlineConfig</code>, <code>noDefaultExampleRules</code>, <code>matchingFileName</code>, <code>configFile</code>, <code>checkEslintrc</code>, and <code>baseConfig</code>)\n\nThe following options determine which individual ESLint rules will be\napplied to the JavaScript found within the `@example` tags (as determined\nto be applicable by the above regex options) or for the other tags checked by\n`checkDefaults`, `checkParams`, or `checkProperties` options. They are ordered\nby decreasing precedence:\n\n* `allowInlineConfig` - If not set to `false`, will allow\n  inline config within the `@example` to override other config. Defaults\n  to `true`.\n* `noDefaultExampleRules` - Setting to `true` will disable the\n  default rules which are expected to be troublesome for most documentation\n  use. See the section below for the specific default rules.\n* `configFile` - A config file. Corresponds to ESLint's [`-c`](https://eslint.org/docs/user-guide/command-line-interface#-c---config).\n* `matchingFileName` - Option for a file name (even non-existent) to trigger\n  specific rules defined in one's config; usable with ESLint `.eslintrc.*`\n  `overrides` -> `files` globs, to apply a desired subset of rules with\n  `@example` (besides allowing for rules specific to examples, this option\n  can be useful for enabling reuse of the same rules within `@example` as\n  with JavaScript Markdown lintable by\n  [other plugins](https://github.com/eslint/eslint-plugin-markdown), e.g.,\n  if one sets `matchingFileName` to `dummy.md/*.js` so that `@example`\n  rules will follow rules for fenced JavaScript blocks within one's Markdown\n  rules). (In ESLint 6's processor API and `eslint-plugin-markdown` < 2, one\n  would instead use `dummy.md`.) For `@example` only.\n* `matchingFileNameDefaults` - As with `matchingFileName` but for use with\n  `checkDefaults` and defaulting to `.jsdoc-defaults` as extension.\n* `matchingFileNameParams` - As with `matchingFileName` but for use with\n  `checkParams` and defaulting to `.jsdoc-params` as extension.\n* `matchingFileNameProperties` As with `matchingFileName` but for use with\n  `checkProperties` and defaulting to `.jsdoc-properties` as extension.\n* `checkEslintrc` - Defaults to `true` in adding rules\n  based on an `.eslintrc.*` file. Setting to `false` corresponds to\n  ESLint's [`--no-eslintrc`](https://eslint.org/docs/user-guide/command-line-interface#--no-eslintrc).\n  If `matchingFileName` is set, this will automatically be `true` and\n  will use the config corresponding to that file. If `matchingFileName` is\n  not set and this value is set to `false`, the `.eslintrc.*` configs will\n  not be checked. If `matchingFileName` is not set, and this is unset or\n  set to `true`, the `.eslintrc.*` configs will be checked as though the file\n  name were the same as the file containing the example, with any file\n  extension changed to `\".md/*.js\"` (and if there is no file extension,\n  `\"dummy.md/*.js\"` will be the result). This allows convenient sharing of\n  similar rules with often also context-free Markdown as well as use of\n  `overrides` as described under `matchingFileName`. Note that this option\n  (whether set by `matchingFileName` or set manually to `true`) may come at\n  somewhat of a performance penalty as the file's existence is checked by\n  eslint.\n* `baseConfig` - Set to an object of rules with the same schema\n  as `.eslintrc.*` for defaults.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-checkeslintrc-and-baseconfig-rules-disabled-by-default-unless-nodefaultexamplerules-is-set-to-true\"></a>\n##### Rules Disabled by Default Unless <code>noDefaultExampleRules</code> is Set to <code>true</code>\n\n* `eol-last` - Insisting that a newline \"always\" be at the end is less likely\n  to be desired in sample code as with the code file convention.\n* `no-console` - This rule is unlikely to have inadvertent temporary debugging\n  within examples.\n* `no-multiple-empty-lines` - This rule may be problematic for projects which\n  use an initial newline just to start an example. Also, projects may wish to\n  use extra lines within examples just for easier illustration\n  purposes.\n* `no-undef` - Many variables in examples will be `undefined`.\n* `no-unused-vars` - It is common to define variables for clarity without\n  always using them within examples.\n* `padded-blocks` - It can generally look nicer to pad a little even if one's\n  code follows more stringency as far as block padding.\n* `jsdoc/require-file-overview` - Shouldn't check example for jsdoc blocks.\n* `jsdoc/require-jsdoc` - Wouldn't expect jsdoc blocks within jsdoc blocks.\n* `import/no-unresolved` - One wouldn't generally expect example paths to\n  resolve relative to the current JavaScript file as one would with real code.\n* `import/unambiguous` - Snippets in examples are likely too short to always\n  include full import/export info.\n* `node/no-missing-import` - See `import/no-unresolved`.\n* `node/no-missing-require` -  See `import/no-unresolved`.\n\nFor `checkDefaults`, `checkParams`, and `checkProperties`, the following\nexpression-oriented rules will be used by default as well:\n\n* `quotes` - Will insist on \"double\".\n* `semi` - Will insist on \"never\".\n* `strict` - Disabled.\n* `no-empty-function` - Disabled.\n* `no-new` - Disabled.\n* `no-unused-expressions` - Disabled.\n* `chai-friendly/no-unused-expressions` - Disabled.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-checkeslintrc-and-baseconfig-options-for-checking-other-than-example-checkdefaults-checkparams-or-checkproperties\"></a>\n##### Options for checking other than <code>@example</code> (<code>checkDefaults</code>, <code>checkParams</code>, or <code>checkProperties</code>)\n\n* `checkDefaults` - Whether to check the values of `@default`/`@defaultvalue` tags\n* `checkParams` - Whether to check `@param`/`@arg`/`@argument` default values\n* `checkProperties` - Whether to check `@property`/`@prop` default values\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`example`|\n|Recommended|false|\n|Options| *See above* |\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @example alert('hello')\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"no-alert\":2,\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false}]\n// Message: @example error (no-alert): Unexpected alert.\n\n/**\n * @example alert('hello')\n */\nclass quux {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"no-alert\":2,\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false}]\n// Message: @example error (no-alert): Unexpected alert.\n\n/**\n * @example ```js\n alert('hello');\n ```\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```js([\\\\s\\\\S]*)```\"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example\n *\n * ```js alert('hello'); ```\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```js ([\\\\s\\\\S]*)```\"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example\n * ```js alert('hello'); ```\n */\nvar quux = {\n\n};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```js ([\\\\s\\\\S]*)```\"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example ```\n * js alert('hello'); ```\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```\\njs ([\\\\s\\\\S]*)```\"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example <b>Not JavaScript</b>\n */\nfunction quux () {\n\n}\n/**\n * @example quux2();\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"rejectExampleCodeRegex\":\"^\\\\s*<.*>\\\\s*$\"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example\n * quux(); // does something useful\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"no-undef\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":true}]\n// Message: @example error (no-undef): 'quux' is not defined.\n\n/**\n * @example <caption>Valid usage</caption>\n * quux(); // does something useful\n *\n * @example\n * quux('random unwanted arg'); // results in an error\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"captionRequired\":true,\"checkEslintrc\":false}]\n// Message: Caption is expected for examples.\n\n/**\n * @example  quux();\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"indent\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n// Message: @example error (indent): Expected indentation of 0 spaces but found 1.\n\n/**\n * @example test() // eslint-disable-line semi\n */\nfunction quux () {}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkEslintrc\":false,\"noDefaultExampleRules\":true,\"reportUnusedDisableDirectives\":true}]\n// Message: @example error: Unused eslint-disable directive (no problems were reported from 'semi').\n\n/**\n * @example\n test() // eslint-disable-line semi\n */\nfunction quux () {}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"allowInlineConfig\":false,\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":true}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example const i = 5;\n * quux2()\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"matchingFileName\":\"../../jsdocUtils.js\"}]\n// Message: @example warning (id-length): Identifier name 'i' is too short (< 2).\n\n/**\n * @example const i = 5;\n * quux2()\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"configFile\":\".eslintrc.json\",\"matchingFileName\":\"../../jsdocUtils.js\"}]\n// Message: @example warning (id-length): Identifier name 'i' is too short (< 2).\n\n/**\n * @example const i = 5;\n * quux2()\n */\nfunction quux2 () {\n\n}\n// Message: @example warning (id-length): Identifier name 'i' is too short (< 2).\n\n/**\n * @example const i = 5;\n *   quux2()\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"paddedIndent\":2}]\n// Message: @example warning (id-length): Identifier name 'i' is too short (< 2).\n\n/**\n * @example\n * const i = 5;\n * quux2()\n */\nfunction quux2 () {\n\n}\n// Message: @example warning (id-length): Identifier name 'i' is too short (< 2).\n\n/**\n * @example const idx = 5;\n * quux2()\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"matchingFileName\":\"dummy.js\"}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example const idx = 5;\n *\n * quux2()\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"matchingFileName\":\"dummy.js\"}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example const idx = 5;\n *\n * quux2()\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkEslintrc\":false,\"matchingFileName\":\"dummy.js\"}]\n// Message: @example error: Parsing error: The keyword 'const' is reserved\n\n/**\n * @example // begin\n alert('hello')\n // end\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"warn\",\"always\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"// begin[\\\\s\\\\S]*// end\",\"noDefaultExampleRules\":true}]\n// Message: @example warning (semi): Missing semicolon.\n\n/**\n * @typedef {string} Foo\n * @example <caption></caption>\n * 'foo'\n */\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"captionRequired\":true,\"checkEslintrc\":false}]\n// Message: Caption is expected for examples.\n\n/**\n * @example\n * const list: number[] = [1, 2, 3]\n * quux(list);\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parser\":\"@typescript-eslint/parser\",\"parserOptions\":{\"ecmaVersion\":6},\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example\n * const test = something.find((_) => {\n *   return _\n * });\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parserOptions\":{\"ecmaVersion\":6},\"rules\":{\"semi\":[\"error\",\"always\"]}}}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example <caption>Say `Hello!` to the user.</caption>\n * First, import the function:\n *\n * ```js\n * import popup from './popup'\n * const aConstInSameScope = 5;\n * ```\n *\n * Then use it like this:\n *\n * ```js\n * const aConstInSameScope = 7;\n * popup('Hello!')\n * ```\n *\n * Here is the result on macOS:\n *\n * ![Screenshot](path/to/screenshot.jpg)\n */\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parserOptions\":{\"ecmaVersion\":2015,\"sourceType\":\"module\"},\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"/^```(?:js|javascript)\\\\n([\\\\s\\\\S]*?)```$/gm\"}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example // begin\n alert('hello')\n // end\n * And here is another example:\n // begin\n alert('there')\n // end\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"warn\",\"always\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"/\\\\/\\\\/ begin[\\\\s\\\\S]*?// end/g\",\"noDefaultExampleRules\":true}]\n// Message: @example warning (semi): Missing semicolon.\n\n/**\n * @example\n *   quux();\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"indent\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n// Message: @example error (indent): Expected indentation of 0 spaces but found 2.\n\n/**\n * @default 'abc'\n */\nconst str = 'abc';\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkDefaults\":true}]\n// Message: @default error (quotes): Strings must use doublequote.\n\n/**\n * @param {myType} [name='abc']\n */\nfunction quux () {\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkParams\":true}]\n// Message: @param error (quotes): Strings must use doublequote.\n\n/**\n * @property {myType} [name='abc']\n */\nconst obj = {};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkProperties\":true}]\n// Message: @property error (quotes): Strings must use doublequote.\n\n/**\n * Test function.\n *\n * @example <caption>functionName (paramOne: string, paramTwo?: any,\n * paramThree?: any): boolean</caption> test()\n *\n * @param {string} paramOne Parameter description.\n * @param {any} [paramTwo] Parameter description.\n * @param {any} [paramThree] Parameter description.\n * @returns {boolean} Return description.\n */\nconst functionName = function (paramOne, paramTwo,\n  paramThree) {\n  return false;\n};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parserOptions\":{\"ecmaVersion\":2015,\"sourceType\":\"module\"},\"rules\":{\"semi\":[\"error\",\"always\"]}},\"captionRequired\":true,\"checkEslintrc\":false}]\n// Message: @example error (semi): Missing semicolon.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @example ```js\n alert('hello');\n ```\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```js([\\\\s\\\\S]*)```\"}]\n\n/**\n * @example ```js\n alert('hello');\n ```\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"/```js([\\\\s\\\\S]*)```/\"}]\n\n/**\n * @example\n * // arbitrary example content\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkEslintrc\":false}]\n\n/**\n * @example\n * quux(); // does something useful\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"no-undef\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n\n/**\n * @example quux();\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"indent\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n\n/**\n * @example <caption>Valid usage</caption>\n * quux(); // does something useful\n *\n * @example <caption>Invalid usage</caption>\n * quux('random unwanted arg'); // results in an error\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"captionRequired\":true,\"checkEslintrc\":false}]\n\n/**\n * @example test() // eslint-disable-line semi\n */\nfunction quux () {}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkEslintrc\":false,\"noDefaultExampleRules\":true,\"reportUnusedDisableDirectives\":false}]\n\n/**\n * @example\n test() // eslint-disable-line semi\n */\nfunction quux () {}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"allowInlineConfig\":true,\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":true}]\n\n/**\n * @example ```js\n alert('hello')\n ```\n */\nvar quux = {\n\n};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"semi\":[\"error\",\"never\"]}},\"checkEslintrc\":false,\"exampleCodeRegex\":\"```js([\\\\s\\\\S]*)```\"}]\n\n/**\n * @example\n * foo(function (err) {\n *     throw err;\n * });\n */\nfunction quux () {}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"indent\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n\n/**\n * @example\n * const list: number[] = [1, 2, 3];\n * quux(list);\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parser\":\"@typescript-eslint/parser\",\"parserOptions\":{\"ecmaVersion\":6},\"rules\":{\"semi\":[\"error\",\"always\"]}},\"checkEslintrc\":false}]\n\n/**\n * @example const ident = 5;\n *   quux2();\n *   bar();\n */\nfunction quux2 () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"paddedIndent\":2}]\n\n/**\n * @example\n * function quux() {\n *     bar();\n * }\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"rules\":{\"indent\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n\n// Comment\na();\n\nexport default {};\n\n/**\n *\n */\nfunction f () {\n\n}\n\n/**\n * Does quux\n * @example\n * // Do it!\n * quux();\n */\nfunction quux () {\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"plugins\":[\"jsdoc\"],\"rules\":{\"jsdoc/require-file-overview\":[\"error\"]}},\"checkEslintrc\":false,\"noDefaultExampleRules\":false}]\n\n/**\n * @default \"abc\"\n */\nconst str = 'abc';\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkDefaults\":true}]\n\n/**\n * @default\n */\nconst str = 'abc';\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkDefaults\":true}]\n\n/**\n * @param {myType} [name=\"abc\"]\n */\nfunction quux () {\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkParams\":true}]\n\n/**\n * @param {myType} name\n */\nfunction quux () {\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkParams\":true}]\n\n/**\n * @property {myType} [name=\"abc\"]\n */\nconst obj = {};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkProperties\":true}]\n\n/**\n * @property {myType} [name]\n */\nconst obj = {};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkProperties\":true}]\n\n/**\n * @default 'abc'\n */\nconst str = 'abc';\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkDefaults\":false,\"matchingFileNameDefaults\":\"dummy.js\"}]\n\n/**\n * @param {myType} [name='abc']\n */\nfunction quux () {\n}\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkParams\":false,\"matchingFileNameParams\":\"dummy.js\"}]\n\n/**\n * @property {myType} [name='abc']\n */\nconst obj = {};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"checkProperties\":false,\"matchingFileNameProperties\":\"dummy.js\"}]\n\n/**\n * Test function.\n *\n * @example <caption>functionName (paramOne: string, paramTwo?: any,\n * paramThree?: any): boolean</caption> test();\n *\n * @param {string} paramOne Parameter description.\n * @param {any} [paramTwo] Parameter description.\n * @param {any} [paramThree] Parameter description.\n * @returns {boolean} Return description.\n */\nconst functionName = function (paramOne, paramTwo,\n  paramThree) {\n  return false;\n};\n// \"jsdoc/check-examples\": [\"error\"|\"warn\", {\"baseConfig\":{\"parserOptions\":{\"ecmaVersion\":2015,\"sourceType\":\"module\"},\"rules\":{\"semi\":[\"error\",\"always\"]}},\"captionRequired\":true,\"checkEslintrc\":false}]\n````\n\n\n<a name=\"eslint-plugin-jsdoc-rules-check-indentation\"></a>\n### <code>check-indentation</code>\n\nReports invalid padding inside JSDoc blocks.\n\nIgnores parts enclosed in Markdown \"code block\"'s. For example,\nthe following description is not reported:\n\n```js\n/**\n * Some description:\n * ```html\n * <section>\n *   <title>test</title>\n * </section>\n * ```\n */\n```\n\n<a name=\"eslint-plugin-jsdoc-rules-check-indentation-options-2\"></a>\n#### Options\n\nThis rule has an object option.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-indentation-options-2-excludetags\"></a>\n##### <code>excludeTags</code>\n\nArray of tags (e.g., `['example', 'description']`) whose content will be\n\"hidden\" from the `check-indentation` rule. Defaults to `['example']`.\n\nBy default, the whole JSDoc block will be checked for invalid padding.\nThat would include `@example` blocks too, which can get in the way\nof adding full, readable examples of code without ending up with multiple\nlinting issues.\n\nWhen disabled (by passing `excludeTags: []` option), the following code *will*\nreport a padding issue:\n\n```js\n/**\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n */\n```\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A|\n|Recommended|false|\n|Options| `excludeTags` |\n\nThe following patterns are considered problems:\n\n````js\n/**  foo */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * foo\n *\n * @param bar\n *  baz\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * Foo\n *   bar\n */\nclass Moo {}\n// Message: There must be no indentation.\n\n/**\n * foo\n *\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[]}]\n// Message: There must be no indentation.\n\n/**\n * foo\n *\n * @example\n *   aaaa\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * foo\n * ```html\n * <section>\n *   <title>test</title>\n * </section>\n * ```\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * foo\n * ```   aaaa```\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n* @example <caption>\n* Here is a long\n*   indented summary of this\n* example\n* </caption>\n* ```js\n* function hi () {\n*   alert('Hello');\n* }\n* ```\n*/\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[]}]\n// Message: There must be no indentation.\n\n/**\n* @example <caption>\n* Here is a long\n* summary of this\n* example\n* </caption>\n* // Code is not wrapped into fenced code block\n* function hi () {\n*   alert('Hello');\n* }\n*/\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[]}]\n// Message: There must be no indentation.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * foo\n *\n * @param bar\n * baz\n */\nfunction quux () {\n\n}\n\n/*** foo */\nfunction quux () {\n\n}\n\n/**\n * foo\n *\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n */\nfunction quux () {\n\n}\n\n/**\n * foo\n *\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[\"example\",\"returns\"]}]\n\n/**\n * foo\n * ```html\n * <section>\n *   <title>test</title>\n * </section>\n * ```\n * @returns eeee\n */\nfunction quux () {\n\n}\n\n/**\n * foo\n * ```   aaaa```\n * @returns eeee\n */\nfunction quux () {\n\n}\n\n/**\n* @example <caption>\n* Here is a long\n* summary of this\n* example\n* </caption>\n* ```js\n* function hi () {\n*   alert('Hello');\n* }\n* ```\n*/\n// \"jsdoc/check-indentation\": [\"error\"|\"warn\", {\"excludeTags\":[]}]\n````\n\n\n<a name=\"eslint-plugin-jsdoc-rules-check-line-alignment\"></a>\n### <code>check-line-alignment</code>\n\nReports invalid alignment of JSDoc block lines. This is a\n[standard recommended to WordPress code](https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/javascript/#aligning-comments),\nfor example.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-line-alignment-options-3\"></a>\n#### Options\n\nThis rule allows one optional string argument. If it is `\"always\"` then a\nproblem is raised when the lines are not aligned. If it is `\"never\"` then\na problem should be raised when there is more than one space between each\nline's parts. Defaults to `\"never\"`.\n\nNote that in addition to alignment, both options will ensure at least one\nspace is present after the asterisk delimiter.\n\nAfter the string, an options object is allowed with the following properties.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-line-alignment-options-3-tags\"></a>\n##### <code>tags</code>\n\nUse this to change the tags which are sought for alignment changes. *Currently*\n*only works with the \"never\" option.* Defaults to an array of\n`['param', 'arg', 'argument', 'property', 'prop', 'returns', 'return']`.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-line-alignment-options-3-customspacings\"></a>\n##### <code>customSpacings</code>\n\nAn object with any of the following keys set to an integer. Affects spacing:\n\n- `postDelimiter` - after the asterisk (e.g., `*   @param`)\n- `postTag` - after the tag (e.g., `* @param  `)\n- `postType` - after the type (e.g., `* @param {someType}   `)\n- `postName` - after the name (e.g., `* @param {someType} name   `)\n\nIf a spacing is not defined, it defaults to one.\n\n|||\n|---|---|\n|Context|everywhere|\n|Options|(a string matching `\"always\" or \"never\"` and optional object with `tags` and `customSpacings`)|\n|Tags|`param`, `property`, `returns` and others added by `tags`|\n|Aliases|`arg`, `argument`, `prop`, `return`|\n|Recommended|false|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * Function description.\n *\n * @param {string} lorem Description.\n * @param {int} sit Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * With tabs.\n *\n * @param {string} lorem Description.\n * @param {int} sit Description multi words.\n */\n    const fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param {string} lorem - Description.\n * @param {int} sit - Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param {string} lorem Description.\n * @param {int} sit Description multi words.\n */\nconst fn = ( lorem, sit ) => {}\n// \"jsdoc/check-line-alignment\": [\"error\"|\"warn\", \"always\"]\n// Message: Expected JSDoc block lines to be aligned.\n\n/**\n * Function description.\n *\n * @param  {string} lorem Description"},"npm":{"downloads":[{"from":"2021-08-24T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":0},{"from":"2021-08-18T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":589832},{"from":"2021-07-26T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":2965895},{"from":"2021-05-27T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":8615897},{"from":"2021-02-26T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":16243356},{"from":"2020-08-25T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":26223966}],"dependentsCount":386,"starsCount":8},"github":{"starsCount":596,"forksCount":106,"subscribersCount":6,"issues":{"count":781,"openCount":57,"distribution":{"3600":117,"10800":64,"32400":86,"97200":84,"291600":113,"874800":74,"2624400":41,"7873200":75,"23619600":57,"70858800":52,"212576400":18},"isDisabled":false},"contributors":[{"username":"rsimha","commitsCount":1},{"username":"vulkd","commitsCount":9},{"username":"SergeAstapov","commitsCount":2},{"username":"golopot","commitsCount":42},{"username":"hansbergren","commitsCount":2},{"username":"renatho","commitsCount":8},{"username":"yeonjuan","commitsCount":12},{"username":"gajus","commitsCount":154},{"username":"kunagpal","commitsCount":1},{"username":"remcohaszing","commitsCount":6},{"username":"jasminexie","commitsCount":6},{"username":"pdehaan","commitsCount":1},{"username":"Extersky","commitsCount":11},{"username":"dstaley","commitsCount":16},{"username":"thsmi","commitsCount":8},{"username":"anton-rudeshko","commitsCount":1},{"username":"ehacke","commitsCount":1},{"username":"bary12","commitsCount":8},{"username":"fa93hws","commitsCount":6},{"username":"kaidjohnson","commitsCount":2},{"username":"schmetzyannick","commitsCount":1},{"username":"SimenB","commitsCount":1},{"username":"manuth","commitsCount":1},{"username":"james2doyle","commitsCount":1},{"username":"Twoody","commitsCount":3},{"username":"Om4ar","commitsCount":1},{"username":"TuckerWhitehouse","commitsCount":1},{"username":"edg2s","commitsCount":2},{"username":"skeggse","commitsCount":1},{"username":"paulius-valiunas","commitsCount":2},{"username":"blond","commitsCount":1},{"username":"jgoz","commitsCount":2},{"username":"simonseyock","commitsCount":8},{"username":"jens-duttke","commitsCount":1},{"username":"brettz9","commitsCount":1025},{"username":"l1bbcsg","commitsCount":27},{"username":"ahwayakchih","commitsCount":8},{"username":"AndrewLeedham","commitsCount":5},{"username":"bobpaw","commitsCount":1},{"username":"bgrozev","commitsCount":1},{"username":"brokentone","commitsCount":4},{"username":"TimvdLippe","commitsCount":1},{"username":"allthesignals","commitsCount":3},{"username":"jschaf","commitsCount":1},{"username":"bennieswart","commitsCount":2},{"username":"matchai","commitsCount":1},{"username":"whitneyit","commitsCount":2},{"username":"ntwb","commitsCount":3},{"username":"IgorNovozhilov","commitsCount":1},{"username":"Redsandro","commitsCount":1},{"username":"cscott","commitsCount":1},{"username":"doberkofler","commitsCount":1},{"username":"Atec-Nick","commitsCount":1},{"username":"sandersn","commitsCount":7},{"username":"OmgImAlexis","commitsCount":1},{"username":"ptkdev","commitsCount":21},{"username":"mrmlnc","commitsCount":1},{"username":"michalczaplinski","commitsCount":1},{"username":"ajelcocks","commitsCount":1},{"username":"DMartens","commitsCount":1},{"username":"JacobFischer","commitsCount":1},{"username":"sbusch","commitsCount":1},{"username":"tinovyatkin","commitsCount":1},{"username":"rasenplanscher","commitsCount":1},{"username":"hyex","commitsCount":1},{"username":"henriklundgren","commitsCount":1},{"username":"teppeis","commitsCount":2},{"username":"sylveon","commitsCount":2},{"username":"snowystinger","commitsCount":3},{"username":"wwwzbwcom","commitsCount":1}],"commits":[{"from":"2021-08-18T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":1},{"from":"2021-07-26T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":3},{"from":"2021-05-27T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":55},{"from":"2021-02-26T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":201},{"from":"2020-08-25T00:00:00.000Z","to":"2021-08-25T00:00:00.000Z","count":340}]},"source":{"files":{"readmeSize":469223,"testsSize":711641,"hasNpmIgnore":true},"badges":[{"urls":{"original":"https://img.shields.io/npm/v/eslint-plugin-jsdoc.svg?style=flat-square","shields":"https://img.shields.io/npm/v/eslint-plugin-jsdoc.svg","content":"https://img.shields.io/npm/v/eslint-plugin-jsdoc.json"},"info":{"service":"npm","type":"version","modifiers":{"type":"v"}}},{"urls":{"original":"https://img.shields.io/travis/gajus/eslint-plugin-jsdoc/master.svg?style=flat-square","service":"https://api.travis-ci.org/gajus/eslint-plugin-jsdoc.svg?branch=master","shields":"https://img.shields.io/travis/gajus/eslint-plugin-jsdoc/master.svg","content":"https://img.shields.io/travis/gajus/eslint-plugin-jsdoc/master.json"},"info":{"service":"travis","type":"build","modifiers":{"branch":"master"}}}],"linters":["editorconfig","eslint"]}},"evaluation":{"quality":{"carefulness":0.9199999999999999,"tests":0.6,"health":1,"branding":0.3},"popularity":{"communityInterest":786,"downloadsCount":2871965.6666666665,"downloadsAcceleration":11352.767237442928,"dependentsCount":386},"maintenance":{"releasesFrequency":1,"commitsFrequency":1,"openIssues":1,"issuesDistribution":0.3573686718638852}},"score":{"final":0.7706367744824194,"detail":{"quality":0.930098667272069,"popularity":0.4491236263485692,"maintenance":0.9554683002251416}}}