{"analyzedAt":"2021-07-17T18:25:43.491Z","collected":{"metadata":{"name":"url-loader","scope":"unscoped","version":"4.1.1","description":"A loader for webpack which transforms files into base64 URIs","keywords":["webpack"],"date":"2020-10-09T14:09:37.469Z","author":{"name":"Tobias Koppers @sokra"},"publisher":{"username":"evilebottnawi","email":"sheo13666q@gmail.com"},"maintainers":[{"username":"d3viant0ne","email":"wiens.joshua@gmail.com"},{"username":"evilebottnawi","email":"sheo13666q@gmail.com"},{"username":"sokra","email":"tobias.koppers@googlemail.com"},{"username":"jhnns","email":"mail@johannesewald.de"},{"username":"michael-ciniawsky","email":"michael.ciniawsky@gmail.com"},{"username":"thelarkinn","email":"sean.larkin@cuw.edu"}],"repository":{"type":"git","url":"git+https://github.com/webpack-contrib/url-loader.git"},"links":{"npm":"https://www.npmjs.com/package/url-loader","homepage":"https://github.com/webpack-contrib/url-loader","repository":"https://github.com/webpack-contrib/url-loader","bugs":"https://github.com/webpack-contrib/url-loader/issues"},"license":"MIT","dependencies":{"loader-utils":"^2.0.0","mime-types":"^2.1.27","schema-utils":"^3.0.0"},"devDependencies":{"@babel/cli":"^7.11.6","@babel/core":"^7.11.6","@babel/preset-env":"^7.11.5","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@webpack-contrib/defaults":"^6.3.0","@webpack-contrib/eslint-config-webpack":"^3.0.0","babel-jest":"^26.5.2","cross-env":"^7.0.2","del":"^6.0.0","del-cli":"^3.0.1","eslint":"^7.10.0","eslint-config-prettier":"^6.12.0","eslint-plugin-import":"^2.22.1","file-loader":"^6.1.0","husky":"^4.3.0","jest":"^26.5.2","lint-staged":"^10.4.0","memfs":"^3.2.0","mini-svg-data-uri":"^1.2.3","npm-run-all":"^4.1.5","prettier":"^2.1.2","standard-version":"^9.0.0","webpack":"^4.44.2"},"peerDependencies":{"webpack":"^4.0.0 || ^5.0.0","file-loader":"*"},"releases":[{"from":"2021-06-17T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":0},{"from":"2021-04-18T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":0},{"from":"2021-01-18T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":0},{"from":"2020-07-17T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":2},{"from":"2019-07-18T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":8}],"hasTestScript":true,"hasSelectiveFiles":true,"readme":"<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# url-loader\n\nA loader for webpack which transforms files into base64 URIs.\n\n## Getting Started\n\nTo begin, you'll need to install `url-loader`:\n\n```console\n$ npm install url-loader --save-dev\n```\n\n`url-loader` works like\n[`file-loader`](https://github.com/webpack-contrib/file-loader), but can return\na DataURL if the file is smaller than a byte limit.\n\n**index.js**\n\n```js\nimport img from './image.png';\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 8192,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nAnd run `webpack` via your preferred method.\n\n## Options\n\n|             Name              |            Type             |                            Default                            | Description                                                                         |\n| :---------------------------: | :-------------------------: | :-----------------------------------------------------------: | :---------------------------------------------------------------------------------- |\n|     **[`limit`](#limit)**     | `{Boolean\\|Number\\|String}` |                            `true`                             | Specifying the maximum size of a file in bytes.                                     |\n|  **[`mimetype`](#mimetype)**  |     `{Boolean\\|String}`     | based from [mime-types](https://github.com/jshttp/mime-types) | Sets the MIME type for the file to be transformed.                                  |\n|  **[`encoding`](#encoding)**  |     `{Boolean\\|String}`     |                           `base64`                            | Specify the encoding which the file will be inlined with.                           |\n| **[`generator`](#generator)** |        `{Function}`         |           `() => type/subtype;encoding,base64_data`           | You can create you own custom implementation for encoding data.                     |\n|  **[`fallback`](#fallback)**  |         `{String}`          |                         `file-loader`                         | Specifies an alternative loader to use when a target file's size exceeds the limit. |\n|  **[`esModule`](#esmodule)**  |         `{Boolean}`         |                            `true`                             | Use ES modules syntax.                                                              |\n\n### `limit`\n\nType: `Boolean|Number|String`\nDefault: `undefined`\n\nThe limit can be specified via loader options and defaults to no limit.\n\n#### `Boolean`\n\nEnable or disable transform files into base64.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `Number|String`\n\nA `Number` or `String` specifying the maximum size of a file in bytes.\nIf the file size is **equal** or **greater** than the limit [`file-loader`](https://github.com/webpack-contrib/file-loader) will be used (by default) and all query parameters are passed to it.\n\nUsing an alternative to `file-loader` is enabled via the `fallback` option.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 8192,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `mimetype`\n\nType: `Boolean|String`\nDefault: based from [mime-types](https://github.com/jshttp/mime-types)\n\nSpecify the `mimetype` which the file will be inlined with.\nIf unspecified the `mimetype` value will be used from [mime-types](https://github.com/jshttp/mime-types).\n\n#### `Boolean`\n\nThe `true` value allows to generation the `mimetype` part from [mime-types](https://github.com/jshttp/mime-types).\nThe `false` value removes the `mediatype` part from a Data URL (if omitted, defaults to `text/plain;charset=US-ASCII`).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              mimetype: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `String`\n\nSets the MIME type for the file to be transformed.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              mimetype: 'image/png',\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `encoding`\n\nType: `Boolean|String`\nDefault: `base64`\n\nSpecify the `encoding` which the file will be inlined with.\nIf unspecified the `encoding` will be `base64`.\n\n#### `Boolean`\n\nIf you don't want to use any encoding you can set `encoding` to `false` however if you set it to `true` it will use the default encoding `base64`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              encoding: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `String`\n\nIt supports [Node.js Buffers and Character Encodings](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) which are `[\"utf8\",\"utf16le\",\"latin1\",\"base64\",\"hex\",\"ascii\",\"binary\",\"ucs2\"]`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              encoding: 'utf8',\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `generator`\n\nType: `Function`\nDefault: `(mimetype, encoding, content, resourcePath) => mimetype;encoding,base64_content`\n\nYou can create you own custom implementation for encoding data.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|html)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              // The `mimetype` and `encoding` arguments will be obtained from your options\n              // The `resourcePath` argument is path to file.\n              generator: (content, mimetype, encoding, resourcePath) => {\n                if (/\\.html$/i.test(resourcePath)) {\n                  return `data:${mimetype},${content.toString()}`;\n                }\n\n                return `data:${mimetype}${\n                  encoding ? `;${encoding}` : ''\n                },${content.toString(encoding)}`;\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `fallback`\n\nType: `String`\nDefault: `'file-loader'`\n\nSpecifies an alternative loader to use when a target file's size exceeds the limit set in the `limit` option.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              fallback: require.resolve('responsive-loader'),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nThe fallback loader will receive the same configuration options as url-loader.\n\nFor example, to set the quality option of a responsive-loader above use:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              fallback: require.resolve('responsive-loader'),\n              quality: 85,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `esModule`\n\nType: `Boolean`\nDefault: `true`\n\nBy default, `file-loader` generates JS modules that use the ES modules syntax.\nThere are some cases in which using ES modules is beneficial, like in the case of [module concatenation](https://webpack.js.org/plugins/module-concatenation-plugin/) and [tree shaking](https://webpack.js.org/guides/tree-shaking/).\n\nYou can enable a CommonJS module syntax using:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              esModule: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### SVG\n\nSVG can be compressed into a more compact output, avoiding `base64`.\nYou can read about it more [here](https://css-tricks.com/probably-dont-base64-svg/).\nYou can do it using [mini-svg-data-uri](https://github.com/tigt/mini-svg-data-uri) package.\n\n**webpack.config.js**\n\n```js\nconst svgToMiniDataURI = require('mini-svg-data-uri');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              generator: (content) => svgToMiniDataURI(content.toString()),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/url-loader.svg\n[npm-url]: https://npmjs.com/package/url-loader\n[node]: https://img.shields.io/node/v/url-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/url-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/url-loader\n[tests]: https://github.com/webpack-contrib/url-loader/workflows/url-loader/badge.svg\n[tests-url]: https://github.com/webpack-contrib/url-loader/actions\n[cover]: https://codecov.io/gh/webpack-contrib/url-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/url-loader\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=url-loader\n[size-url]: https://packagephobia.now.sh/result?p=url-loader\n\n```\n\n```"},"npm":{"downloads":[{"from":"2021-07-16T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":1299874},{"from":"2021-07-10T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":8041203},{"from":"2021-06-17T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":35353902},{"from":"2021-04-18T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":105562353},{"from":"2021-01-18T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":209816420},{"from":"2020-07-17T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":385317664}],"dependentsCount":7924,"starsCount":64},"github":{"starsCount":1371,"forksCount":148,"subscribersCount":19,"issues":{"count":227,"openCount":4,"distribution":{"3600":54,"10800":17,"32400":21,"97200":26,"291600":12,"874800":15,"2624400":11,"7873200":26,"23619600":26,"70858800":17,"212576400":2},"isDisabled":false},"contributors":[{"username":"threequartersjohn","commitsCount":1},{"username":"tomcraven","commitsCount":1},{"username":"jajaperson","commitsCount":1},{"username":"romanyanke","commitsCount":1},{"username":"vivcogit","commitsCount":1},{"username":"dayyeung","commitsCount":1},{"username":"shama","commitsCount":2},{"username":"simon04","commitsCount":3},{"username":"coryhouse","commitsCount":1},{"username":"insin","commitsCount":1},{"username":"SimenB","commitsCount":1},{"username":"michael-ciniawsky","commitsCount":10},{"username":"Pimm","commitsCount":2},{"username":"smondal","commitsCount":1},{"username":"shellscape","commitsCount":1},{"username":"d3viant0ne","commitsCount":18},{"username":"alexander-akait","commitsCount":14},{"username":"ryantd","commitsCount":1},{"username":"SpaceK33z","commitsCount":2},{"username":"simonkberg","commitsCount":1},{"username":"billyjanitsch","commitsCount":1},{"username":"austinpray","commitsCount":1},{"username":"TimHolzherr","commitsCount":1},{"username":"Jeff-Tian","commitsCount":1},{"username":"aladdin-add","commitsCount":1},{"username":"MattGurney","commitsCount":1},{"username":"EslamHiko","commitsCount":1},{"username":"JoshuaKGoldberg","commitsCount":1},{"username":"cap-Bernardito","commitsCount":1},{"username":"wibron","commitsCount":1},{"username":"ChALkeR","commitsCount":1},{"username":"AndrewRayCode","commitsCount":1},{"username":"kevinzwhuang","commitsCount":1},{"username":"lukebatchelor","commitsCount":1},{"username":"sokra","commitsCount":18},{"username":"EECOLOR","commitsCount":1}],"commits":[{"from":"2021-07-10T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":0},{"from":"2021-06-17T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":0},{"from":"2021-04-18T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":0},{"from":"2021-01-18T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":2},{"from":"2020-07-17T00:00:00.000Z","to":"2021-07-17T00:00:00.000Z","count":7}],"statuses":[{"context":"codecov/patch","state":"success"},{"context":"codecov/project","state":"success"}]},"source":{"files":{"readmeSize":10680,"testsSize":477609,"hasChangelog":true},"badges":[{"urls":{"original":"https://img.shields.io/npm/v/url-loader.svg","shields":"https://img.shields.io/npm/v/url-loader.svg","content":"https://img.shields.io/npm/v/url-loader.json"},"info":{"service":"npm","type":"version","modifiers":{"type":"v"}}},{"urls":{"original":"https://david-dm.org/webpack-contrib/url-loader.svg","service":"https://david-dm.org/webpack-contrib/url-loader.svg","shields":"https://img.shields.io/david/webpack-contrib/url-loader.svg","content":"https://img.shields.io/david/webpack-contrib/url-loader.json"},"info":{"service":"david","type":"dependencies","modifiers":{"statusType":"normal"}}}],"linters":["editorconfig","eslint","prettier"],"coverage":0.99}},"evaluation":{"quality":{"carefulness":0.9999999999999999,"tests":0.9984999999999999,"health":1,"branding":0.3},"popularity":{"communityInterest":1638,"downloadsCount":35187451,"downloadsAcceleration":58195.12800608826,"dependentsCount":7924},"maintenance":{"releasesFrequency":0.9,"commitsFrequency":0.9,"openIssues":1,"issuesDistribution":0.9}},"score":{"final":0.9035122489127875,"detail":{"quality":0.9950622465614993,"popularity":0.7286585399634534,"maintenance":0.999894531306083}}}