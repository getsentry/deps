{"analyzedAt":"2021-07-19T11:49:48.315Z","collected":{"metadata":{"name":"@emotion/babel-plugin","scope":"emotion","version":"11.3.0","description":"A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.","keywords":["styles","emotion","react","css","css-in-js"],"date":"2021-04-08T12:28:04.377Z","author":{"name":"Kye Hohenberger"},"publisher":{"username":"emotion-release-bot","email":"mitchell+emotion-release-bot@hamil.town"},"maintainers":[{"username":"tkh44","email":"kye.hohenberger@gmail.com"},{"username":"mitchellhamilton","email":"mitchell@mitchellhamilton.me"},{"username":"emotion-release-bot","email":"mitchell+emotion-release-bot@hamil.town"},{"username":"andarist","email":"mateuszburzynski@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/emotion-js/emotion.git"},"links":{"npm":"https://www.npmjs.com/package/%40emotion%2Fbabel-plugin","homepage":"https://emotion.sh","repository":"https://github.com/emotion-js/emotion","bugs":"https://github.com/emotion-js/emotion/issues"},"license":"MIT","dependencies":{"@babel/helper-module-imports":"^7.12.13","@babel/plugin-syntax-jsx":"^7.12.13","@babel/runtime":"^7.13.10","@emotion/hash":"^0.8.0","@emotion/memoize":"^0.7.5","@emotion/serialize":"^1.0.2","babel-plugin-macros":"^2.6.1","convert-source-map":"^1.5.0","escape-string-regexp":"^4.0.0","find-root":"^1.1.0","source-map":"^0.5.7","stylis":"^4.0.3"},"devDependencies":{"@babel/core":"^7.13.10","babel-check-duplicated-nodes":"^1.0.0"},"peerDependencies":{"@babel/core":"^7.0.0"},"releases":[{"from":"2021-06-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":0},{"from":"2021-04-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":0},{"from":"2021-01-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":3},{"from":"2020-07-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":9},{"from":"2019-07-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":14}],"hasSelectiveFiles":true,"readme":"# @emotion/babel-plugin\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`@emotion/babel-plugin` is highly recommended, but not required in version 8 and\nabove of Emotion.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev @emotion/babel-plugin\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev @emotion/babel-plugin\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"@emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"@emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": \"dev-only\",\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"@emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins @emotion/babel-plugin script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['@emotion/babel-plugin']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in @emotion/babel-plugin but they will be removed in production builds\n\n### `autoLabel`\n\n`'dev-only' | 'always' | 'never'`, , defaults to `dev-only`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\nEach possible value for this option produces different output code:\n\n- with `dev-only` we optimize the production code, so there are no labels added there, but at the same time we keep labels for development environments,\n- with `always` we always add labels when possible,\n- with `never` we disable this entirely and no labels are added.\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `'dev-only'` or `'always'`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n- `[dirname]` - name of the directory containing the file where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: 'dev-only'\n// labelFormat: '[filename]--[local]'\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/react`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n### `importMap`\n\nThis option allows you to tell @emotion/babel-plugin what imports it should look at to determine what it should transform so if you re-export Emotion's exports, you can still use the Babel transforms\n\nAn example config:\n\n```json\n{\n  \"my-package\": {\n    \"anotherExport\": {\n      \"canonicalImport\": [\"@emotion/styled\", \"default\"],\n      \"styledBaseImport\": [\"my-package/base\", \"anotherExport\"]\n    }\n  },\n  \"some-package\": {\n    \"someExport\": {\n      \"canonicalImport\": [\"@emotion/react\", \"css\"]\n    },\n    \"thisIsTheJsxExport\": {\n      \"canonicalImport\": [\"@emotion/react\", \"jsx\"]\n    }\n  }\n}\n```\n\n## Babel Macros\n\nInstead of using `@emotion/babel-plugin`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport {\n  css,\n  keyframes,\n  injectGlobal,\n  flush,\n  hydrate\n} from '@emotion/css/macro'\nimport { jsx, css, Global, keyframes } from '@emotion/react/macro'\nimport styled from '@emotion/styled/macro'\n```"},"npm":{"downloads":[{"from":"2021-07-18T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":19067},{"from":"2021-07-12T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":528903},{"from":"2021-06-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":2077012},{"from":"2021-04-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":6205096},{"from":"2021-01-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":10557450},{"from":"2020-07-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":11872832}],"dependentsCount":46,"starsCount":0},"github":{"homepage":"https://emotion.sh/","starsCount":13343,"forksCount":854,"subscribersCount":94,"issues":{"count":2386,"openCount":138,"distribution":{"3600":292,"10800":167,"32400":209,"97200":274,"291600":273,"874800":256,"2624400":226,"7873200":232,"23619600":287,"70858800":167,"212576400":3},"isDisabled":false},"contributors":[{"username":"bigslycat","commitsCount":2},{"username":"Ailrun","commitsCount":31},{"username":"bogas04","commitsCount":3},{"username":"yu-kgr","commitsCount":1},{"username":"jimmydief","commitsCount":1},{"username":"chnakamura","commitsCount":1},{"username":"Slapbox","commitsCount":2},{"username":"azizhk","commitsCount":3},{"username":"FLGMwt","commitsCount":1},{"username":"ItsWendell","commitsCount":1},{"username":"jonearley","commitsCount":1},{"username":"osdiab","commitsCount":1},{"username":"ChayalaKaufman","commitsCount":1},{"username":"arcanis","commitsCount":4},{"username":"hasparus","commitsCount":1},{"username":"JakeGinnivan","commitsCount":7},{"username":"mottox2","commitsCount":1},{"username":"kamontat","commitsCount":1},{"username":"juanmaguitar","commitsCount":1},{"username":"SimeonC","commitsCount":2},{"username":"blicksky","commitsCount":1},{"username":"igormartimiano","commitsCount":1},{"username":"Jimmydalecleveland","commitsCount":1},{"username":"mitchellhamilton","commitsCount":527},{"username":"ahutchings","commitsCount":3},{"username":"mansourkheffache","commitsCount":1},{"username":"nitin42","commitsCount":4},{"username":"ChristopherBiscardi","commitsCount":3},{"username":"lifeiscontent","commitsCount":2},{"username":"alexlafroscia","commitsCount":2},{"username":"ifyoumakeit","commitsCount":2},{"username":"EduVencovsky","commitsCount":1},{"username":"JoshuaKGoldberg","commitsCount":2},{"username":"kripod","commitsCount":1},{"username":"lukeed","commitsCount":5},{"username":"ChALkeR","commitsCount":1},{"username":"animecyc","commitsCount":1},{"username":"kentcdodds","commitsCount":2},{"username":"aaronjensen","commitsCount":4},{"username":"iChenLei","commitsCount":2},{"username":"apostolos","commitsCount":2},{"username":"peterpme","commitsCount":2},{"username":"FezVrasta","commitsCount":9},{"username":"karur4n","commitsCount":1},{"username":"probablyup","commitsCount":8},{"username":"efoken","commitsCount":2},{"username":"mnajdova","commitsCount":1},{"username":"vilaboim","commitsCount":1},{"username":"hosmelq","commitsCount":2},{"username":"krzysztofzuraw","commitsCount":2},{"username":"dcastil","commitsCount":2},{"username":"santialbo","commitsCount":1},{"username":"mskelton","commitsCount":1},{"username":"CompuIves","commitsCount":4},{"username":"0xBono","commitsCount":1},{"username":"egdbear","commitsCount":1},{"username":"josephmarkus","commitsCount":1},{"username":"TrySound","commitsCount":2},{"username":"JonathanGuo","commitsCount":1},{"username":"RoystonS","commitsCount":1},{"username":"sanpoChew","commitsCount":1},{"username":"mjcampagna","commitsCount":1},{"username":"greggb","commitsCount":4},{"username":"connor-baer","commitsCount":1},{"username":"eps1lon","commitsCount":3},{"username":"G-Rath","commitsCount":1},{"username":"macalinao","commitsCount":2},{"username":"layershifter","commitsCount":1},{"username":"101arrowz","commitsCount":1},{"username":"karol-majewski","commitsCount":2},{"username":"utopiaio","commitsCount":2},{"username":"alireza-mh","commitsCount":2},{"username":"zslabs","commitsCount":2},{"username":"danieldelcore","commitsCount":2},{"username":"ka2jun8","commitsCount":1},{"username":"Andarist","commitsCount":213},{"username":"tills13","commitsCount":2},{"username":"billyvg","commitsCount":2},{"username":"konradk","commitsCount":2},{"username":"tkh44","commitsCount":21},{"username":"Werter12","commitsCount":2},{"username":"thangngoc89","commitsCount":2},{"username":"ajs139","commitsCount":6},{"username":"magic-akari","commitsCount":1},{"username":"mgroenhoff","commitsCount":4},{"username":"lucasweng","commitsCount":2},{"username":"freddydumont","commitsCount":2},{"username":"tinymachine","commitsCount":2},{"username":"asvetliakov","commitsCount":3},{"username":"andrewdelprete","commitsCount":2},{"username":"goldins","commitsCount":1},{"username":"MostafaNawara","commitsCount":1},{"username":"cameron-martin","commitsCount":5},{"username":"wolszczak96","commitsCount":1},{"username":"Callenowy","commitsCount":1},{"username":"alex-pex","commitsCount":3},{"username":"silvenon","commitsCount":3},{"username":"pcowgill","commitsCount":1},{"username":"troywith77","commitsCount":1}],"commits":[{"from":"2021-07-12T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":0},{"from":"2021-06-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":0},{"from":"2021-04-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":10},{"from":"2021-01-20T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":40},{"from":"2020-07-19T00:00:00.000Z","to":"2021-07-19T00:00:00.000Z","count":161}]},"source":{"files":{"readmeSize":8050,"testsSize":348093,"hasChangelog":true},"badges":[{"urls":{"original":"https://img.shields.io/circleci/project/github/emotion-js/emotion/main.svg","service":"https://circleci.com/gh/emotion-js/emotion/tree/main.svg","shields":"https://img.shields.io/circleci/project/github/emotion-js/emotion/main.svg","content":"https://img.shields.io/circleci/project/github/emotion-js/emotion/main.json"},"info":{"service":"circleci","type":"build","modifiers":{"branch":"main"}}}],"linters":["eslint","prettier"],"coverage":0.97,"outdatedDependencies":{"escape-string-regexp":{"required":"^4.0.0","stable":"5.0.0","latest":"5.0.0"},"babel-plugin-macros":{"required":"^2.6.1","stable":"3.1.0","latest":"3.1.0"},"source-map":{"required":"^0.5.7","stable":"0.7.3","latest":"0.8.0-beta.0"}}}},"evaluation":{"quality":{"carefulness":0.9999999999999999,"tests":0.4455,"health":0.5,"branding":0.55},"popularity":{"communityInterest":14390,"downloadsCount":2068365.3333333333,"downloadsAcceleration":15707.4049086758,"dependentsCount":46},"maintenance":{"releasesFrequency":0.8228595890410959,"commitsFrequency":0.9129315068493151,"openIssues":1,"issuesDistribution":0.5716175684939028}},"score":{"final":0.7802662955289472,"detail":{"quality":0.8577928232723986,"popularity":0.5014116534459647,"maintenance":0.9926696281175429}}}