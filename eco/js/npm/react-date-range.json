{"analyzedAt":"2021-08-14T16:09:36.316Z","collected":{"metadata":{"name":"react-date-range","scope":"unscoped","version":"1.3.0","description":"A React component for choosing dates and date ranges.","keywords":["react","date","range","datepicker","rangepicker"],"date":"2021-06-22T21:50:27.010Z","publisher":{"username":"neoberg","email":"neoberg@gmail.com"},"maintainers":[{"username":"neoberg","email":"neoberg@gmail.com"},{"username":"onurkerimov","email":"onurkerimov@gmail.com"},{"username":"mefallit","email":"sezgisensoz@gmail.com"}],"contributors":[{"name":"Burak Can","email":"neoberg@gmail.com","url":"https://github.com/burakcan"},{"name":"Mehmet Kamil Morcay","email":"mehmetmorcay@gmail.com","url":"https://github.com/mkg0"},{"name":"Kamyar Ghasemlou","email":"github@kamy.me","url":"https://github.com/kamyar"},{"name":"Engin Semih BasmacÄ±","email":"semih.basmaci@gmail.com","url":"https://github.com/mortargrind"},{"name":"Onur Kerimov","email":"onurkerimov@gmail.com","url":"https://github.com/onurkerimov"}],"repository":{"type":"git","url":"git+ssh://git@github.com/hypeserver/react-date-range.git"},"links":{"npm":"https://www.npmjs.com/package/react-date-range","homepage":"https://github.com/hypeserver/react-date-range#readme","repository":"https://github.com/hypeserver/react-date-range","bugs":"http://github.com/hypeserver/react-date-range/issues"},"license":"MIT","dependencies":{"classnames":"^2.2.6","prop-types":"^15.7.2","react-list":"^0.8.13","shallow-equal":"^1.2.1"},"devDependencies":{"@babel/cli":"^7.7.7","@babel/core":"^7.4.4","@babel/plugin-proposal-class-properties":"^7.5.5","@babel/plugin-proposal-export-default-from":"^7.7.4","@babel/preset-env":"^7.4.4","@babel/preset-react":"^7.7.4","autoprefixer":"^9.7.3","babel-eslint":"^10.0.3","babel-loader":"^8.0.6","babel-plugin-date-fns":"^2.0.0","css-loader":"^3.2.0","date-fns":"^2.8.1","enzyme":"^3.11.0","enzyme-adapter-react-16":"^1.15.2","enzyme-to-json":"^3.4.3","eslint":"^6.8.0","eslint-config-prettier":"^6.7.0","eslint-plugin-import":"^2.19.1","eslint-plugin-jsx-a11y":"^6.2.3","eslint-plugin-prettier":"^3.1.2","eslint-plugin-react":"^7.17.0","jest":"^24.9.0","normalize.css":"^8.0.1","postcss":"^7.0.25","postcss-cli":"^6.1.3","postcss-import":"^12.0.1","postcss-loader":"^3.0.0","precss":"^4.0.0","prettier":"^1.19.1","react":"^16.12.0","react-dom":"^16.12.0","react-styleguidist":"^10.4.0","style-loader":"^1.0.0","url-loader":"^3.0.0","webpack":"^4.41.5"},"peerDependencies":{"date-fns":"2.0.0-alpha.7 || >=2.0.0","react":"^0.14 || ^15.0.0-rc || >=15.0"},"releases":[{"from":"2021-07-15T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":0},{"from":"2021-05-16T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":7},{"from":"2021-02-15T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":7},{"from":"2020-08-14T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":8},{"from":"2019-08-15T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":12}],"hasTestScript":true,"readme":"# react-date-range\n[![npm](https://img.shields.io/npm/v/react-date-range)](https://www.npmjs.com/package/react-date-range)\n[![npm](https://img.shields.io/npm/l/react-date-range)]()\n[![npm](https://img.shields.io/npm/dw/react-date-range)](https://www.npmjs.com/package/react-date-range)\n[![sponsors](https://img.shields.io/github/sponsors/hypeserver)](https://github.com/sponsors/hypeserver)\n\n\nA date library agnostic React component for choosing dates and date ranges. Uses [date-fns](http://date-fns.org/) for date operations.\n\n### Why should you use `react-date-range`?\n\n- Stateless date operations\n- Highly configurable\n- Multiple range selection\n- Based on native js dates\n- Drag n Drop selection\n- Keyboard friendly\n\n**Live Demo :** [http://hypeserver.github.io/react-date-range](http://hypeserver.github.io/react-date-range)\n\n![](https://raw.githubusercontent.com/hypeserver/react-date-range/master/demo/ss.png)\n\n\n## Getting Started\n### Installation\n\n```\nnpm install --save react-date-range\n```\nThis plugin expects `react` and `date-fns` as peerDependencies, It means that you need to install them in your project folder.\n\n```\nnpm install --save react date-fns\n```\n\n## Usage\n\nYou need to import skeleton and theme styles first.\n\n```javascript\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n```\n\n### `DatePicker`\n```javascript\nimport { Calendar } from 'react-date-range';\n\nclass MyComponent extends Component {\n  handleSelect(date){\n    console.log(date); // native Date object\n  }\n  render(){\n    return (\n      <Calendar\n        date={new Date()}\n        onChange={this.handleSelect}\n      />\n    )\n  }\n}\n\n```\n\n### `DateRangePicker / DateRange`\n```javascript\nimport { DateRangePicker } from 'react-date-range';\n\nclass MyComponent extends Component {\n  handleSelect(ranges){\n    console.log(ranges);\n    // {\n    //   selection: {\n    //     startDate: [native Date Object],\n    //     endDate: [native Date Object],\n    //   }\n    // }\n  }\n  render(){\n    const selectionRange = {\n      startDate: new Date(),\n      endDate: new Date(),\n      key: 'selection',\n    }\n    return (\n      <DateRangePicker\n        ranges={[selectionRange]}\n        onChange={this.handleSelect}\n      />\n    )\n  }\n}\n\n```\n\n### Options\n\nProperty                             | type      | Default Value    | Description\n-------------------------------------|-----------|------------------|-----------------------------------------------------------------\nlocale                               | Object    | enUS from locale | you can view full list from [here](https://github.com/hypeserver/react-date-range/tree/next/src/locale/index.js). Locales directly exported from [`date-fns/locales`](https://date-fns.org/docs/I18n#supported-languages).\nclassName                            | String    |                  | wrapper classname\nmonths                               | Number    | 1                | rendered month count\nshowSelectionPreview                 | Boolean   | true             | show preview on focused/hovered dates\nshowMonthAndYearPickers              | Boolean   | true             | show select tags for month and year on calendar top, if false it will just display the month and year\nrangeColors                          | String[]  |                  | defines color for selection preview.\nshownDate                            | Date      |                  | initial focus date\nminDate                              | Date      |                  | defines minimum date. Disabled earlier dates\nmaxDate                              | Date      |                  | defines maximum date. Disabled later dates\ndirection                            | String    | 'vertical'       | direction of calendar months. can be `vertical` or `horizontal`\ndisabledDates                        | Date[]    | []               | dates that are disabled\ndisabledDay                          | Func      |                  | predicate function that disable day fn(date: Date)\nscroll                               | Object    | { enabled: false }| infinite scroll behaviour configuration. Check out [Infinite Scroll](#infinite-scrolled-mode) section\nshowMonthArrow                       | Boolean   | true             | show/hide month arrow button\nnavigatorRenderer                    | Func      |                  | renderer for focused date navigation area. fn(currentFocusedDate: Date, changeShownDate: func, props: object)\nranges                               | *Object[] | []               | Defines ranges. array of range object\nmoveRangeOnFirstSelection(DateRange) | Boolean   | false            | move range on startDate selection. Otherwise endDate will replace with startDate unless `retainEndDateOnFirstSelection` is set to true.\nretainEndDateOnFirstSelection(DateRange) | Boolean   | false            | Retain end date when the start date is changed, unless start date is later than end date. Ignored if `moveRangeOnFirstSelection` is set to true.\nonChange(Calendar)                   | Func      |                  | callback function for date changes. fn(date: Date)\nonChange(DateRange)                  | Func      |                  | callback function for range changes. fn(changes). changes contains changed ranges with new `startDate`/`endDate` properties.\ncolor(Calendar)                      | String    | `#3d91ff`        | defines color for selected date in Calendar\ndate(Calendar)                       | Date      |                  | date value for Calendar\nshowDateDisplay(DateRange)           | Boolean   | true             | show/hide selection display row. Uses `dateDisplayFormat` for formatter\nonShownDateChange(DateRange,Calendar)| Function  |                  | Callback function that is called when the shown date changes\ninitialFocusedRange(DateRange)       | Object    |                  | Initial value for focused range. See `focusedRange` for usage.\nfocusedRange(DateRange)              | Object    |                  | It defines which range and step are focused. Common initial value is `[0, 0]`; first value is index of ranges, second one is which step on date range(startDate or endDate).\nonRangeFocusChange(DateRange)        | Object    |                  | Callback function for focus changes\npreview(DateRange)                   | Object    |                  | displays a preview range and overwrite DateRange's default preview. Expected shape: `{ startDate: Date, endDate: Date, color: String }`\nshowPreview(DateRange)               | bool      | true             | visibility of preview\neditableDateInputs(Calendar)         | bool      | false            | whether dates can be edited in the Calendar's input fields\ndragSelectionEnabled(Calendar)       | bool      | true             | whether dates can be selected via drag n drop\nonPreviewChange(DateRange)           | Object    |                  | Callback function for preview changes\ndateDisplayFormat                    | String    | `MMM d, yyyy`    | selected range preview formatter. Check out [date-fns's format option](https://date-fns.org/docs/format)\ndayDisplayFormat                     | String    | `d`              | selected range preview formatter. Check out [date-fns's format option](https://date-fns.org/docs/format)\nweekdayDisplayFormat                 | String    | `E`              | selected range preview formatter. Check out [date-fns's format option](https://date-fns.org/docs/format)\nmonthDisplayFormat                   | String    | `MMM yyyy`       | selected range preview formatter. Check out [date-fns's format option](https://date-fns.org/docs/format)\nweekStartsOn                         | Number    |                  | Whether the week start day that comes from the locale will be overriden. Default value comes from your locale, if no local is specified, note that default locale is enUS\nstartDatePlaceholder                 | String    | `Early`          | Start Date Placeholder\nendDatePlaceholder                   | String    | `Continuous`     | End Date Placeholder\nfixedHeight                          | Boolean   | false            | Since some months require less than 6 lines to show, by setting this prop, you can force 6 lines for all months.\nrenderStaticRangeLabel(`DefinedRange`)| Function |                  | Callback function to be triggered for the static range configurations that have `hasCustomRendering: true` on them. Instead of rendering `staticRange.label`, return value of this callback will be rendered.\nstaticRanges(`DefinedRange`, `DateRangePicker`)  | Array            | [default preDefined ranges](https://github.com/hypeserver/react-date-range/blob/master/src/defaultRanges.js)             | -\ninputRanges(`DefinedRange`, `DateRangePicker`)   | Array            | [default input ranges](https://github.com/hypeserver/react-date-range/blob/master/src/defaultRanges.js)             | -\nariaLabels                           | Object    | {}               | inserts aria-label to inner elements\ndayContentRenderer                   | Function  | null             | Function to customize the rendering of Calendar Day. given a date is supposed to return what to render.\n\n *shape of range:\n ```js\n  {\n    startDate: PropTypes.object,\n    endDate: PropTypes.object,\n    color: PropTypes.string,\n    key: PropTypes.string,\n    autoFocus: PropTypes.bool,\n    disabled: PropTypes.bool,\n    showDateDisplay: PropTypes.bool,\n  }\n```\n\n **shape of ariaLabels:\n ```js\n  {\n    // The key of dateInput should be same as key in range.\n    dateInput: PropTypes.objectOf(\n      PropTypes.shape({\n        startDate: PropTypes.string,\n        endDate: PropTypes.string\n      })\n    ),\n    monthPicker: PropTypes.string,\n    yearPicker: PropTypes.string,\n    prevButton: PropTypes.string,\n    nextButton: PropTypes.string,\n  }\n```\n#### Infinite Scrolled Mode\n\nTo enable infinite scroll set `scroll={{enabled: true}}` basically. Infinite scroll feature is affected by `direction`(rendering direction for months) and `months`(for rendered months count) props directly.\nIf you prefer, you can overwrite calendar sizes with `calendarWidth`/`calendarHeight` or each month's height/withs with `monthWidth`/`monthHeight`/`longMonthHeight` at `scroll` prop.\n\n```js\n  // shape of scroll prop\n  scroll: {\n    enabled: PropTypes.bool,\n    monthHeight: PropTypes.number,\n    longMonthHeight: PropTypes.number, // some months has 1 more row than others\n    monthWidth: PropTypes.number, // just used when direction=\"horizontal\"\n    calendarWidth: PropTypes.number, // defaults monthWidth * months\n    calendarHeight: PropTypes.number, // defaults monthHeight * months\n  }),\n```\n\n\n### Release workflow\n- Merge everything that needs to be in the release to master\n- Open a new release PR than:\n  - bumps version to appropriate one <new_version>\n  - Update CHANGELOG.md\n- Make sure the demo and important features are working as expected\n- After merging, tag the master commit with `release/<new_version>` and let Github Action handle publishing\n- = Profit ð\n\n### TODOs\n\n- Make mobile friendly (integrate tap and swipe actions)\n- Add tests\n- Improve documentation"},"npm":{"downloads":[{"from":"2021-08-13T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":13688},{"from":"2021-08-07T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":86573},{"from":"2021-07-15T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":359894},{"from":"2021-05-16T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":1039759},{"from":"2021-02-15T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":1926644},{"from":"2020-08-14T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":3160310}],"dependentsCount":67,"starsCount":1},"github":{"starsCount":1860,"forksCount":484,"subscribersCount":37,"issues":{"count":509,"openCount":131,"distribution":{"3600":38,"10800":16,"32400":11,"97200":28,"291600":27,"874800":28,"2624400":37,"7873200":68,"23619600":85,"70858800":120,"212576400":51},"isDisabled":false},"contributors":[{"username":"kamyar","commitsCount":34},{"username":"stijndeschuymer","commitsCount":1},{"username":"nmaait","commitsCount":1},{"username":"Junbong","commitsCount":1},{"username":"strada","commitsCount":4},{"username":"nikolaik","commitsCount":1},{"username":"lucyyu24","commitsCount":1},{"username":"kazazor","commitsCount":3},{"username":"jamwise","commitsCount":4},{"username":"mimshwright","commitsCount":3},{"username":"sadams","commitsCount":5},{"username":"Spyna","commitsCount":2},{"username":"greybutton","commitsCount":1},{"username":"altaywtf","commitsCount":1},{"username":"everaldo","commitsCount":1},{"username":"b3ni","commitsCount":1},{"username":"arkadiybutermanov","commitsCount":6},{"username":"natenorberg","commitsCount":1},{"username":"sutrixphattran","commitsCount":1},{"username":"ydagana","commitsCount":1},{"username":"bonny1992","commitsCount":1},{"username":"michaeljonsampson","commitsCount":1},{"username":"CarlRosell","commitsCount":3},{"username":"thijssteel","commitsCount":6},{"username":"aommm","commitsCount":8},{"username":"khuongdv","commitsCount":1},{"username":"trabianmatt","commitsCount":5},{"username":"cheesemacfly","commitsCount":1},{"username":"nikeeshi","commitsCount":1},{"username":"burakcan","commitsCount":28},{"username":"dmfutcher","commitsCount":1},{"username":"beeant","commitsCount":4},{"username":"fmauNeko","commitsCount":1},{"username":"Metevier","commitsCount":1},{"username":"imranolas","commitsCount":1},{"username":"mortargrind","commitsCount":3},{"username":"mkg0","commitsCount":73},{"username":"onionhammer","commitsCount":1},{"username":"wethil","commitsCount":1},{"username":"Yoonseonwoong","commitsCount":1},{"username":"wallwhite","commitsCount":1},{"username":"Markoshd","commitsCount":1},{"username":"jacobrask","commitsCount":2},{"username":"aweber1","commitsCount":1},{"username":"mattfurness","commitsCount":10},{"username":"onurkerimov","commitsCount":76},{"username":"fiberthrone","commitsCount":1},{"username":"emarques3","commitsCount":1}],"commits":[{"from":"2021-08-07T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":0},{"from":"2021-07-15T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":0},{"from":"2021-05-16T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":41},{"from":"2021-02-15T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":45},{"from":"2020-08-14T00:00:00.000Z","to":"2021-08-14T00:00:00.000Z","count":54}]},"source":{"files":{"readmeSize":11169,"testsSize":20458,"hasNpmIgnore":true,"hasChangelog":true},"linters":["eslint","prettier"]}},"evaluation":{"quality":{"carefulness":0.9999999999999999,"tests":0.6,"health":1,"branding":0},"popularity":{"communityInterest":2430,"downloadsCount":346586.3333333333,"downloadsAcceleration":1345.8193302891937,"dependentsCount":67},"maintenance":{"releasesFrequency":1,"commitsFrequency":0.8631335616438356,"openIssues":0.9043876882776686,"issuesDistribution":0}},"score":{"final":0.6069351753044437,"detail":{"quality":0.8448893104859356,"popularity":0.3433033487786463,"maintenance":0.6666063145318195}}}