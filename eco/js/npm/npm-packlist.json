{"analyzedAt":"2021-08-23T17:58:53.814Z","collected":{"metadata":{"name":"npm-packlist","scope":"unscoped","version":"3.0.0","description":"Get a list of the files to add from a folder into an npm package","date":"2021-08-23T17:37:19.253Z","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/","username":"isaacs"},"publisher":{"username":"isaacs","email":"i@izs.me"},"maintainers":[{"username":"fritzy","email":"fritzy@github.com"},{"username":"isaacs","email":"i@izs.me"},{"username":"darcyclarke","email":"darcy@darcyclarke.me"},{"username":"ruyadorno","email":"ruyadorno@hotmail.com"},{"username":"nlf","email":"quitlahok@gmail.com"},{"username":"gar","email":"gar+npm@danger.computer"},{"username":"lukekarrys","email":"luke@lukekarrys.com"}],"repository":{"type":"git","url":"git+https://github.com/npm/npm-packlist.git"},"links":{"npm":"https://www.npmjs.com/package/npm-packlist","homepage":"https://github.com/npm/npm-packlist#readme","repository":"https://github.com/npm/npm-packlist","bugs":"https://github.com/npm/npm-packlist/issues"},"license":"ISC","dependencies":{"glob":"^7.1.6","ignore-walk":"^4.0.1","npm-bundled":"^1.1.1","npm-normalize-package-bin":"^1.0.1"},"devDependencies":{"@npmcli/lint":"^1.0.2","mutate-fs":"^2.1.1","tap":"^15.0.6"},"releases":[{"from":"2021-07-24T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":0},{"from":"2021-05-25T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":0},{"from":"2021-02-24T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":4},{"from":"2020-08-23T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":6},{"from":"2019-08-24T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":17}],"hasTestScript":true,"hasSelectiveFiles":true,"readme":"# npm-packlist\n\n[![Build Status](https://travis-ci.com/npm/npm-packlist.svg?token=hHeDp9pQmz9kvsgRNVHy&branch=master)](https://travis-ci.com/npm/npm-packlist)\n\nGet a list of the files to add from a folder into an npm package.\n\nThese can be handed to [tar](http://npm.im/tar) like so to make an npm\npackage tarball:\n\n```js\nconst packlist = require('npm-packlist')\nconst tar = require('tar')\nconst packageDir = '/path/to/package'\nconst packageTarball = '/path/to/package.tgz'\n\npacklist({ path: packageDir })\n  .then(files => tar.create({\n    prefix: 'package/',\n    cwd: packageDir,\n    file: packageTarball,\n    gzip: true\n  }, files))\n  .then(_ => {\n    // tarball has been created, continue with your day\n  })\n```\n\nThis uses the following rules:\n\n1. If a `package.json` file is found, and it has a `files` list,\n   then ignore everything that isn't in `files`.  Always include the\n   readme, license, notice, changes, changelog, and history files, if\n   they exist, and the package.json file itself.\n2. If there's no `package.json` file (or it has no `files` list), and\n   there is a `.npmignore` file, then ignore all the files in the\n   `.npmignore` file.\n3. If there's no `package.json` with a `files` list, and there's no\n   `.npmignore` file, but there is a `.gitignore` file, then ignore\n   all the files in the `.gitignore` file.\n4. Everything in the root `node_modules` is ignored, unless it's a\n   bundled dependency.  If it IS a bundled dependency, and it's a\n   symbolic link, then the target of the link is included, not the\n   symlink itself.\n4. Unless they're explicitly included (by being in a `files` list, or\n   a `!negated` rule in a relevant `.npmignore` or `.gitignore`),\n   always ignore certain common cruft files:\n\n    1. .npmignore and .gitignore files (their effect is in the package\n       already, there's no need to include them in the package)\n    2. editor junk like `.*.swp`, `._*` and `.*.orig` files\n    3. `.npmrc` files (these may contain private configs)\n    4. The `node_modules/.bin` folder\n    5. Waf and gyp cruft like `/build/config.gypi` and `.lock-wscript`\n    6. Darwin's `.DS_Store` files because wtf are those even\n    7. `npm-debug.log` files at the root of a project\n\n    You can explicitly re-include any of these with a `files` list in\n    `package.json` or a negated ignore file rule.\n\nOnly the `package.json` file in the very root of the project is ever\ninspected for a `files` list.  Below the top level of the root package,\n`package.json` is treated as just another file, and no package-specific\nsemantics are applied.\n\n### Interaction between `package.json` and `.npmignore` rules\n\nFor simplicity, it is best to use _either_ a `files` list in `package.json`\n_or_ a `.npmignore` file, and not both.  If you only use one of these\nmethods, you can skip this documentation section.\n\nThe `files` list in `package.json` is used to direct the exploration of the\ntree.  In other words, that's all the walker will ever look at when\nexploring that level.\n\nIn some cases this can lead to a `.npmignore` file being ignored.  If a\n_directory_ is listed in `files`, then any rules in a root or nested\n`.npmignore` files will be honored.\n\nFor example, with this package.json:\n\n```json\n{\n  \"files\": [ \"dir\" ]\n}\n```\n\na `.npmignore` file at `dir/.npmignore` (and any subsequent\nsub-directories) will be honored.  However, a `.npmignore` at the root\nlevel will be skipped.\n\nConversely, with this package.json:\n\n```\n{\n  \"files\": [\"dir/subdir\"]\n}\n```\n\na `.npmignore` file at `dir/.npmignore` will not be honored.\n\nAny specific file matched by a glob or filename in the package.json `files`\nlist will be included, and cannot be excluded by any `.npmignore` files in\nnested directories, or by a `.npmignore` file in the root package\ndirectory, unless that root `.npmignore` file is also in the `files` list.\n\nThe previous (v1) implementation used in npm 6 and below treated\n`package.json` as a special sort of \"reverse ignore\" file.  That is, it was\nparsed and handled as if it was a `.npmignore` file with `!` prepended to\nall of the globs in the `files` list.  In order to include children of a\ndirectory listed in `files`, they would _also_ have `/**` appended to them.\n\nThis is tricky to explain, but is a significant improvement over the\nprevious (v1) implementation used in npm 6 and below, with the following\nbeneficial properties:\n\n- If you have `{\"files\":[\"lib\"]}` in `package.json`, then the walker will\n  still ignore files such as `lib/.DS_Store` and `lib/.foo.swp`.  The\n  previous implementation would include these files, as they'd be matched\n  by the computed `!lib/**` ignore rule.\n- If you have `{\"files\":[\"lib/a.js\",\"lib/b.js\"]}` in `package.json`, and a\n  `lib/.npmignore` containing `a.js`, then the walker will still include\n  the two files indicated in `package.json`, and ignore the\n  `lib/.npmignore` file.  The previous implementation would mark these\n  files for inclusion, but then _exclude_ them when it came to the nested\n  `.npmignore` file.  (Ignore file semantics dictate that a \"closer\" ignore\n  file always takes precedence.)\n- A file in `lib/pkg-template/package.json` will be included, and its\n  `files` list will not have any bearing on other files being included or\n  skipped.  When treating `package.json` as just Yet Another ignore file,\n  this was not the case, leading to difficulty for modules that aim to\n  initialize a project.\n\nIn general, this walk should work as a reasonable developer would expect.\nMatching human expectation is tricky business, and if you find cases where\nit violates those expectations, [please let us\nknow](https://github.com/npm/npm-packlist/issues).\n\n## API\n\nSame API as [ignore-walk](http://npm.im/ignore-walk), just hard-coded\nfile list and rule sets.\n\nThe `Walker` and `WalkerSync` classes take a `bundled` argument, which\nis a list of package names to include from node_modules.  When calling\nthe top-level `packlist()` and `packlist.sync()` functions, this\nmodule calls into `npm-bundled` directly."},"npm":{"downloads":[{"from":"2021-08-22T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":298658},{"from":"2021-08-16T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":6604195},{"from":"2021-07-24T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":26929874},{"from":"2021-05-25T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":86190483},{"from":"2021-02-24T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":178799435},{"from":"2020-08-23T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":346572767}],"dependentsCount":131,"starsCount":1},"github":{"starsCount":48,"forksCount":26,"subscribersCount":12,"issues":{"count":64,"openCount":6,"distribution":{"3600":3,"10800":7,"32400":0,"97200":0,"291600":1,"874800":6,"2624400":4,"7873200":20,"23619600":10,"70858800":13,"212576400":0},"isDisabled":false},"contributors":[{"username":"larsgw","commitsCount":2},{"username":"iarna","commitsCount":7},{"username":"antonkravc","commitsCount":1},{"username":"evocateur","commitsCount":1},{"username":"shesek","commitsCount":1},{"username":"zkat","commitsCount":3},{"username":"addaleax","commitsCount":1},{"username":"wraithgar","commitsCount":1},{"username":"strugee","commitsCount":1},{"username":"isaacs","commitsCount":121},{"username":"jameshulse","commitsCount":1},{"username":"remcohaszing","commitsCount":1},{"username":"ashleygwilliams","commitsCount":1},{"username":"nlf","commitsCount":2},{"username":"antigremlin","commitsCount":2},{"username":"nixxquality","commitsCount":1}],"commits":[{"from":"2021-08-16T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":3},{"from":"2021-07-24T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":4},{"from":"2021-05-25T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":5},{"from":"2021-02-24T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":18},{"from":"2020-08-23T00:00:00.000Z","to":"2021-08-23T00:00:00.000Z","count":26}]},"source":{"files":{"readmeSize":6009,"testsSize":68474}}},"evaluation":{"quality":{"carefulness":0.7899999999999999,"tests":0.6,"health":1,"branding":0},"popularity":{"communityInterest":103,"downloadsCount":28730161,"downloadsAcceleration":-2009.0497907153622,"dependentsCount":131},"maintenance":{"releasesFrequency":0.9,"commitsFrequency":0.9,"openIssues":1,"issuesDistribution":0.9}},"score":{"final":0.7300065693570875,"detail":{"quality":0.8179011286168503,"popularity":0.384780413756867,"maintenance":0.999894531306083}}}