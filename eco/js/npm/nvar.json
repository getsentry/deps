{"analyzedAt":"2021-08-01T08:39:56.233Z","collected":{"metadata":{"name":"nvar","scope":"unscoped","version":"1.3.1","description":"Reads shell environment variables from a file and assigns them to `process.env` (or anywhere else).","keywords":["env","environment","variable","dotenv","envar","config","shell","settings","init","development","preload"],"date":"2018-04-27T06:13:52.891Z","author":{"name":"Melvin Tiong"},"publisher":{"username":"sneakertack","email":"cy.tiong@gmail.com"},"maintainers":[{"username":"sneakertack","email":"cy.tiong@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/sneakertack/nvar.git"},"links":{"npm":"https://www.npmjs.com/package/nvar","homepage":"https://github.com/sneakertack/nvar#readme","repository":"https://github.com/sneakertack/nvar","bugs":"https://github.com/sneakertack/nvar/issues"},"license":"MIT","devDependencies":{"babel-cli":"^6.24.1","babel-preset-env":"^1.6.1","babel-register":"^6.24.1","coveralls":"^2.13.3","nyc":"^10.3.2","sinon":"^2.4.1","source-map-support":"^0.4.18","tap-spec":"^4.1.1","tape":"^4.9.0"},"releases":[{"from":"2021-07-02T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":0},{"from":"2021-05-03T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":0},{"from":"2021-02-02T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":0},{"from":"2020-08-01T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":0},{"from":"2019-08-02T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":0}],"hasTestScript":true,"readme":"[![Build Status](https://travis-ci.org/sneakertack/nvar.svg?branch=master)](https://travis-ci.org/sneakertack/nvar) ![A static test-count badge (dynamise one day)](https://img.shields.io/badge/tests-58%2F58-brightgreen.svg) [![Coverage Status](https://coveralls.io/repos/github/sneakertack/nvar/badge.svg?branch=master)](https://coveralls.io/github/sneakertack/nvar?branch=master)\n\n## Intro\n\n`nvar` is a Node module that lets you declare environment variables in an envfile (usually `.env` in your app's root folder). When your app starts, `nvar` loads those variables (into `process.env` by default), making it useful for editing your app configuration and API credentials during development.\n\nIt works like (and is inspired by) [dotenv](https://github.com/bkeepers/dotenv) (Ruby), [dotenv](https://github.com/motdotla/dotenv) (Node), and [env2](https://github.com/dwyl/env2). It differs from the popular [dotenv](https://github.com/motdotla/dotenv) library for Node in that `nvar` follows Shell syntax (so if you are already loading environment variables via `source`, you can expect this module to work like a drop-in replacement).\n\n\n## Usage\n\nInstall by running:\n\n```sh\nnpm install --save nvar\n```\n\nMake a `.env` file in your app's root folder:\n\n```sh\n# .env (usually added to .gitignore)\nDB_URL='postgresql://user:password@localhost:5432/mydb'\nGITHUB_API_TOKEN=6495e6cf5fb93d68 # quotes are usually optional.\nexport LOGLEVEL=SEVERE # prepend with 'export' (not required for nvar, but typically found in Bash scripts).\n```\n\nThen, require and call `nvar` at the top of your application code:\n\n```js\n// Note the calling brackets at the end.\nrequire('nvar')();\n\n// Variables that were declared in .env in the application's root folder have now been added to process.env.\nconsole.log(process.env.DB_URL); // Prints 'postgresql://user:password@localhost:5432/mydb'.\nconsole.log(process.env.GITHUB_API_TOKEN); // Prints '6495e6cf5fb93d68'.\nconsole.log(process.env.LOGLEVEL); // Prints 'SEVERE'.\n```\n\nOr, if your `.env` file is somewhere else, then do:\n\n```js\nrequire('nvar')('../somedir/my-env.sh')\n```\n\nOr, if you need to change some other options from the defaults, then do:\n\n```js\nrequire('nvar')({\n  // All options listed.\n  path: '../somedir/set-env.sh', // Filepath to envfile\n  source: 'FOO=BAR', // Alternatively, provide the envfile source directly.\n  target: module.exports, // Assign to something else besides process.env instead.\n  enoent: 'warn', // What should happen if the envfile was not found? Set to null|'warn'|'error'.\n  override: 'all' // Whether to override pre-existing variables. Set to 'all'|'empty'|'none'.\n});\n```\n\n## Writing your envfile\n\n**The TL;DR version:** Write lines of `KEY='VALUE'`. No spaces before/after the `=`. Single-quote your values (and if you need a single-quote literal, escape with `'\\''`).\n\n```sh\nFOO='bar'\nENVIRONMENT='development'\nAPI_TOKEN='12345abc'\nGREETING='What'\\''s your name?'\n```\n\n**The in-depth version:** The following shell-isms are supported, so its very likely that you can use `nvar` to read your existing Bash-`source`d envfile, and vice versa.\n\n```sh\nFOO=bar\nEGGS=halfboiled TOAST=kaya # Multiple assignments on the same line work.\nLUNCH=noodle echo ignored # Disregards shell commands.\n\n# Backslash followed by newline breaks the value across multiple lines.\npi=3.141\\\n59265359\n\n# Prepend with 'export', nvar doesn't mind.\nexport gum=secretly\nexport buns=quietly\n# If all your variables are prepended with 'export', then `source`ing your envfile vs. using nvar would do the same thing, so that's convenient.\n\n# Things like '\\', '$', and whitespace do special things in shell. To prevent, a safe choice is single-quotes, which literalizes almost everything.\nstatement='everything i$ literal,\nincluding newlines,\nso that'\\''s okay.' # Escape single-quotes by writing '\\''.\n\n# Double quotes: Mostly like single-quotes, though parameter expansion still works. See further below.\nVERDICT=\"we've decided\nthat this is pretty !@#\\$-ing \\\"cool\\\".\" # Escape \", $, and \\ with a backslash.\n\n# Concatenation\nFILLERS=\"foo\"bar'baz' # Sets a value of 'foobarbaz' (FYI: concatenation is really why '\\'' works as an escape when single-quoting).\n\n# Parameter expansion of prior variables.\nDB_USER=alice\nDB_PASS=in\nDB_HOST=data.land\nDB_PORT=5432\nDB_NAME=fun\nDB_URL=\"${DB_USER}:${DB_PASS}@$DB_HOST:$DB_PORT/${DB_NAME}\" # Curly braces are optional. Can be done within double quotes, or unquoted.\n```\n\nFeel free to review the [test results](https://github.com/sneakertack/nvar/blob/master/tests/results.txt), which also doubles as a specification for the syntax that can be accepted by the module.\n\n## API\n\nHere is a list of options you can pass in as an options object to `nvar`:\n\n### Options\n\nOption | Default | Description\n--- | --- | ---\n`path`&nbsp;<sup>v1.0</sup> | `'./.env'` |  Location of the envfile to load. If you only want to change this filepath, you can pass it directly as a string argument, instead of wrapping it in an options object.\n`source`&nbsp;<sup>v1.0</sup> | `null` | Alternatively, pass in the assignments directly as text, e.g. `'EGGS=halfboiled\\nTOAST=kaya'`. `path` is ignored if `source` is set.\n`target`&nbsp;<sup>v1.0</sup> | `process.env` | Where to save the assignments to.\n`enoent`&nbsp;<sup>v1.1</sup> | `'warn'` if relying on default `path`, `'error'` if path was specified | Whether to throw an error, log a warning to stderr, or do nothing if the file was not found. Irrelevant if using `source` instead of `path`.\n`override`&nbsp;<sup>v1.3</sup> | `'all'` | If a variable already exists in the environment, should `nvar` override it? `'all'` means the environment can be overriden (default). `'empty'` means only empty `''` or unset variables can be set. `'none'` means only unset variables can be set.<br/><br/><small>_Advanced needs: Need even more control? Pass in a custom function (params `(key, env)`) that returns `true` or `false` instead. E.g. setting `override` to `(key) => !/[A-Z]/.test(key)` overrides variables written in lowercase only._</small>\n\n## Contributing\n\nWhere possible, this module tries to support all shell syntax that might reasonably be expected to appear in a config file. If you believe you have a use case that is not covered, feel free to [raise an issue](https://github.com/sneakertack/nvar/issues)."},"npm":{"downloads":[{"from":"2021-07-31T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":1},{"from":"2021-07-25T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":17},{"from":"2021-07-02T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":102},{"from":"2021-05-03T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":586},{"from":"2021-02-02T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":1677},{"from":"2020-08-01T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":3200}],"dependentsCount":4,"starsCount":1},"github":{"starsCount":10,"forksCount":1,"subscribersCount":1,"issues":{"count":5,"openCount":1,"distribution":{"3600":0,"10800":0,"32400":0,"97200":1,"291600":0,"874800":1,"2624400":1,"7873200":0,"23619600":1,"70858800":0,"212576400":1},"isDisabled":false},"contributors":[{"username":"sneakertack","commitsCount":63}],"commits":[{"from":"2021-07-25T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":0},{"from":"2021-07-02T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":0},{"from":"2021-05-03T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":0},{"from":"2021-02-02T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":0},{"from":"2020-08-01T00:00:00.000Z","to":"2021-08-01T00:00:00.000Z","count":0}],"statuses":[{"context":"coverage/coveralls","state":"success"},{"context":"continuous-integration/travis-ci/push","state":"success"}]},"source":{"files":{"readmeSize":6319,"testsSize":16600,"hasNpmIgnore":true,"hasChangelog":true},"badges":[{"urls":{"original":"https://travis-ci.org/sneakertack/nvar.svg?branch=master","service":"https://api.travis-ci.org/sneakertack/nvar.svg?branch=master","shields":"https://img.shields.io/travis/sneakertack/nvar/master.svg","content":"https://img.shields.io/travis/sneakertack/nvar/master.json"},"info":{"service":"travis","type":"build","modifiers":{"branch":"master"}}},{"urls":{"original":"https://coveralls.io/repos/github/sneakertack/nvar/badge.svg?branch=master","service":"https://coveralls.io/repos/github/sneakertack/nvar/badge.svg?branch=master","shields":"https://img.shields.io/coveralls/sneakertack/nvar/master.svg","content":"https://img.shields.io/coveralls/sneakertack/nvar/master.json"},"info":{"service":"coveralls","type":"coverage","modifiers":{"branch":"master"}}}],"coverage":0.95}},"evaluation":{"quality":{"carefulness":0.8699999999999999,"tests":0.9924999999999999,"health":1,"branding":0.3},"popularity":{"communityInterest":14,"downloadsCount":195.33333333333334,"downloadsAcceleration":-1.2043949771689495,"dependentsCount":4},"maintenance":{"releasesFrequency":0.9,"commitsFrequency":0.9,"openIssues":1,"issuesDistribution":0.9}},"score":{"final":0.6668572923202889,"detail":{"quality":0.9778416253453635,"popularity":0.06726205359871677,"maintenance":0.999894531306083}}}