{"analyzedAt":"2021-07-07T20:11:12.021Z","collected":{"metadata":{"name":"replace-in-file","scope":"unscoped","version":"6.2.0","description":"A simple utility to quickly replace text in one or more files.","keywords":["replace","text","contents","file"],"date":"2021-01-31T20:37:22.202Z","author":{"name":"Adam Reis","email":"adam@reis.nz","url":"https://adam.reiz.nz/","username":"adamreisnz"},"publisher":{"username":"adamreisnz","email":"adam@reis.nz"},"maintainers":[{"username":"adamreisnz","email":"adam@reis.nz"}],"repository":{"type":"git","url":"git+https://github.com/adamreisnz/replace-in-file.git"},"links":{"npm":"https://www.npmjs.com/package/replace-in-file","homepage":"https://github.com/adamreisnz/replace-in-file#readme","repository":"https://github.com/adamreisnz/replace-in-file","bugs":"https://github.com/adamreisnz/replace-in-file/issues"},"license":"MIT","dependencies":{"chalk":"^4.1.0","glob":"^7.1.6","yargs":"^16.2.0"},"devDependencies":{"@babel/core":"^7.12.10","@babel/cli":"^7.12.10","@babel/preset-env":"^7.12.11","@babel/register":"^7.12.10","babel-plugin-istanbul":"^6.0.0","bluebird":"^3.7.2","chai":"^4.2.0","chai-as-promised":"^7.1.1","dirty-chai":"^2.0.1","mocha":"^8.2.1","nyc":"^15.0.1"},"releases":[{"from":"2021-06-07T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":0},{"from":"2021-04-08T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":0},{"from":"2021-01-08T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":2},{"from":"2020-07-07T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":2},{"from":"2019-07-08T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":11}],"hasTestScript":true,"readme":"# Replace in file\n\n[![npm version](https://img.shields.io/npm/v/replace-in-file.svg)](https://www.npmjs.com/package/replace-in-file)\n[![node dependencies](https://david-dm.org/adamreisnz/replace-in-file.svg)](https://david-dm.org/adamreisnz/replace-in-file)\n[![build status](https://travis-ci.org/adamreisnz/replace-in-file.svg?branch=master)](https://travis-ci.org/adamreisnz/replace-in-file)\n[![coverage status](https://coveralls.io/repos/github/adamreisnz/replace-in-file/badge.svg?branch=master)](https://coveralls.io/github/adamreisnz/replace-in-file?branch=master)\n[![github issues](https://img.shields.io/github/issues/adamreisnz/replace-in-file.svg)](https://github.com/adamreisnz/replace-in-file/issues)\n\nA simple utility to quickly replace text in one or more files or globs. Works synchronously or asynchronously with either promises or callbacks. Make a single replacement or multiple replacements at once.\n\n> Hey there 👋🏼, thank you for using `replace-in-file`!\n\n> Sorry for the interruption, but as you probably know, I don’t get paid for maintaining this package, and I also haven't put up a donation thingy of any kind.\n\n> However, I _am_ trying to grow our start-up [Hello Club](https://helloclub.com/?source=npm) internationally, and would _really_ appreciate it if you could have a quick look on our [website](https://helloclub.com/?source=npm) to see what we're all about. 👀\n\n> As the name implies, we offer an [all-in-one club and membership management solution](https://helloclub.com/?source=npm) complete with booking system, automated membership renewals, online payments and integrated access and light control.\n\n> Clubs that have switched to Hello Club have been saving so much time managing their members and finances, and the members themselves really enjoy using it, with overwhelmingly positive feedback.\n\n> Check us out if you belong to any kind of club or if you know someone who helps run a club!\n\n> Thank you so much for your time, now go and replace some data in your files! 🎉\n\n# Index\n- [Installation](#installation)\n- [Basic usage](#basic-usage)\n  - [Asynchronous replacement with `async`/`await`](#asynchronous-replacement-with-asyncawait)\n  - [Asynchronous replacement with promises](asynchronous-replacement-with-promises)\n  - [Asynchronous replacement with callback](#asynchronous-replacement-with-callback)\n  - [Synchronous replacement](#synchronous-replacement)\n  - [Return value](#return-value)\n  - [Counting matches and replacements](#counting-matches-and-replacements)\n- [Advanced usage](#advanced-usage)\n  - [Replace a single file or glob](#replace-a-single-file-or-glob)\n  - [Replace multiple files or globs](#replace-multiple-files-or-globs)\n  - [Replace first occurrence only](#replace-first-occurrence-only)\n  - [Replace all occurrences](#replace-all-occurrences)\n  - [Multiple values with the same replacement](#multiple-values-with-the-same-replacement)\n  - [Custom regular expressions](#custom-regular-expressions)\n  - [Multiple values with different replacements](#multiple-values-with-different-replacements)\n  - [Using callbacks for `from`](#using-callbacks-for-from)\n  - [Using callbacks for `to`](#using-callbacks-for-to)\n  - [Ignore a single file or glob](#ignore-a-single-file-or-glob)\n  - [Ignore multiple files or globs](#ignore-multiple-files-or-globs)\n  - [Allow empty/invalid paths](#allow-emptyinvalid-paths)\n  - [Disable globs](#disable-globs)\n  - [Specify glob configuration](#specify-glob-configuration)\n  - [Making replacements on network drives](#making-replacements-on-network-drives)\n  - [Specify character encoding](#specify-character-encoding)\n  - [Dry run](#dry-run)\n- [CLI usage](#cli-usage)\n- [A note on using globs with the CLI](#a-note-on-using-globs-with-the-cli)\n- [Version information](#version-information)\n- [License](#license)\n\n## Installation\n```shell\n# Using npm, installing to local project\nnpm i --save replace-in-file\n\n# Using npm, installing globally for global cli usage\nnpm i -g replace-in-file\n\n# Using yarn\nyarn add replace-in-file\n```\n\n## Basic usage\n\n```js\n//Load the library and specify options\nconst replace = require('replace-in-file');\nconst options = {\n  files: 'path/to/file',\n  from: /foo/g,\n  to: 'bar',\n};\n```\n\n### Asynchronous replacement with `async`/`await`\n\n```js\ntry {\n  const results = await replace(options)\n  console.log('Replacement results:', results);\n}\ncatch (error) {\n  console.error('Error occurred:', error);\n}\n```\n\n### Asynchronous replacement with promises\n\n```js\nreplace(options)\n  .then(results => {\n    console.log('Replacement results:', results);\n  })\n  .catch(error => {\n    console.error('Error occurred:', error);\n  });\n```\n\n### Asynchronous replacement with callback\n\n```js\nreplace(options, (error, results) => {\n  if (error) {\n    return console.error('Error occurred:', error);\n  }\n  console.log('Replacement results:', results);\n});\n```\n\n### Synchronous replacement\n\n```js\ntry {\n  const results = replace.sync(options);\n  console.log('Replacement results:', results);\n}\ncatch (error) {\n  console.error('Error occurred:', error);\n}\n```\n\n### Return value\n\nThe return value of the library is an array of replacement results against each file that was processed. This includes files in which no replacements were made.\n\nEach result contains the following values:\n\n- `file`: The path to the file that was processed\n- `hasChanged`: Flag to indicate if the file was changed or not\n\n```js\nconst results = replace.sync({\n  files: 'path/to/files/*.html',\n  from: /foo/g,\n  to: 'bar',\n});\n\nconsole.log(results);\n\n// [\n//   {\n//     file: 'path/to/files/file1.html',\n//     hasChanged: true,\n//   },\n//   {\n//     file: 'path/to/files/file2.html',\n//     hasChanged: true,\n//   },\n//   {\n//     file: 'path/to/files/file3.html',\n//     hasChanged: false,\n//   },\n// ]\n\n```\n\nTo get an array of changed files, simply map the results as follows:\n\n```js\nconst changedFiles = results\n  .filter(result => result.hasChanged)\n  .map(result => result.file);\n```\n\n### Counting matches and replacements\nBy setting the `countMatches` configuration flag to `true`, the number of matches and replacements per file will be counted and present in the results array.\n\n- `numMatches`: Indicates the number of times a match was found in the file\n- `numReplacements`: Indicates the number of times a replacement was made in the file\n\nNote that the number of matches can be higher than the number of replacements if a match and replacement are the same string.\n\n```js\nconst results = replace.sync({\n  files: 'path/to/files/*.html',\n  from: /foo/g,\n  to: 'bar',\n  countMatches: true,\n});\n\nconsole.log(results);\n\n// [\n//   {\n//     file: 'path/to/files/file1.html',\n//     hasChanged: true,\n//     numMatches: 3,\n//     numReplacements: 3,\n//   },\n//   {\n//     file: 'path/to/files/file2.html',\n//     hasChanged: true,\n//     numMatches: 1,\n//     numReplacements: 1,\n//   },\n//   {\n//     file: 'path/to/files/file3.html',\n//     hasChanged: false,\n//     numMatches: 0,\n//     numReplacements: 0,\n//   },\n// ]\n```\n\n## Advanced usage\n\n### Replace a single file or glob\n```js\nconst options = {\n  files: 'path/to/file',\n};\n```\n\n### Replace multiple files or globs\n\n```js\nconst options = {\n  files: [\n    'path/to/file',\n    'path/to/other/file',\n    'path/to/files/*.html',\n    'another/**/*.path',\n  ],\n};\n```\n\n### Replace first occurrence only\n\n```js\nconst options = {\n  from: 'foo',\n  to: 'bar',\n};\n```\n\n### Replace all occurrences\nPlease note that the value specified in the `from` parameter is passed straight to the native [String replace method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace). As such, if you pass a string as the `from` parameter, it will _only replace the first occurrence_.\n\nTo replace multiple occurrences at once, you must use a regular expression for the `from` parameter with the global flag enabled, e.g. `/foo/g`.\n\n```js\nconst options = {\n  from: /foo/g,\n  to: 'bar',\n};\n```\n\n### Multiple values with the same replacement\n\nThese will be replaced sequentially.\n\n```js\nconst options = {\n  from: [/foo/g, /baz/g],\n  to: 'bar',\n};\n```\n\n### Multiple values with different replacements\n\nThese will be replaced sequentially.\n\n```js\nconst options = {\n  from: [/foo/g, /baz/g],\n  to: ['bar', 'bax'],\n};\n```\n\n### Custom regular expressions\n\nUse the [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) constructor to create any regular expression.\n\n```js\nconst str = 'foo';\nconst regex = new RegExp('^' + str + 'bar', 'i');\nconst options = {\n  from: regex,\n  to: 'bar',\n};\n```\n\n### Using callbacks for `from`\nYou can also specify a callback that returns a string or a regular expression. The callback receives the name of the file in which the replacement is being performed, thereby allowing the user to tailor the search string. The following example uses a callback to produce a search string dependent on the filename:\n\n```js\nconst options = {\n  files: 'path/to/file',\n  from: (file) => new RegExp(file, 'g'),\n  to: 'bar',\n};\n```\n\n### Using callbacks for `to`\nAs the `to` parameter is passed to the native [String replace method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), you can also specify a callback. The following example uses a callback to convert matching strings to lowercase:\n\n```js\nconst options = {\n  files: 'path/to/file',\n  from: /SomePattern[A-Za-z-]+/g,\n  to: (match) => match.toLowerCase(),\n};\n```\n\nThis callback provides for an extra argument above the String replace method, which is the name of the file in which the replacement is being performed. The following example replaces the matched string with the filename:\n\n```js\nconst options = {\n  files: 'path/to/file',\n  from: /SomePattern[A-Za-z-]+/g,\n  to: (...args) => args.pop(),\n};\n```\n\n### Ignore a single file or glob\n\n```js\nconst options = {\n  ignore: 'path/to/ignored/file',\n};\n```\n\n### Ignore multiple files or globs\n\n```js\nconst options = {\n  ignore: [\n    'path/to/ignored/file',\n    'path/to/other/ignored_file',\n    'path/to/ignored_files/*.html',\n    'another/**/*.ignore',\n  ],\n};\n```\n\nPlease note that there is an [open issue with Glob](https://github.com/isaacs/node-glob/issues/309) that causes ignored patterns to be ignored when using a `./` prefix in your files glob. To work around this, simply remove the prefix, e.g. use `**/*` instead of `./**/*`.\n\n### Allow empty/invalid paths\nIf set to true, empty or invalid paths will fail silently and no error will be thrown. For asynchronous replacement only. Defaults to `false`.\n\n```js\nconst options = {\n  allowEmptyPaths: true,\n};\n```\n\n### Disable globs\nYou can disable globs if needed using this flag. Use this when you run into issues with file paths like files like `//SERVER/share/file.txt`. Defaults to `false`.\n\n```js\nconst options = {\n  disableGlobs: true,\n};\n```\n\n### Specify glob configuration\nSpecify configuration passed to the [glob](https://www.npmjs.com/package/glob) call:\n\n```js\nconst options = {\n  glob: {\n    //Glob settings here\n  },\n};\n```\n\nPlease note that the setting `nodir` will always be passed as `false`.\n\n### Making replacements on network drives\nTo make replacements in files on network drives, you may need to specify the UNC path as the `cwd` config option. This will then be passed to glob and prefixed to your paths accordingly. See [#56](https://github.com/adamreisnz/replace-in-file/issues/56) for more details.\n\n### Specify character encoding\nUse a different character encoding for reading/writing files. Defaults to `utf-8`.\n\n```js\nconst options = {\n  encoding: 'utf8',\n};\n```\n\n### Dry run\nTo do a dry run without actually making replacements, for testing purposes. Defaults to `false`.\n\n```js\nconst options = {\n  dry: true,\n};\n```\n\n## CLI usage\n\n```sh\nreplace-in-file from to some/file.js,some/**/glob.js\n  [--configFile=replace-config.js]\n  [--ignore=ignore/files.js,ignore/**/glob.js]\n  [--encoding=utf-8]\n  [--disableGlobs]\n  [--isRegex]\n  [--verbose]\n  [--quiet]\n  [--dry]\n```\n\nMultiple files or globs can be replaced by providing a comma separated list.\n\nThe flags `--disableGlobs`, `--ignore` and `--encoding` are supported in the CLI.\n\nThe setting `allowEmptyPaths` is not supported in the CLI as the replacement is\nsynchronous, and this setting is only relevant for asynchronous replacement.\n\nTo list the changed files, use the `--verbose` flag. Success output can be suppressed by using the `--quiet` flag.\n\nTo do a dry run without making any actual changes, use `--dry`.\n\nA regular expression may be used for the `from` parameter by specifying the `--isRegex` flag.\n\nThe `from` and `to` parameters, as well as the files list, can be omitted if you provide this\ninformation in a configuration file. You can provide a path to a configuration file\n(either Javascript or JSON) with the `--configFile` flag. This path will be resolved using\nNode’s built in `path.resolve()`, so you can pass in an absolute or relative path.\n\n## A note on using globs with the CLI\nWhen using the CLI, the glob pattern is handled by the operating system. But if you specify the glob pattern in the configuration file, the package will use the glob module from the Node modules, and this can lead to different behaviour despite using the same pattern.\n\nFor example, the following will only look at top level files:\n\n```js\n//config.js\nmodule.exports = {\n  from: /cat/g,\n  to: 'dog',\n};\n```\n\n```sh\nreplace-in-file **  --configFile=config.js\n```\n\nHowever, this example is recursive:\n\n```js\n//config.js\nmodule.exports = {\n  files: '**',\n  from: /cat/g,\n  to: 'dog',\n};\n```\n\n```sh\nreplace-in-file --configFile=config.js\n```\n\nIf you want to do a recursive file search as an argument you must use:\n\n```sh\nreplace-in-file $(ls l {,**/}*)  --configFile=config.js\n```\n\n## Version information\nFrom version 3.0.0 onwards, replace in file requires Node 6 or higher. If you need support for Node 4 or 5, please use version 2.x.x.\n\nFrom version 5.0.0 onwards, replace in file requires Node 8 or higher. If you need support for Node 6, please use version 4.x.x.\n\nSee the [Changelog](CHANGELOG.md) for more information.\n\n## License\n(MIT License)\n\nCopyright 2015-2020, Adam Reis, Co-founder at [Hello Club](https://helloclub.com/?source=npm)"},"npm":{"downloads":[{"from":"2021-07-06T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":85177},{"from":"2021-06-30T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":425083},{"from":"2021-06-07T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":1914971},{"from":"2021-04-08T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":5222765},{"from":"2021-01-08T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":9505643},{"from":"2020-07-07T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":15522827}],"dependentsCount":687,"starsCount":11},"github":{"starsCount":390,"forksCount":44,"subscribersCount":2,"issues":{"count":139,"openCount":9,"distribution":{"3600":13,"10800":13,"32400":8,"97200":19,"291600":22,"874800":17,"2624400":11,"7873200":14,"23619600":10,"70858800":11,"212576400":1},"isDisabled":false},"contributors":[{"username":"RyanZim","commitsCount":2},{"username":"antongolub","commitsCount":1},{"username":"gregmagolan","commitsCount":1},{"username":"akaguny","commitsCount":1},{"username":"jdcrecur","commitsCount":1},{"username":"adamreisnz","commitsCount":171},{"username":"kodie","commitsCount":1},{"username":"JonnySpruce","commitsCount":1},{"username":"davej","commitsCount":1},{"username":"gitgrimbo","commitsCount":1},{"username":"fleck","commitsCount":1},{"username":"brettz9","commitsCount":1},{"username":"gotik","commitsCount":1},{"username":"ryan-codingintrigue","commitsCount":1},{"username":"ovhemert","commitsCount":1},{"username":"Heerschop","commitsCount":1},{"username":"gekim","commitsCount":1},{"username":"maxrimue","commitsCount":2},{"username":"byCedric","commitsCount":2},{"username":"dawsbot","commitsCount":1},{"username":"CxRes","commitsCount":1},{"username":"dependabot[bot]","commitsCount":4}],"commits":[{"from":"2021-06-30T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":0},{"from":"2021-06-07T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":0},{"from":"2021-04-08T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":0},{"from":"2021-01-08T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":5},{"from":"2020-07-07T00:00:00.000Z","to":"2021-07-07T00:00:00.000Z","count":5}],"statuses":[{"context":"coverage/coveralls","state":"success"}]},"source":{"files":{"readmeSize":14282,"testsSize":33786,"hasChangelog":true},"badges":[{"urls":{"original":"https://img.shields.io/npm/v/replace-in-file.svg","shields":"https://img.shields.io/npm/v/replace-in-file.svg","content":"https://img.shields.io/npm/v/replace-in-file.json"},"info":{"service":"npm","type":"version","modifiers":{"type":"v"}}},{"urls":{"original":"https://david-dm.org/adamreisnz/replace-in-file.svg","service":"https://david-dm.org/adamreisnz/replace-in-file.svg","shields":"https://img.shields.io/david/adamreisnz/replace-in-file.svg","content":"https://img.shields.io/david/adamreisnz/replace-in-file.json"},"info":{"service":"david","type":"dependencies","modifiers":{"statusType":"normal"}}},{"urls":{"original":"https://travis-ci.org/adamreisnz/replace-in-file.svg?branch=master","service":"https://api.travis-ci.org/adamreisnz/replace-in-file.svg?branch=master","shields":"https://img.shields.io/travis/adamreisnz/replace-in-file/master.svg","content":"https://img.shields.io/travis/adamreisnz/replace-in-file/master.json"},"info":{"service":"travis","type":"build","modifiers":{"branch":"master"}}},{"urls":{"original":"https://coveralls.io/repos/github/adamreisnz/replace-in-file/badge.svg?branch=master","service":"https://coveralls.io/repos/github/adamreisnz/replace-in-file/badge.svg?branch=master","shields":"https://img.shields.io/coveralls/adamreisnz/replace-in-file/master.svg","content":"https://img.shields.io/coveralls/adamreisnz/replace-in-file/master.json"},"info":{"service":"coveralls","type":"coverage","modifiers":{"branch":"master"}}}],"linters":["editorconfig","eslint"],"coverage":1,"outdatedDependencies":{"yargs":{"required":"^16.2.0","stable":"17.0.1","latest":"17.0.1"}}}},"evaluation":{"quality":{"carefulness":0.9199999999999999,"tests":1,"health":0.75,"branding":0.6},"popularity":{"communityInterest":469,"downloadsCount":1740921.6666666667,"downloadsAcceleration":7896.227035768645,"dependentsCount":687},"maintenance":{"releasesFrequency":0.9,"commitsFrequency":0.9,"openIssues":1,"issuesDistribution":0.9}},"score":{"final":0.7943533582771497,"detail":{"quality":0.9805647696123128,"popularity":0.4292024041037912,"maintenance":0.999894531306083}}}