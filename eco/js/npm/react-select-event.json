{"analyzedAt":"2021-07-06T11:57:37.402Z","collected":{"metadata":{"name":"react-select-event","scope":"unscoped","version":"5.3.0","description":"Simulate react-select events for react-testing-library","keywords":["react-testing-library","dom-testing-library","react-select","testing","javascript","unit-testing"],"date":"2021-03-25T14:03:52.179Z","author":{"name":"Romain Bertrand"},"publisher":{"username":"romgain","email":"romain@brtd.me"},"maintainers":[{"username":"romgain","email":"romain@brtd.me"}],"repository":{"type":"git","url":"git+https://github.com/romgain/react-select-event.git"},"links":{"npm":"https://www.npmjs.com/package/react-select-event","homepage":"https://github.com/romgain/react-select-event#readme","repository":"https://github.com/romgain/react-select-event","bugs":"https://github.com/romgain/react-select-event/issues"},"license":"MIT","dependencies":{"@testing-library/dom":">=7"},"devDependencies":{"@babel/core":"^7.4.5","@babel/plugin-proposal-class-properties":"^7.4.4","@babel/plugin-transform-runtime":"^7.4.4","@babel/preset-env":"^7.4.4","@babel/preset-react":"^7.0.0","@babel/preset-typescript":"^7.3.3","@testing-library/jest-dom":"^5.0.1","@testing-library/react":"^11.0.2","@types/jest":"^26.0.0","@types/react":"^17.0.0","@types/react-select":"^4.0.13","jest":"^26.0.0","prettier":"^2.0.2","react":"^17.0.2","react-dom":"^17.0.2","react-select":"^4.0.2","rimraf":"^3.0.0","rollup":"^2.0.3","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^5.0.0","test-all-versions":"^5.0.0","typescript":"^4.0.2"},"releases":[{"from":"2021-06-06T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":0},{"from":"2021-04-07T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":0},{"from":"2021-01-07T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":3},{"from":"2020-07-06T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":6},{"from":"2019-07-07T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":17}],"hasTestScript":true,"readme":"<div align=\"center\">\n  <h1>react-select-event</h1>\n  <a href=\"https://www.joypixels.com/emoji/1f997\">\n    <img height=\"80\" width=\"80\" alt=\"cricket\" src=\"https://raw.githubusercontent.com/romgain/react-select-event/master/other/cricket.png\" />\n  </a>\n\n  <p>Simulate user events on <a href=\"https://github.com/JedWatson/react-select\">react-select</a> elements, for use with <a href=\"https://github.com/testing-library/react-testing-library\">react-testing-library</a>.</p>\n\n  <br />\n</div>\n\n<hr />\n\n[![npm version](https://badge.fury.io/js/react-select-event.svg)](https://badge.fury.io/js/react-select-event)\n[![Build Status](https://travis-ci.org/romgain/react-select-event.svg?branch=master)](https://travis-ci.org/romgain/react-select-event)\n[![Coverage report](https://codecov.io/gh/romgain/react-select-event/branch/master/graph/badge.svg)](https://codecov.io/gh/romgain/react-select-event)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n## Install\n\n```bash\nnpm install --save-dev react-select-event\n```\n\nImport `react-select-event` in your unit tests:\n\n```js\nimport selectEvent from \"react-select-event\";\n// or\nconst selectEvent = require(\"react-select-event\");\n```\n\n### Supported versions of `react-select`\n\nThis library is tested against all versions of `react-select` starting from `2.1.0`.\n\n## API\n\nEvery helper exported by `react-select-event` takes a handle on the `react-select` input field as its first argument. For instance, this can be: `getByLabelText(\"Your label name\")`.\n\n### `select(input: HTMLElement, optionOrOptions: Matcher | Array<Matcher>, config?: object): Promise<void>`\n\nThe `optionOrOptions` parameter can be any valid dom-testing-library [TextMatch](https://testing-library.com/docs/queries/about#textmatch) object (eg. string, regex, function, number).\n\nSelect one or more values in a react-select dropdown.\n\n```jsx\nconst { getByRole, getByLabelText } = render(\n  <form role=\"form\">\n    <label htmlFor=\"food\">Food</label>\n    <Select options={OPTIONS} name=\"food\" inputId=\"food\" isMulti />\n  </form>\n);\nexpect(getByRole(\"form\")).toHaveFormValues({ food: \"\" });\n\nawait selectEvent.select(getByLabelText(\"Food\"), [\"Strawberry\", \"Mango\"]);\nexpect(getByRole(\"form\")).toHaveFormValues({ food: [\"strawberry\", \"mango\"] });\n\nawait selectEvent.select(getByLabelText(\"Food\"), \"Chocolate\");\nexpect(getByRole(\"form\")).toHaveFormValues({\n  food: [\"strawberry\", \"mango\", \"chocolate\"],\n});\n```\n\nThis also works for [async selects](https://react-select.com/async):\n\n```jsx\nconst { getByRole, getByLabelText } = render(\n  <form role=\"form\">\n    <label htmlFor=\"food\">Food</label>\n    <Async\n      options={[]}\n      loadOptions={fetchTheOptions}\n      name=\"food\"\n      inputId=\"food\"\n      isMulti\n    />\n  </form>\n);\nexpect(getByRole(\"form\")).toHaveFormValues({ food: \"\" });\n\n// start typing to trigger the `loadOptions`\nfireEvent.change(getByLabelText(\"Food\"), { target: { value: \"Choc\" } });\nawait selectEvent.select(getByLabelText(\"Food\"), \"Chocolate\");\nexpect(getByRole(\"form\")).toHaveFormValues({\n  food: [\"chocolate\"],\n});\n```\n\n`select` also accepts an optional `config` parameter.\n`config.container` can be used to specify a custom container to use when the `react-select` dropdown is rendered\nin a portal using `menuPortalTarget`:\n\n```jsx\nconst { getByRole, getByLabelText } = render(\n  <form role=\"form\">\n    <label htmlFor=\"food\">Food</label>\n    <Select\n      options={OPTIONS}\n      name=\"food\"\n      inputId=\"food\"\n      isMulti\n      menuPortalTarget={document.body}\n    />\n  </form>\n);\nawait selectEvent.select(getByLabelText(\"Food\"), [\"Strawberry\", \"Mango\"], {\n  container: document.body,\n});\nexpect(getByRole(\"form\")).toHaveFormValues({ food: [\"strawberry\", \"mango\"] });\n```\n\nThe container can also be passed in as a function if it needs to be lazily evaluated:\n\n```jsx\nconst { getByRole, getByLabelText } = render(\n  <form role=\"form\">\n    <label htmlFor=\"food\">Food</label>\n    <Select\n      options={OPTIONS}\n      name=\"food\"\n      inputId=\"food\"\n      isMulti\n      menuPortalTarget={document.body}\n    />\n  </form>\n);\nawait selectEvent.select(getByLabelText(\"Food\"), [\"Strawberry\", \"Mango\"], {\n  container: () => document.body.querySelector(\"[class$=-menu]\"),\n});\nexpect(getByRole(\"form\")).toHaveFormValues({ food: [\"strawberry\", \"mango\"] });\n```\n\n### `create(input: HTMLElement, option: string, config?: object): Promise<void> }`\n\nCreates and selects a new item. Only applicable to `react-select` [`Creatable`](https://react-select.com/creatable) elements.\n\n```jsx\nconst { getByRole, getByLabelText } = render(\n  <form role=\"form\">\n    <label htmlFor=\"food\">Food</label>\n    <Creatable options={OPTIONS} name=\"food\" inputId=\"food\" />\n  </form>\n);\nexpect(getByRole(\"form\")).toHaveFormValues({ food: \"\" });\nawait selectEvent.create(getByLabelText(\"Food\"), \"papaya\");\nexpect(getByRole(\"form\")).toHaveFormValues({ food: \"papaya\" });\n```\n\n`create` take an optional `config` parameter:\n\n- `config.createOptionText` can be used when [creating elements with a custom label text, using the `formatCreateLabel` prop](https://react-select.com/props#creatable-props).\n- `config.container` can be used when the `react-select` dropdown is rendered in a portal using `menuPortalTarget`.\n- `config.waitForElement` Whether `create` should wait for new option to be populated in the select container. Defaults to `true`.\n\n### `clearFirst(input: HTMLElement): Promise<void>`\n\nClears the first value in the dropdown.\n\n```jsx\nconst { getByRole, getByLabelText } = render(\n  <form role=\"form\">\n    <label htmlFor=\"food\">Food</label>\n    <Creatable\n      defaultValue={OPTIONS[0]}\n      options={OPTIONS}\n      name=\"food\"\n      inputId=\"food\"\n      isMulti\n    />\n  </form>\n);\nexpect(getByRole(\"form\")).toHaveFormValues({ food: \"chocolate\" });\nawait selectEvent.clearFirst(getByLabelText(\"Food\"));\nexpect(getByRole(\"form\")).toHaveFormValues({ food: \"\" });\n```\n\n### `clearAll(input: HTMLElement): Promise<void>`\n\nClears all values in the dropdown.\n\n```jsx\nconst { getByRole, getByLabelText } = render(\n  <form role=\"form\">\n    <label htmlFor=\"food\">Food</label>\n    <Creatable\n      defaultValue={[OPTIONS[0], OPTIONS[1], OPTIONS[2]]}\n      options={OPTIONS}\n      name=\"food\"\n      inputId=\"food\"\n      isMulti\n    />\n  </form>\n);\nexpect(getByRole(\"form\")).toHaveFormValues({\n  food: [\"chocolate\", \"vanilla\", \"strawberry\"],\n});\nawait selectEvent.clearAll(getByLabelText(\"Food\"));\nexpect(getByRole(\"form\")).toHaveFormValues({ food: \"\" });\n```\n\n### `openMenu(input: HTMLElement): void`\n\nOpens the select dropdown menu by focusing the input and simulating a down arrow keypress.\n\n```jsx\nconst { getByLabelText, queryByText } = render(\n  <form>\n    <label htmlFor=\"food\">Food</label>\n    <Select options={[{ label: \"Pizza\", value: 1 }]} inputId=\"food\" />\n  </form>\n);\nexpect(queryByText(\"Pizza\")).toBeNull();\nselectEvent.openMenu(getByLabelText(\"Food\"));\nexpect(getByText(\"Pizza\")).toBeInTheDocument();\n```\n\n## Credits\n\nAll the credit goes to [Daniel](https://stackoverflow.com/users/164268/daniel) and his StackOverflow answer: [https://stackoverflow.com/a/56085734](https://stackoverflow.com/a/56085734)."},"npm":{"downloads":[{"from":"2021-07-05T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":11259},{"from":"2021-06-29T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":90533},{"from":"2021-06-06T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":398016},{"from":"2021-04-07T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":1285840},{"from":"2021-01-07T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":3184054},{"from":"2020-07-06T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":5887237}],"dependentsCount":1,"starsCount":0},"github":{"starsCount":128,"forksCount":16,"subscribersCount":2,"issues":{"count":77,"openCount":8,"distribution":{"3600":16,"10800":7,"32400":5,"97200":12,"291600":9,"874800":11,"2624400":4,"7873200":5,"23619600":7,"70858800":1,"212576400":0},"isDisabled":false},"contributors":[{"username":"fgs-dbudwin","commitsCount":2},{"username":"nathanyoung","commitsCount":1},{"username":"andresleoon","commitsCount":1},{"username":"lpproulx","commitsCount":1},{"username":"eddiemonge","commitsCount":1},{"username":"romgain","commitsCount":58},{"username":"razh","commitsCount":1},{"username":"timkindberg","commitsCount":3},{"username":"Belco90","commitsCount":6}],"commits":[{"from":"2021-06-29T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":0},{"from":"2021-06-06T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":2},{"from":"2021-04-07T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":5},{"from":"2021-01-07T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":13},{"from":"2020-07-06T00:00:00.000Z","to":"2021-07-06T00:00:00.000Z","count":27}],"statuses":[{"context":"continuous-integration/travis-ci/push","state":"success"}]},"source":{"files":{"readmeSize":7200,"testsSize":17153,"hasNpmIgnore":true},"badges":[{"urls":{"original":"https://travis-ci.org/romgain/react-select-event.svg?branch=master","service":"https://api.travis-ci.org/romgain/react-select-event.svg?branch=master","shields":"https://img.shields.io/travis/romgain/react-select-event/master.svg","content":"https://img.shields.io/travis/romgain/react-select-event/master.json"},"info":{"service":"travis","type":"build","modifiers":{"branch":"master"}}}],"linters":["prettier"],"coverage":1}},"evaluation":{"quality":{"carefulness":0.9199999999999999,"tests":1,"health":0.5,"branding":0.15},"popularity":{"communityInterest":155,"downloadsCount":428613.3333333333,"downloadsAcceleration":-325.61099695585926,"dependentsCount":1},"maintenance":{"releasesFrequency":0.9,"commitsFrequency":0.9,"openIssues":1,"issuesDistribution":0.9}},"score":{"final":0.6844462316902327,"detail":{"quality":0.9150784127764643,"popularity":0.17131320542904133,"maintenance":0.999894531306083}}}