{"analyzedAt":"2021-08-10T08:00:47.341Z","collected":{"metadata":{"name":"aws4","scope":"unscoped","version":"1.11.0","description":"Signs and prepares requests using AWS Signature Version 4","date":"2020-10-31T00:08:58.241Z","author":{"name":"Michael Hart","email":"michael.hart.au@gmail.com","url":"https://github.com/mhart","username":"hichaelmart"},"publisher":{"username":"hichaelmart","email":"michael.hart.au@gmail.com"},"maintainers":[{"username":"hichaelmart","email":"michael.hart.au@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/mhart/aws4.git"},"links":{"npm":"https://www.npmjs.com/package/aws4","homepage":"https://github.com/mhart/aws4#readme","repository":"https://github.com/mhart/aws4","bugs":"https://github.com/mhart/aws4/issues"},"license":"MIT","devDependencies":{"mocha":"^2.5.3","should":"^8.4.0"},"releases":[{"from":"2021-07-11T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":0},{"from":"2021-05-12T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":0},{"from":"2021-02-11T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":0},{"from":"2020-08-10T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":3},{"from":"2019-08-11T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":6}],"hasTestScript":true,"readme":"aws4\n----\n\n[![Build Status](https://api.travis-ci.org/mhart/aws4.png?branch=master)](https://travis-ci.org/github/mhart/aws4)\n\nA small utility to sign vanilla Node.js http(s) request options using Amazon's\n[AWS Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).\n\nIf you want to sign and send AWS requests in a modern browser, or an environment like [Cloudflare Workers](https://developers.cloudflare.com/workers/), then check out [aws4fetch](https://github.com/mhart/aws4fetch) â€“ otherwise you can also bundle this library for use [in older browsers](./browser).\n\nThe only AWS service that *doesn't* support v4 as of 2020-05-22 is\n[SimpleDB](https://docs.aws.amazon.com/AmazonSimpleDB/latest/DeveloperGuide/SDB_API.html)\n(it only supports [AWS Signature Version 2](https://github.com/mhart/aws2)).\n\nIt also provides defaults for a number of core AWS headers and\nrequest parameters, making it very easy to query AWS services, or\nbuild out a fully-featured AWS library.\n\nExample\n-------\n\n```javascript\nvar https = require('https')\nvar aws4  = require('aws4')\n\n// to illustrate usage, we'll create a utility function to request and pipe to stdout\nfunction request(opts) { https.request(opts, function(res) { res.pipe(process.stdout) }).end(opts.body || '') }\n\n// aws4 will sign an options object as you'd pass to http.request, with an AWS service and region\nvar opts = { host: 'my-bucket.s3.us-west-1.amazonaws.com', path: '/my-object', service: 's3', region: 'us-west-1' }\n\n// aws4.sign() will sign and modify these options, ready to pass to http.request\naws4.sign(opts, { accessKeyId: '', secretAccessKey: '' })\n\n// or it can get credentials from process.env.AWS_ACCESS_KEY_ID, etc\naws4.sign(opts)\n\n// for most AWS services, aws4 can figure out the service and region if you pass a host\nopts = { host: 'my-bucket.s3.us-west-1.amazonaws.com', path: '/my-object' }\n\n// usually it will add/modify request headers, but you can also sign the query:\nopts = { host: 'my-bucket.s3.amazonaws.com', path: '/?X-Amz-Expires=12345', signQuery: true }\n\n// and for services with simple hosts, aws4 can infer the host from service and region:\nopts = { service: 'sqs', region: 'us-east-1', path: '/?Action=ListQueues' }\n\n// and if you're using us-east-1, it's the default:\nopts = { service: 'sqs', path: '/?Action=ListQueues' }\n\naws4.sign(opts)\nconsole.log(opts)\n/*\n{\n  host: 'sqs.us-east-1.amazonaws.com',\n  path: '/?Action=ListQueues',\n  headers: {\n    Host: 'sqs.us-east-1.amazonaws.com',\n    'X-Amz-Date': '20121226T061030Z',\n    Authorization: 'AWS4-HMAC-SHA256 Credential=ABCDEF/20121226/us-east-1/sqs/aws4_request, ...'\n  }\n}\n*/\n\n// we can now use this to query AWS\nrequest(opts)\n/*\n<?xml version=\"1.0\"?>\n<ListQueuesResponse xmlns=\"https://queue.amazonaws.com/doc/2012-11-05/\">\n...\n*/\n\n// aws4 can infer the HTTP method if a body is passed in\n// method will be POST and Content-Type: 'application/x-www-form-urlencoded; charset=utf-8'\nrequest(aws4.sign({ service: 'iam', body: 'Action=ListGroups&Version=2010-05-08' }))\n/*\n<ListGroupsResponse xmlns=\"https://iam.amazonaws.com/doc/2010-05-08/\">\n...\n*/\n\n// you can specify any custom option or header as per usual\nrequest(aws4.sign({\n  service: 'dynamodb',\n  region: 'ap-southeast-2',\n  method: 'POST',\n  path: '/',\n  headers: {\n    'Content-Type': 'application/x-amz-json-1.0',\n    'X-Amz-Target': 'DynamoDB_20120810.ListTables'\n  },\n  body: '{}'\n}))\n/*\n{\"TableNames\":[]}\n...\n*/\n\n// The raw RequestSigner can be used to generate CodeCommit Git passwords\nvar signer = new aws4.RequestSigner({\n  service: 'codecommit',\n  host: 'git-codecommit.us-east-1.amazonaws.com',\n  method: 'GIT',\n  path: '/v1/repos/MyAwesomeRepo',\n})\nvar password = signer.getDateTime() + 'Z' + signer.signature()\n\n// see example.js for examples with other services\n```\n\nAPI\n---\n\n### aws4.sign(requestOptions, [credentials])\n\nCalculates and populates any necessary AWS headers and/or request\noptions on `requestOptions`. Returns `requestOptions` as a convenience for chaining.\n\n`requestOptions` is an object holding the same options that the Node.js\n[http.request](https://nodejs.org/docs/latest/api/http.html#http_http_request_options_callback)\nfunction takes.\n\nThe following properties of `requestOptions` are used in the signing or\npopulated if they don't already exist:\n\n- `hostname` or `host` (will try to be determined from `service` and `region` if not given)\n- `method` (will use `'GET'` if not given or `'POST'` if there is a `body`)\n- `path` (will use `'/'` if not given)\n- `body` (will use `''` if not given)\n- `service` (will try to be calculated from `hostname` or `host` if not given)\n- `region` (will try to be calculated from `hostname` or `host` or use `'us-east-1'` if not given)\n- `signQuery` (to sign the query instead of adding an `Authorization` header, defaults to false)\n- `headers['Host']` (will use `hostname` or `host` or be calculated if not given)\n- `headers['Content-Type']` (will use `'application/x-www-form-urlencoded; charset=utf-8'`\n  if not given and there is a `body`)\n- `headers['Date']` (used to calculate the signature date if given, otherwise `new Date` is used)\n\nYour AWS credentials (which can be found in your\n[AWS console](https://portal.aws.amazon.com/gp/aws/securityCredentials))\ncan be specified in one of two ways:\n\n- As the second argument, like this:\n\n```javascript\naws4.sign(requestOptions, {\n  secretAccessKey: \"<your-secret-access-key>\",\n  accessKeyId: \"<your-access-key-id>\",\n  sessionToken: \"<your-session-token>\"\n})\n```\n\n- From `process.env`, such as this:\n\n```\nexport AWS_ACCESS_KEY_ID=\"<your-access-key-id>\"\nexport AWS_SECRET_ACCESS_KEY=\"<your-secret-access-key>\"\nexport AWS_SESSION_TOKEN=\"<your-session-token>\"\n```\n\n(will also use `AWS_ACCESS_KEY` and `AWS_SECRET_KEY` if available)\n\nThe `sessionToken` property and `AWS_SESSION_TOKEN` environment variable are optional for signing\nwith [IAM STS temporary credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html).\n\nInstallation\n------------\n\nWith [npm](https://www.npmjs.com/) do:\n\n```\nnpm install aws4\n```\n\nCan also be used [in the browser](./browser).\n\nThanks\n------\n\nThanks to [@jed](https://github.com/jed) for his\n[dynamo-client](https://github.com/jed/dynamo-client) lib where I first\ncommitted and subsequently extracted this code.\n\nAlso thanks to the\n[official Node.js AWS SDK](https://github.com/aws/aws-sdk-js) for giving\nme a start on implementing the v4 signature."},"npm":{"downloads":[{"from":"2021-08-09T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":6983066},{"from":"2021-08-03T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":23659922},{"from":"2021-07-11T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":89225250},{"from":"2021-05-12T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":273760734},{"from":"2021-02-11T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":583620576},{"from":"2020-08-10T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":1118887244}],"dependentsCount":394,"starsCount":11},"github":{"starsCount":580,"forksCount":154,"subscribersCount":8,"issues":{"count":136,"openCount":25,"distribution":{"3600":21,"10800":12,"32400":16,"97200":15,"291600":6,"874800":5,"2624400":8,"7873200":11,"23619600":21,"70858800":9,"212576400":12},"isDisabled":false},"contributors":[{"username":"matthew-andrews","commitsCount":2},{"username":"alirussell","commitsCount":2},{"username":"DanielHeckrath","commitsCount":2},{"username":"mifi","commitsCount":1},{"username":"mhart","commitsCount":119},{"username":"jhford","commitsCount":1},{"username":"nnarhinen","commitsCount":1},{"username":"martingalloar","commitsCount":1}],"commits":[{"from":"2021-08-03T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":0},{"from":"2021-07-11T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":0},{"from":"2021-05-12T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":0},{"from":"2021-02-11T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":0},{"from":"2020-08-10T00:00:00.000Z","to":"2021-08-10T00:00:00.000Z","count":3}],"statuses":[{"context":"continuous-integration/travis-ci/push","state":"success"}]},"source":{"files":{"readmeSize":6486,"testsSize":77628,"hasNpmIgnore":true},"badges":[{"urls":{"original":"https://api.travis-ci.org/mhart/aws4.png?branch=master","service":"https://api.travis-ci.org/mhart/aws4.svg?branch=master","shields":"https://img.shields.io/travis/mhart/aws4/master.svg","content":"https://img.shields.io/travis/mhart/aws4/master.json"},"info":{"service":"travis","type":"build","modifiers":{"branch":"master"}}}]}},"evaluation":{"quality":{"carefulness":0.7899999999999999,"tests":0.85,"health":1,"branding":0.15},"popularity":{"communityInterest":761,"downloadsCount":91253578,"downloadsAcceleration":21405.631278538844,"dependentsCount":394},"maintenance":{"releasesFrequency":0.22191780821917811,"commitsFrequency":0.03452054794520548,"openIssues":1,"issuesDistribution":0}},"score":{"final":0.6324623212995741,"detail":{"quality":0.9384805734490095,"popularity":0.5924860521949422,"maintenance":0.41013723141897573}}}