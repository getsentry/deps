{"analyzedAt":"2021-09-01T03:55:20.634Z","collected":{"metadata":{"name":"gatsby-plugin-mdx","scope":"unscoped","version":"2.13.0","description":"MDX integration for Gatsby","keywords":["gatsby","gatsby-plugin","gatsby-transformer-plugin","mdx","markdown","remark","rehype"],"date":"2021-08-31T18:15:50.769Z","publisher":{"username":"vladar","email":"vladimir.razuvaev@gmail.com"},"maintainers":[{"username":"dschau","email":"dustinschau@gmail.com"},{"username":"jamo","email":"jamo@isotalo.fi"},{"username":"kylemathews","email":"mathews.kyle@gmail.com"},{"username":"pieh","email":"misiek.piechowiak@gmail.com"},{"username":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"username":"wardpeet","email":"ward@coding-tech.com"},{"username":"vladar","email":"vladimir.razuvaev@gmail.com"},{"username":"tylerbarnes","email":"tyler@known.design"},{"username":"fk","email":"sechskilo@gmail.com"},{"username":"smthomas","email":"shane@codekarate.com"},{"username":"lekoarts","email":"lekoarts@gmail.com"},{"username":"rachelbahl","email":"rachel@gatsbyjs.com"},{"username":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"username":"veryspry","email":"ehlinger.matt@gmail.com"},{"username":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"username":"biscarch","email":"chris@christopherbiscardi.com"}],"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-mdx"},"links":{"npm":"https://www.npmjs.com/package/gatsby-plugin-mdx","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-mdx#readme","repository":"https://github.com/gatsbyjs/gatsby","bugs":"https://github.com/gatsbyjs/gatsby/issues"},"license":"MIT","dependencies":{"@babel/core":"^7.14.8","@babel/generator":"^7.14.9","@babel/helper-plugin-utils":"^7.14.0","@babel/plugin-proposal-object-rest-spread":"^7.14.7","@babel/preset-env":"^7.14.9","@babel/preset-react":"^7.14.0","@babel/types":"^7.14.9","camelcase-css":"^2.0.1","change-case":"^3.1.0","core-js":"^3.6.5","dataloader":"^1.4.0","debug":"^4.3.1","escape-string-regexp":"^1.0.5","eval":"^0.1.4","fs-extra":"^8.1.0","gatsby-core-utils":"^2.13.0","gray-matter":"^4.0.2","json5":"^2.1.3","loader-utils":"^1.4.0","lodash":"^4.17.21","mdast-util-to-string":"^1.1.0","mdast-util-toc":"^3.1.0","mime":"^2.4.6","p-queue":"^6.6.2","pretty-bytes":"^5.3.0","remark":"^10.0.1","remark-retext":"^3.1.3","retext-english":"^3.0.4","slugify":"^1.4.4","static-site-generator-webpack-plugin":"^3.4.2","style-to-object":"^0.3.0","underscore.string":"^3.3.5","unified":"^8.4.2","unist-util-map":"^1.0.5","unist-util-remove":"^1.0.3","unist-util-visit":"^1.4.1"},"devDependencies":{"@mdx-js/mdx":"^1.6.16","@mdx-js/react":"^1.6.16","gatsby-plugin-utils":"^1.13.0","jest":"^24.9.0","js-combinatorics":"^1.4.5","react-test-renderer":"^16.13.1"},"peerDependencies":{"@mdx-js/mdx":"^1.0.0","@mdx-js/react":"^1.0.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"releases":[{"from":"2021-08-02T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":19},{"from":"2021-06-03T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":37},{"from":"2021-03-05T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":67},{"from":"2020-09-01T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":123},{"from":"2019-09-02T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":235}],"hasTestScript":true,"readme":"![Logo](./img/gatsby-mdx.png)\n\n> `gatsby-plugin-mdx` is the official integration for using [MDX](https://mdxjs.com)\n> with [Gatsby](https://www.gatsbyjs.org/).\n\n# What’s MDX?\n\nMDX is markdown for the component era. It lets you write JSX embedded inside\nmarkdown. It’s a great combination because it allows you to use markdown’s often\nterse syntax (such as `# heading`) for the little things and JSX for more advanced\ncomponents.\n\n## Why MDX?\n\nBefore MDX, some of the benefits of writing Markdown were lost when integrating with JSX. Implementations were often template string-based which required lots of escaping and cumbersome syntax.\n\nMDX seeks to make writing with Markdown and JSX simpler while being more expressive. Writing is fun again when you combine components, that can even be dynamic or load data, with the simplicity of Markdown for long-form content.\n\n### Read more about MDX\n\n- [📚 Gatsby guide](https://www.gatsbyjs.org/docs/mdx/)\n- [📣 Language](https://mdxjs.com)\n- [👩‍🔬 Specification](https://github.com/mdx-js/specification)\n\n## Table of contents\n\n- [What’s MDX?](#whats-mdx)\n  - [Why MDX?](#why-mdx)\n    - [Read more about MDX](#read-more-about-mdx)\n  - [Table of contents](#table-of-contents)\n  - [Installation](#installation)\n  - [Usage](#usage)\n    - [Configuration](#configuration)\n      - [Extensions](#extensions)\n      - [Default layouts](#default-layouts)\n      - [Imports](#imports)\n      - [Shortcodes](#shortcodes)\n      - [Gatsby remark plugins](#gatsby-remark-plugins)\n      - [Remark plugins](#remark-plugins)\n      - [Rehype plugins](#rehype-plugins)\n      - [Media types](#media-types)\n        - [Explanation](#explanation)\n      - [shouldBlockNodeFromTransformation](#shouldblocknodefromtransformation)\n    - [Components](#components)\n      - [MDXProvider](#mdxprovider)\n        - [Related](#related)\n      - [MDXRenderer](#mdxrenderer)\n  - [License](#license)\n\n## Installation\n\nInstall with npm:\n\n```shell\nnpm install gatsby-plugin-mdx @mdx-js/mdx @mdx-js/react\n```\n\nInstall with yarn:\n\n```shell\nyarn add gatsby-plugin-mdx @mdx-js/mdx @mdx-js/react\n```\n\n## Usage\n\nAfter installing `gatsby-plugin-mdx` you can add it to your plugins list in your\n`gatsby-config.js`.\n\n```js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `pages`,\n        path: `${__dirname}/src/pages/`,\n      },\n    },\n    `gatsby-plugin-mdx`,\n  ],\n}\n```\n\nBy default, this configuration will allow you to automatically create pages\nwith `.mdx` files in `src/pages` and will process any Gatsby nodes\nwith Markdown media types into MDX content.\n\nNote that `gatsby-plugin-mdx` requires `gatsby-source-filesystem` to be present\nand configured to process local markdown files in order to\ngenerate the resulting Gatsby nodes.\n\nTo automatically create pages with `.mdx` from other sources, you also need\nto configure `gatsby-plugin-page-creator`.\n\n```js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `posts`,\n        path: `${__dirname}/src/posts/`,\n      },\n    },\n    {\n      resolve: \"gatsby-plugin-page-creator\",\n      options: {\n        path: `${__dirname}/src/posts`,\n      },\n    },\n    `gatsby-plugin-mdx`,\n  ],\n}\n```\n\n### Configuration\n\n`gatsby-plugin-mdx` exposes a configuration API that can be used similarly to\nany other Gatsby plugin. You can define MDX extensions, layouts, global\nscope, and more.\n\n| Key                                                                       | Default                                | Description                                                           |\n| ------------------------------------------------------------------------- | -------------------------------------- | --------------------------------------------------------------------- |\n| [`extensions`](#extensions)                                               | `[\".mdx\"]`                             | Configure the file extensions that gatsby-plugin-mdx will process     |\n| [`defaultLayouts`](#default-layouts)                                      | `{}`                                   | Set the layout components for MDX source types                        |\n| [`gatsbyRemarkPlugins`](#gatsby-remark-plugins)                           | `[]`                                   | Use Gatsby-specific remark plugins                                    |\n| [`remarkPlugins`](#remark-plugins)                                        | `[]`                                   | Specify remark plugins                                                |\n| [`rehypePlugins`](#rehype-plugins)                                        | `[]`                                   | Specify rehype plugins                                                |\n| [`mediaTypes`](#media-types)                                              | `[\"text/markdown\", \"text/x-markdown\"]` | Determine which media types are processed by MDX                      |\n| [`shouldBlockNodeFromTransformation`](#shouldblocknodefromtransformation) | `(node) => false`                      | Disable MDX transformation for nodes where this function returns true |\n| [`commonmark`](#commonmark)                                               | `false`                                | Use CommonMark                                                        |\n\n#### Extensions\n\nBy default, only files with the `.mdx` file extension are treated as MDX when\nusing `gatsby-source-filesystem`. To use `.md` or other file extensions, you can\ndefine an array of file extensions in the `gatsby-plugin-mdx` section of your\n`gatsby-config.js`.\n\n```js\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        extensions: [`.mdx`, `.md`],\n      },\n    },\n  ],\n}\n```\n\n#### Default layouts\n\n`defaultLayouts` takes an object where the `key` is the `name` key of\nthe `gatsby-source-filesystem` configuration you want to\ntarget. `default` applies to any MDX file that doesn't already have a\nlayout defined, even if it's imported manually using `import MDX from './thing.mdx`.\n\n```js\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `pages`,\n        path: `${__dirname}/src/pages/`,\n      },\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `posts`,\n        path: `${__dirname}/src/posts/`,\n      },\n    },\n    {\n      resolve: \"gatsby-plugin-page-creator\",\n      options: {\n        path: `${__dirname}/src/posts`,\n      },\n    },\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        defaultLayouts: {\n          posts: require.resolve(\"./src/components/posts-layout.js\"),\n          default: require.resolve(\"./src/components/default-page-layout.js\"),\n        },\n      },\n    },\n  ],\n}\n```\n\nMDX has the concept of a layout that is different than the Gatsby\nconcept of a layout. MDX's layouts are written using the default\nexport JavaScript syntax in a single MDX file. An MDX layout will wrap\nthe MDX content in an additional component, so this can be a good\nplace for page layout depending on how you are using MDX.\n\n```javascript\nexport default ({ children }) => (\n  <div>\n    <h1>My Layout</h1>\n    <div>{children}</div>\n  </div>\n)\n\n# My MDX\n\nsome content\n```\n\nor as an import:\n\n```javascript\nimport PageLayout from './src/components/page-layout';\n\nexport default PageLayout\n\n# My MDX\n\nsome content\n```\n\nSometimes you don't want to include the layout in every file, so `gatsby-plugin-mdx`\noffers the option to set default layouts in the `gatsby-config.js` plugin\nconfig. Set the key to the `name` set in the `gatsby-source-filesystem` config.\nIf no matching default layout is found, the `default` default layout is used.\n\nYou can also set `options.defaultLayouts.default` if you only want to\nuse one layout for all MDX pages that don't already have a layout defined.\n\n```js\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby MDX Kitchen Sink`,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        defaultLayouts: {\n          posts: require.resolve(\"./src/components/posts-layout.js\"),\n          default: require.resolve(\"./src/components/default-page-layout.js\"),\n        },\n      },\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `posts`,\n        path: `${__dirname}/src/posts/`,\n      },\n    },\n    {\n      resolve: \"gatsby-plugin-page-creator\",\n      options: {\n        path: `${__dirname}/src/posts`,\n      },\n    },\n  ],\n}\n```\n\n#### Imports\n\nWhen importing a react component into your MDX, you can import it using the `import`\nstatement as in JavaScript.\n\n```mdx\nimport { SketchPicker } from \"react-color\"\n\n# Hello, world!\n\nHere's a color picker!\n\n<SketchPicker />\n```\n\n_**Note:** You should rerun your Gatsby development environment to update imports in MDX files. Otherwise, you'll get a `ReferenceError` for new imports. You can use the shortcodes approach if that is an issue for you._\n\n#### Shortcodes\n\nIf you want to allow usage of a component from anywhere (often referred to as a\nshortcode), you can pass it to the\n[MDXProvider](https://www.gatsbyjs.org/docs/mdx/customizing-components/).\n\n```js\n// src/components/layout.js\nimport React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport { Link } from \"gatsby\"\nimport { YouTube, Twitter, TomatoBox } from \"./ui\"\n\nconst shortcodes = { Link, YouTube, Twitter, TomatoBox }\n\nexport default ({ children }) => (\n  <MDXProvider components={shortcodes}>{children}</MDXProvider>\n)\n```\n\nThen, in any MDX file, you can navigate using `Link` and render `YouTube`, `Twitter`, and `TomatoBox` components without\nan import.\n\n```mdx\n# Hello, world!\n\nHere's a YouTube embed\n\n<TomatoBox>\n  <YouTube id=\"123abc\" />\n</TomatoBox>\n```\n\n[Read more about MDX shortcodes](https://mdxjs.com/blog/shortcodes)\n\n#### Gatsby remark plugins\n\nThis config option is used for compatibility with a set of plugins many people\n[use with remark](https://www.gatsbyjs.org/plugins/?=gatsby-remark-) that require\nthe gatsby environment to function properly. In some cases, like\n[gatsby-remark-prismjs](https://www.gatsbyjs.org/packages/gatsby-remark-prismjs/?=gatsby-remark-),\nit makes more sense to use a library like\n[prism-react-renderer](https://github.com/FormidableLabs/prism-react-renderer)\nto render codeblocks using a [React\ncomponent](/api-reference/mdx-provider). In other cases, like\n[gatsby-remark-images](https://www.gatsbyjs.org/packages/gatsby-remark-images/?=gatsby-remark-),\nthe interaction with the Gatsby APIs is well deserved because the\nimages can be optimized by Gatsby and you should continue using it.\n\n```js\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    `gatsby-remark-images`,\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        gatsbyRemarkPlugins: [\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 590,\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\nUsing a string reference is also supported for `gatsbyRemarkPlugins`.\n\n```js\ngatsbyRemarkPlugins: [`gatsby-remark-images`]\n```\n\n> Note that in the case of `gatsby-remark-images` the plugin needs to be included as both a sub-plugin of gatsby-plugin-mdx and a string entry in the plugins array.\n\n#### Remark plugins\n\nThis is a configuration option that is [mirrored from the core MDX\nprocessing pipeline](https://mdxjs.com/plugins). It enables the use of\n[remark\nplugins](https://github.com/remarkjs/remark/blob/master/doc/plugins.md)\nfor processing MDX content.\n\n```js\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        remarkPlugins: [\n          require(\"remark-abbr\"),\n          // To pass options, use a 2-element array with the\n          // configuration in an object in the second element\n          [require(\"remark-external-links\"), { target: false }],\n        ],\n      },\n    },\n  ],\n}\n```\n\n#### Rehype plugins\n\nThis is a configuration option that is [mirrored from the core MDX\nprocessing pipeline](https://mdxjs.com/plugins). It enables the use of\n[rehype\nplugins](https://github.com/rehypejs/rehype/blob/master/doc/plugins.md)\nfor processing MDX content.\n\n```js\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        rehypePlugins: [\n          // Generate heading ids for rehype-autolink-headings\n          require(\"rehype-slug\"),\n          // To pass options, use a 2-element array with the\n          // configuration in an object in the second element\n          [require(\"rehype-autolink-headings\"), { behavior: \"wrap\" }],\n        ],\n      },\n    },\n  ],\n}\n```\n\n#### Media types\n\nDeciding what content gets processed by `gatsby-plugin-mdx`. This is an\nadvanced option that is useful for dealing with specialized generated\ncontent. It is not intended to be configured for most users.\n\n```js\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        mediaTypes: [`text/markdown`, `text/x-markdown`],\n      },\n    },\n  ],\n}\n```\n\n##### Explanation\n\nGatsby includes the media-type of the content on any given node. For\n`file` nodes, we choose whether to process the content with MDX or not\nby the file extension. For remote content or generated content, we\nchoose which nodes to process by looking at the media type.\n\n#### shouldBlockNodeFromTransformation\n\nGiven a function `(node) => Boolean` allows you to decide for each node if it should be transformed or not.\n\n```js\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        shouldBlockNodeFromTransformation(node) {\n          return (\n            [`NPMPackage`, `NPMPackageReadme`].includes(node.internal.type) ||\n            (node.internal.type === `File` &&\n              path.parse(node.dir).dir.endsWith(`packages`))\n          )\n        },\n      },\n    },\n  ],\n}\n```\n\n#### CommonMark\n\nMDX will be parsed using CommonMark.\n\n### Components\n\nMDX and `gatsby-plugin-mdx` use components for different things like rendering\nand component mappings.\n\n#### MDXProvider\n\n`MDXProvider` is a React component that allows you to replace the\nrendering of tags in MDX content. It does this by providing a list of\ncomponents via context to the internal `MDXTag` component that handles\nrendering of base tags like `p` and `h1`. There are two special tags\nthat can be replaced too: `inlineCode` and `wrapper`. `inlineCode` is\nfor inline `<code>` and `wrapper` is the special element that wraps\nall of the MDX content.\n\n```jsx\nimport { MDXProvider } from \"@mdx-js/react\"\n\nconst MyH1 = props => <h1 style={{ color: \"tomato\" }} {...props} />\nconst MyParagraph = props => (\n  <p style={{ fontSize: \"18px\", lineHeight: 1.6 }} {...props} />\n)\n\nconst components = {\n  h1: MyH1,\n  p: MyParagraph,\n}\n\nexport const wrapRootElement = ({ element }) => (\n  <MDXProvider components={components}>{element}</MDXProvider>\n)\n```\n\nThe following components can be customized with the MDXProvider:\n\n<!-- prettier-ignore-start -->\n\n| Tag             | Name                                                                 | Syntax                                              |\n| --------------- | -------------------------------------------------------------------- | --------------------------------------------------- |\n| `p`             | [Paragraph](https://github.com/syntax-tree/mdast#paragraph)          |                                                     |\n| `h1`            | [Heading 1](https://github.com/syntax-tree/mdast#heading)            | `#`                                                 |\n| `h2`            | [Heading 2](https://github.com/syntax-tree/mdast#heading)            | `##`                                                |\n| `h3`            | [Heading 3](https://github.com/syntax-tree/mdast#heading)            | `###`                                               |\n| `h4`            | [Heading 4](https://github.com/syntax-tree/mdast#heading)            | `####`                                              |\n| `h5`            | [Heading 5](https://github.com/syntax-tree/mdast#heading)            | `#####`                                             |\n| `h6`            | [Heading 6](https://github.com/syntax-tree/mdast#heading)            | `######`                                            |\n| `thematicBreak` | [Thematic break](https://github.com/syntax-tree/mdast#thematicbreak) | `***`                                               |\n| `blockquote`    | [Blockquote](https://github.com/syntax-tree/mdast#blockquote)        | `>`                                                 |\n| `ul`            | [List](https://github.com/syntax-tree/mdast#list)                    | `-`                                                 |\n| `ol`            | [Ordered list](https://github.com/syntax-tree/mdast#list)            | `1.`                                                |\n| `li`            | [List item](https://github.com/syntax-tree/mdast#listitem)           |                                                     |\n| `table`         | [Table](https://github.com/syntax-tree/mdast#table)                  | `--- | --- | ---`                                   |\n| `tr`            | [Table row](https://github.com/syntax-tree/mdast#tablerow)           | `This | is | a | table row`                         |\n| `td`/`th`       | [Table cell](https://github.com/syntax-tree/mdast#tablecell)         |                                                     |\n| `pre`           | [Pre](https://github.com/syntax-tree/mdast#code)                     |                                                     |\n| `code`          | [Code](https://github.com/syntax-tree/mdast#code)                    |                                                     |\n| `em`            | [Emphasis](https://github.com/syntax-tree/mdast#emphasis)            | `_emphasis_`                                        |\n| `strong`        | [Strong](https://github.com/syntax-tree/mdast#strong)                | `**strong**`                                        |\n| `delete`        | [Delete](https://github.com/syntax-tree/mdast#delete)                | `~~strikethrough~~`                                 |\n| `inlineCode`    | [InlineCode](https://github.com/syntax-tree/mdast#inlinecode)        |                                                     |\n| `hr`            | [Break](https://github.com/syntax-tree/mdast#break)                  | `---`                                               |\n| `a`             | [Link](https://github.com/syntax-tree/mdast#link)                    | `<https://mdxjs.com>` or `[MDX](https://mdxjs.com)` |\n| `img`           | [Image](https://github.com/syntax-tree/mdast#image)                  | `![alt](https://mdx-logo.now.sh)`                   |\n<!-- prettier-ignore-end -->\n\nIt's important to define the `components` you pass in a stable way\nso that the references don't change if you want to be able to navigate\nto a hash. That's why we defined `components` outside of any render\nfunctions in these examples.\n\nYou can also expose any custom component to every mdx file using\n`MDXProvider`. See [Shortcodes](#shortcodes)\n\n##### Related\n\n- [MDX components](https://mdxjs.com/getting-started/#mdxprovider)\n\n#### MDXRenderer\n\n`MDXRenderer` is a React component that takes _compiled_ MDX content and\nrenders it. You will need to use this if your MDX content is coming\nfrom a GraphQL page query or `StaticQuery`.\n\n`MDXRenderer` takes any prop and passes it on to your MDX content,\njust like a normal React component.\n\n```jsx\n<MDXRenderer title=\"My Stuff!\">{mdx.body}</MDXRenderer>\n```\n\nUsing a page query:\n\n```jsx\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\n\nexport default class MyPageLayout {\n  render() {\n    return <MDXRenderer>{this.props.data.mdx.body}</MDXRenderer>\n  }\n}\n\nexport const pageQuery = graphql`\n  query MDXQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      id\n      body\n    }\n  }\n`\n```\n\n## Troubleshooting\n\n### Excerpts for non-latin languages\n\nBy default, `excerpt` uses `underscore.string/prune` which doesn't handle non-latin characters ([https://github.com/epeli/underscore.string/issues/418](https://github.com/epeli/underscore.string/issues/418)).\n\nIf that is the case, you can set `truncate` option on `excerpt` field, like:\n\n```graphql\n{\n  markdownRemark {\n    excerpt(truncate: true)\n  }\n}\n```\n\n## License\n\nMIT"},"npm":{"downloads":[{"from":"2021-08-31T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":0},{"from":"2021-08-25T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":38568},{"from":"2021-08-02T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":227098},{"from":"2021-06-03T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":724439},{"from":"2021-03-05T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":1794179},{"from":"2020-09-01T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":3661601}],"dependentsCount":411,"starsCount":0},"github":{"homepage":"https://www.gatsbyjs.com","starsCount":51198,"forksCount":9856,"subscribersCount":880,"issues":{"count":31524,"openCount":454,"distribution":{"3600":4955,"10800":2794,"32400":2904,"97200":4592,"291600":4059,"874800":3494,"2624400":2651,"7873200":3050,"23619600":2028,"70858800":957,"212576400":40},"isDisabled":false},"contributors":[{"username":"axe312ger","commitsCount":64},{"username":"nihgwu","commitsCount":30},{"username":"ascorbic","commitsCount":240},{"username":"devrchancay","commitsCount":13},{"username":"ThomasWang","commitsCount":17},{"username":"abhiaiyer91","commitsCount":13},{"username":"caitlinthefirst","commitsCount":16},{"username":"davidbailey00","commitsCount":67},{"username":"resir014","commitsCount":17},{"username":"hashimwarren","commitsCount":51},{"username":"shannonbux","commitsCount":268},{"username":"amberleyromo","commitsCount":112},{"username":"Khaledgarbaya","commitsCount":27},{"username":"jbolda","commitsCount":22},{"username":"Simply007","commitsCount":14},{"username":"ooloth","commitsCount":18},{"username":"fabien0102","commitsCount":13},{"username":"polarathene","commitsCount":12},{"username":"arcanis","commitsCount":23},{"username":"tesseralis","commitsCount":158},{"username":"me4502","commitsCount":16},{"username":"renovate[bot]","commitsCount":116},{"username":"daydream05","commitsCount":16},{"username":"smthomas","commitsCount":12},{"username":"Slashgear","commitsCount":17},{"username":"scottyeck","commitsCount":20},{"username":"KyleAMathews","commitsCount":2980},{"username":"LekoArts","commitsCount":379},{"username":"ChangoMan","commitsCount":12},{"username":"0x80","commitsCount":32},{"username":"coreyward","commitsCount":13},{"username":"sasurau4","commitsCount":12},{"username":"TylerBarnes","commitsCount":67},{"username":"greglobinski","commitsCount":21},{"username":"alexandernanberg","commitsCount":25},{"username":"erquhart","commitsCount":19},{"username":"jbampton","commitsCount":76},{"username":"oorestisime","commitsCount":26},{"username":"duffn","commitsCount":23},{"username":"fk","commitsCount":217},{"username":"kawamataryo","commitsCount":13},{"username":"jamo","commitsCount":56},{"username":"johno","commitsCount":75},{"username":"Ekwuno","commitsCount":22},{"username":"lannonbr","commitsCount":89},{"username":"herecydev","commitsCount":23},{"username":"jquense","commitsCount":110},{"username":"wardpeet","commitsCount":444},{"username":"muescha","commitsCount":301},{"username":"cassiebeckley","commitsCount":16},{"username":"webinista","commitsCount":23},{"username":"dandv","commitsCount":21},{"username":"vladar","commitsCount":235},{"username":"meganesu","commitsCount":38},{"username":"jlengstorf","commitsCount":47},{"username":"laurieontech","commitsCount":150},{"username":"madalynrose","commitsCount":16},{"username":"docwhat","commitsCount":14},{"username":"Moocar","commitsCount":51},{"username":"benjaminhoffman","commitsCount":14},{"username":"sebastienfi","commitsCount":35},{"username":"mottox2","commitsCount":64},{"username":"mathieudutour","commitsCount":13},{"username":"mgienow","commitsCount":84},{"username":"dennari","commitsCount":12},{"username":"ChristopherBiscardi","commitsCount":186},{"username":"stefanprobst","commitsCount":138},{"username":"pieh","commitsCount":842},{"username":"mxstbr","commitsCount":96},{"username":"DanielSLew","commitsCount":20},{"username":"gillkyle","commitsCount":107},{"username":"calcsam","commitsCount":133},{"username":"pvdz","commitsCount":240},{"username":"janosh","commitsCount":22},{"username":"m-allanson","commitsCount":354},{"username":"kripod","commitsCount":15},{"username":"ehowey","commitsCount":16},{"username":"CanRau","commitsCount":18},{"username":"elrumordelaluz","commitsCount":13},{"username":"ollelauribostrom","commitsCount":13},{"username":"benstepp","commitsCount":27},{"username":"iamtraction","commitsCount":9},{"username":"DSchau","commitsCount":354},{"username":"NickyMeuleman","commitsCount":14},{"username":"szimek","commitsCount":12},{"username":"blainekasten","commitsCount":95},{"username":"gesposito","commitsCount":13},{"username":"moonmeister","commitsCount":27},{"username":"sidharthachatterjee","commitsCount":433},{"username":"tsriram","commitsCount":29},{"username":"abhishekjakhar","commitsCount":33},{"username":"hoobdeebla","commitsCount":23},{"username":"marcysutton","commitsCount":24},{"username":"freiksenet","commitsCount":119},{"username":"kkemple","commitsCount":26},{"username":"anubhavsrivastava","commitsCount":16},{"username":"avigoldman","commitsCount":31},{"username":"MichaelDeBoey","commitsCount":24},{"username":"phacks","commitsCount":13},{"username":"Js-Brecht","commitsCount":17}],"commits":[{"from":"2021-08-25T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":15},{"from":"2021-08-02T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":123},{"from":"2021-06-03T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":489},{"from":"2021-03-05T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":999},{"from":"2020-09-01T00:00:00.000Z","to":"2021-09-01T00:00:00.000Z","count":2398}]},"source":{"files":{"readmeSize":20569,"testsSize":68484,"hasChangelog":true},"badges":[{"urls":{"original":"https://circleci.com/gh/gatsbyjs/gatsby.svg?style=shield","service":"https://circleci.com/gh/gatsbyjs/gatsby.svg","shields":"https://img.shields.io/circleci/project/github/gatsbyjs/gatsby.svg","content":"https://img.shields.io/circleci/project/github/gatsbyjs/gatsby.json"},"info":{"service":"circleci","type":"build"}},{"urls":{"original":"https://img.shields.io/npm/v/gatsby.svg","shields":"https://img.shields.io/npm/v/gatsby.svg","content":"https://img.shields.io/npm/v/gatsby.json"},"info":{"service":"npm","type":"version","modifiers":{"type":"v"}}},{"urls":{"original":"https://img.shields.io/npm/dm/gatsby.svg","shields":"https://img.shields.io/npm/dm/gatsby.svg","content":"https://img.shields.io/npm/dm/gatsby.json"},"info":{"service":"npm","type":"downloads","modifiers":{"type":"dm"}}},{"urls":{"original":"https://img.shields.io/npm/dt/gatsby.svg","shields":"https://img.shields.io/npm/dt/gatsby.svg","content":"https://img.shields.io/npm/dt/gatsby.json"},"info":{"service":"npm","type":"downloads","modifiers":{"type":"dt"}}}],"linters":["editorconfig","eslint","prettier"],"outdatedDependencies":{"escape-string-regexp":{"required":"^1.0.5","stable":"5.0.0","latest":"5.0.0"},"retext-english":{"required":"^3.0.4","stable":"4.1.0","latest":"4.1.0"},"unist-util-map":{"required":"^1.0.5","stable":"3.0.0","latest":"3.0.0"},"remark-retext":{"required":"^3.1.3","stable":"5.0.0","latest":"5.0.0"},"dataloader":{"required":"^1.4.0","stable":"2.0.0","latest":"2.0.0"},"mdast-util-to-string":{"required":"^1.1.0","stable":"3.1.0","latest":"3.1.0"},"unist-util-remove":{"required":"^1.0.3","stable":"3.1.0","latest":"3.1.0"},"loader-utils":{"required":"^1.4.0","stable":"2.0.0","latest":"2.0.0"},"change-case":{"required":"^3.1.0","stable":"4.1.2","latest":"4.1.2"},"unist-util-visit":{"required":"^1.4.1","stable":"4.0.0","latest":"4.0.0"},"mdast-util-toc":{"required":"^3.1.0","stable":"6.1.0","latest":"6.1.0"},"p-queue":{"required":"^6.6.2","stable":"7.1.0","latest":"7.1.0"},"remark":{"required":"^10.0.1","stable":"14.0.1","latest":"14.0.1"},"fs-extra":{"required":"^8.1.0","stable":"10.0.0","latest":"10.0.0"},"unified":{"required":"^8.4.2","stable":"10.1.0","latest":"10.1.0"}}}},"evaluation":{"quality":{"carefulness":0.9199999999999999,"tests":0.6,"health":0.5,"branding":0.6},"popularity":{"communityInterest":62034,"downloadsCount":241479.66666666666,"downloadsAcceleration":-631.4931697108066,"dependentsCount":411},"maintenance":{"releasesFrequency":1,"commitsFrequency":1,"openIssues":1,"issuesDistribution":0.8106320330807016}},"score":{"final":0.7751738860249744,"detail":{"quality":0.8740257766917109,"popularity":0.4659822034284249,"maintenance":0.9996353766214641}}}