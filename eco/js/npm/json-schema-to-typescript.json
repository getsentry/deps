{"analyzedAt":"2021-07-11T16:17:46.385Z","collected":{"metadata":{"name":"json-schema-to-typescript","scope":"unscoped","version":"10.1.4","description":"compile json schema to typescript typings","keywords":["json","schema","typescript","compile","transpile","api","interface","typing","share"],"date":"2021-03-29T03:53:48.092Z","author":{"name":"Boris Cherny","email":"boris@performancejs.com","url":"http://performancejs.com/","username":"bcherny"},"publisher":{"username":"bcherny","email":"boris@performancejs.com"},"maintainers":[{"username":"bcherny","email":"boris@performancejs.com"}],"repository":{"type":"git","url":"git+https://github.com/bcherny/json-schema-to-typescript.git"},"links":{"npm":"https://www.npmjs.com/package/json-schema-to-typescript","homepage":"https://github.com/bcherny/json-schema-to-typescript#readme","repository":"https://github.com/bcherny/json-schema-to-typescript","bugs":"https://github.com/bcherny/json-schema-to-typescript/issues"},"license":"MIT","dependencies":{"@types/json-schema":"^7.0.6","@types/lodash":"^4.14.168","@types/prettier":"^2.1.5","cli-color":"^2.0.0","get-stdin":"^8.0.0","glob":"^7.1.6","glob-promise":"^3.4.0","is-glob":"^4.0.1","json-schema-ref-parser":"^9.0.6","json-stringify-safe":"^5.0.1","lodash":"^4.17.20","minimist":"^1.2.5","mkdirp":"^1.0.4","mz":"^2.7.0","prettier":"^2.2.0"},"devDependencies":{"@types/cli-color":"^2.0.0","@types/glob":"^7.1.3","@types/is-glob":"^4.0.1","@types/minimist":"^1.2.1","@types/mkdirp":"^1.0.1","@types/mz":"^2.7.2","@types/node":"^14.14.10","@types/rimraf":"^3.0.0","@typescript-eslint/eslint-plugin":"^4.8.2","@typescript-eslint/parser":"^4.8.2","ava":"^3.13.0","browserify":"^17.0.0","browserify-shim":"^3.8.14","concurrently":"^5.3.0","eslint":"^7.14.0","eslint-config-prettier":"^6.15.0","eslint-plugin-prettier":"^3.1.4","rimraf":"^3.0.2","shx":"^0.3.3","tsify":"^5.0.2","typescript":"^4.1.2"},"releases":[{"from":"2021-06-11T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":0},{"from":"2021-04-12T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":0},{"from":"2021-01-12T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":3},{"from":"2020-07-11T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":10},{"from":"2019-07-12T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":20}],"hasTestScript":true,"readme":"# json-schema-to-typescript [![Build Status][build]](https://github.com/bcherny/json-schema-to-typescript/actions?query=branch%3Amaster+workflow%3ACI) [![npm]](https://www.npmjs.com/package/json-schema-to-typescript) [![mit]](https://opensource.org/licenses/MIT)\n\n[build]: https://img.shields.io/github/workflow/status/bcherny/json-schema-to-typescript/CI/master?style=flat-square\n[npm]: https://img.shields.io/npm/v/json-schema-to-typescript.svg?style=flat-square\n[mit]: https://img.shields.io/npm/l/json-schema-to-typescript.svg?style=flat-square\n\n> Compile json schema to typescript typings\n\n## Example\n\nInput:\n```json\n{\n  \"title\": \"Example Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"age\": {\n      \"description\": \"Age in years\",\n      \"type\": \"integer\",\n      \"minimum\": 0\n    },\n    \"hairColor\": {\n      \"enum\": [\"black\", \"brown\", \"blue\"],\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"required\": [\"firstName\", \"lastName\"]\n}\n```\n\nOutput:\n```ts\nexport interface ExampleSchema {\n  firstName: string;\n  lastName: string;\n  /**\n   * Age in years\n   */\n  age?: number;\n  hairColor?: \"black\" | \"brown\" | \"blue\";\n}\n```\n\n## Installation\n\n```sh\n# Using Yarn:\nyarn add json-schema-to-typescript\n\n# Or, using NPM:\nnpm install json-schema-to-typescript --save\n```\n\n## Usage\n\n```js\nimport { compile, compileFromFile } from 'json-schema-to-typescript'\n\n// compile from file\ncompileFromFile('foo.json')\n  .then(ts => fs.writeFileSync('foo.d.ts', ts))\n\n// or, compile a JS object\nlet mySchema = {\n  properties: [...]\n}\ncompile(mySchema, 'MySchema')\n  .then(ts => ...)\n```\n\nSee [server demo](example) and [browser demo](https://github.com/bcherny/json-schema-to-typescript-browser) for full examples.\n\n## Options\n\n`compileFromFile` and `compile` accept options as their last argument (all keys are optional):\n\n| key | type | default | description |\n|-|-|-|-|\n| bannerComment | string | `\"/* tslint:disable */\\n/**\\n* This file was automatically generated by json-schema-to-typescript.\\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\\n* and run json-schema-to-typescript to regenerate this file.\\n*/\"` | Disclaimer comment prepended to the top of each generated file |\n| cwd | string | `process.cwd()` | Root directory for resolving [`$ref`](https://tools.ietf.org/id/draft-pbryan-zyp-json-ref-03.html)s |\n| declareExternallyReferenced | boolean | `true` | Declare external schemas referenced via `$ref`? |\n| enableConstEnums | boolean | `true` | Prepend enums with [`const`](https://www.typescriptlang.org/docs/handbook/enums.html#computed-and-constant-members)? |\n| format | boolean | `true` | Format code? Set this to `false` to improve performance. |\n| ignoreMinAndMaxItems | boolean | `false` | Ignore maxItems and minItems for `array` types, preventing tuples being generated. |\n| style | object | `{ bracketSpacing: false,  printWidth: 120,  semi: true,  singleQuote: false,  tabWidth: 2,  trailingComma: 'none',  useTabs: false }` | A [Prettier](https://prettier.io/docs/en/options.html) configuration |\n| unknownAny | boolean | `true` | Use `unknown` instead of `any` where possible |\n| unreachableDefinitions | boolean | `false` | Generates code for `definitions` that aren't referenced by the schema. |\n| strictIndexSignatures | boolean | `false` | Append all index signatures with `\\| undefined` so that they are strictly typed. |\n| $refOptions | object | `{}` | [$RefParser](https://github.com/BigstickCarpet/json-schema-ref-parser) Options, used when resolving `$ref`s |\n## CLI\n\nA CLI utility is provided with this package.\n\n```sh\ncat foo.json | json2ts > foo.d.ts\n# or\njson2ts foo.json > foo.d.ts\n# or\njson2ts foo.json foo.d.ts\n# or\njson2ts --input foo.json --output foo.d.ts\n# or\njson2ts -i foo.json -o foo.d.ts\n# or (quote globs so that your shell doesn't expand them)\njson2ts -i 'schemas/**/*.json'\n# or\njson2ts -i schemas/ -o types/\n```\n\nYou can pass any of the options described above (including style options) as CLI flags. Boolean values can be set to false using the `no-` prefix.\n\n```sh\n# generate code for definitions that aren't referenced\njson2ts -i foo.json -o foo.d.ts --unreachableDefinitions\n# use single quotes and disable trailing semicolons\njson2ts -i foo.json -o foo.d.ts --style.singleQuote --no-style.semi\n```\n\n## Tests\n\n`npm test`\n\n## Features\n\n- [x] `title` => `interface`\n- [x] Primitive types:\n  - [x] array\n  - [x] homogeneous array\n  - [x] boolean\n  - [x] integer\n  - [x] number\n  - [x] null\n  - [x] object\n  - [x] string\n  - [x] homogeneous enum\n  - [x] heterogeneous enum\n- [x] Non/extensible interfaces\n- [ ] Custom JSON-schema extensions\n- [x] Nested properties\n- [x] Schema definitions\n- [x] [Schema references](http://json-schema.org/latest/json-schema-core.html#rfc.section.7.2.2)\n- [x] Local (filesystem) schema references\n- [x] External (network) schema references\n- [x] Add support for running in browser\n- [x] default interface name\n- [x] infer unnamed interface name from filename\n- [x] `allOf` (\"intersection\")\n- [x] `anyOf` (\"union\")\n- [x] `oneOf` (treated like `anyOf`)\n- [x] `maxItems` ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L166))\n- [x] `minItems` ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L165))\n- [x] `additionalProperties` of type\n- [x] `patternProperties` (partial support)\n- [x] [`extends`](https://github.com/json-schema/json-schema/wiki/Extends/014e3cd8692250baad70c361dd81f6119ad0f696)\n- [x] `required` properties on objects ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L130))\n- [ ] `validateRequired` ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L124))\n- [x] literal objects in enum ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L236))\n- [x] referencing schema by id ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L331))\n- [x] custom typescript types via `tsType`\n\n## Custom schema properties:\n\n- `tsType`: Overrides the type that's generated from the schema. Useful for forcing a type to `any` or when using non-standard JSON schema extensions ([eg](https://github.com/sokra/json-schema-to-typescript/blob/f1f40307cf5efa328522bb1c9ae0b0d9e5f367aa/test/e2e/customType.ts)).\n- `tsEnumNames`: Overrides the names used for the elements in an enum. Can also be used to create string enums ([eg](https://github.com/johnbillion/wp-json-schemas/blob/647440573e4a675f15880c95fcca513fdf7a2077/schemas/properties/post-status-name.json)).\n\n## Not expressible in TypeScript:\n\n- `dependencies` ([single](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L261), [multiple](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L282))\n- `divisibleBy` ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L185))\n- [`format`](https://github.com/json-schema/json-schema/wiki/Format) ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L209))\n- `multipleOf` ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L186))\n- `maximum` ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L183))\n- `minimum` ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L182))\n- `maxProperties` ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L113))\n- `minProperties` ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L112))\n- `not`/`disallow`\n- `oneOf` (\"xor\", use `anyOf` instead)\n- `pattern` ([string](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L203), [regex](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L207))\n- `uniqueItems` ([eg](https://github.com/tdegrunt/jsonschema/blob/67c0e27ce9542efde0bf43dc1b2a95dd87df43c3/examples/all.js#L172))\n\n## FAQ\n\n### JSON-Schema-to-TypeScript is crashing on my giant file. What can I do?\n\nPrettier is known to run slowly on really big files. To skip formatting and improve performance, set the `format` option to `false`.\n\n## Further Reading\n\n- JSON-schema spec: https://tools.ietf.org/html/draft-zyp-json-schema-04\n- JSON-schema wiki: https://github.com/json-schema/json-schema/wiki\n- JSON-schema test suite: https://github.com/json-schema/JSON-Schema-Test-Suite/blob/node\n- TypeScript spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md\n\n## Who uses JSON-Schema-to-TypeScript?\n\n- [AWS](https://github.com/aws/aws-toolkit-vscode), [AWSLabs](https://github.com/awslabs/cdk8s)\n- [FormatJS](https://github.com/formatjs/formatjs)\n- [Microsoft](https://github.com/microsoft/mixed-reality-extension-sdk)\n- [Sourcegraph](https://github.com/sourcegraph/sourcegraph)\n- [Stryker](https://github.com/stryker-mutator/stryker)\n- [Webpack](https://github.com/webpack/webpack)\n- [See more](https://github.com/bcherny/json-schema-to-typescript/network/dependents?package_id=UGFja2FnZS0xNjUxOTM5Mg%3D%3D)"},"npm":{"downloads":[{"from":"2021-07-10T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":4116},{"from":"2021-07-04T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":127001},{"from":"2021-06-11T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":543502},{"from":"2021-04-12T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":1622404},{"from":"2021-01-12T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":3155622},{"from":"2020-07-11T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":5796804}],"dependentsCount":160,"starsCount":5},"github":{"homepage":"https://bcherny.github.io/json-schema-to-typescript-browser/","starsCount":1773,"forksCount":224,"subscribersCount":19,"issues":{"count":395,"openCount":121,"distribution":{"3600":35,"10800":10,"32400":24,"97200":23,"291600":22,"874800":28,"2624400":37,"7873200":52,"23619600":55,"70858800":57,"212576400":52},"isDisabled":false},"contributors":[{"username":"bradzacher","commitsCount":13},{"username":"grantila","commitsCount":1},{"username":"thurst0","commitsCount":1},{"username":"jefbarn","commitsCount":2},{"username":"monolithed","commitsCount":3},{"username":"Liooo","commitsCount":1},{"username":"Speedy37","commitsCount":6},{"username":"ikorolev93","commitsCount":2},{"username":"JochenDiekenbrock","commitsCount":2},{"username":"ohana54","commitsCount":1},{"username":"G-Rath","commitsCount":8},{"username":"darcyparker","commitsCount":12},{"username":"qzb","commitsCount":1},{"username":"erykpiast","commitsCount":1},{"username":"skilFullGH","commitsCount":1},{"username":"joanrieu","commitsCount":9},{"username":"devoto13","commitsCount":1},{"username":"SimonSiefke","commitsCount":1},{"username":"nicojs","commitsCount":1},{"username":"dl748","commitsCount":1},{"username":"jrylan","commitsCount":1},{"username":"wadik12","commitsCount":1},{"username":"sokra","commitsCount":2},{"username":"aloisklink","commitsCount":1},{"username":"zhangciwu","commitsCount":1},{"username":"awlayton","commitsCount":1},{"username":"victorandree","commitsCount":1},{"username":"iwan-aucamp-cs","commitsCount":2},{"username":"dillonwilliams","commitsCount":1},{"username":"qm3ster","commitsCount":3},{"username":"gmathieu","commitsCount":3},{"username":"johnbillion","commitsCount":1},{"username":"jcogilvie","commitsCount":1},{"username":"cherryblossom000","commitsCount":1},{"username":"bradleyayers","commitsCount":1},{"username":"henkesn","commitsCount":1},{"username":"bcherny","commitsCount":252},{"username":"lukeggchapman","commitsCount":1},{"username":"forivall","commitsCount":1},{"username":"Ethan-Arrowood","commitsCount":1}],"commits":[{"from":"2021-07-04T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":0},{"from":"2021-06-11T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":0},{"from":"2021-04-12T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":0},{"from":"2021-01-12T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":6},{"from":"2020-07-11T00:00:00.000Z","to":"2021-07-11T00:00:00.000Z","count":60}]},"source":{"files":{"readmeSize":9601,"testsSize":4803948,"hasNpmIgnore":true,"hasChangelog":true},"badges":[{"urls":{"original":"https://img.shields.io/npm/v/json-schema-to-typescript.svg?style=flat-square","shields":"https://img.shields.io/npm/v/json-schema-to-typescript.svg","content":"https://img.shields.io/npm/v/json-schema-to-typescript.json"},"info":{"service":"npm","type":"version","modifiers":{"type":"v"}}},{"urls":{"original":"https://img.shields.io/npm/l/json-schema-to-typescript.svg?style=flat-square","shields":"https://img.shields.io/npm/l/json-schema-to-typescript.svg","content":"https://img.shields.io/npm/l/json-schema-to-typescript.json"},"info":{"service":"npm","type":"license","modifiers":{"type":"l"}}}],"linters":["editorconfig","eslint","prettier"],"outdatedDependencies":{"get-stdin":{"required":"^8.0.0","stable":"9.0.0","latest":"9.0.0"},"glob-promise":{"required":"^3.4.0","stable":"4.2.0","latest":"4.2.0"}}}},"evaluation":{"quality":{"carefulness":0.9999999999999999,"tests":0.6,"health":0.7333333333333334,"branding":0.3},"popularity":{"communityInterest":2061,"downloadsCount":540801.3333333334,"downloadsAcceleration":971.164269406393,"dependentsCount":160},"maintenance":{"releasesFrequency":0.8536815068493151,"commitsFrequency":0.7218150684931507,"openIssues":0.8227848101265822,"issuesDistribution":0}},"score":{"final":0.6397142016127034,"detail":{"quality":0.9291433553336662,"popularity":0.36538840647511694,"maintenance":0.6659578649894647}}}